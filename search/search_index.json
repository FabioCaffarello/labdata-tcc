{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Architecture","text":""},{"location":"#overview","title":"Overview","text":"<p>The architecture of the LabData TCC project is designed to be modular and scalable, consisting of shared services and operation services. Shared services provide common functionality used across the system, while operation services handle specific tasks related to the project's goals.</p>"},{"location":"#shared-services","title":"Shared Services","text":""},{"location":"#configuration-api-config-vault","title":"Configuration API (Config Vault)","text":"<p>Purpose: Manages and provides configuration settings required by other services to function correctly. Technologies: Golang Key Features: - Centralized configuration management. - Dynamic configuration updates.</p> <p>Example Configuration: <pre><code>{\n    \"active\": true,\n    \"service\": \"video-downloader\",\n    \"source\": \"pinkfong\",\n    \"provider\": \"kids\",\n    \"job_parameters\": {\n        \"parser_module\": \"youtube_downloader\"\n    },\n    \"depends_on\": [{\n        \"service\": \"file-watcher\",\n        \"source\": \"pinkfong\"\n    }]\n}\n</code></pre></p>"},{"location":"#schema-api-schema-vault","title":"Schema API (Schema Vault)","text":"<p>Purpose: Handles the schemas for input and output data, ensuring data consistency and validation. Technologies: Golang Key Features: - Schema management for different jobs.</p> <p>Example Input Schema: <pre><code>{\n    \"service\": \"video-downloader\",\n    \"source\": \"pinkfong\",\n    \"provider\": \"kids\",\n    \"schema_type\": \"input\",\n    \"json_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"videoId\": {\n                \"type\": \"string\"\n            }\n        },\n        \"required\": [\"videoId\"]\n    }\n}\n</code></pre></p> <p>Example Output Schema: <pre><code>{\n    \"service\": \"video-downloader\",\n    \"source\": \"pinkfong\",\n    \"provider\": \"kids\",\n    \"schema_type\": \"output\",\n    \"json_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"videoUri\": {\n                \"type\": \"string\"\n            },\n            \"partition\": {\n                \"type\": \"string\"\n            }\n        },\n        \"required\": [\"videoUri\", \"partition\"]\n    }\n}\n</code></pre></p>"},{"location":"#input-api","title":"Input API","text":"<p>Purpose: Manages all input data and triggers jobs by publishing messages to RabbitMQ. Technologies: Golang Key Features: - Input data handling. - Message publishing to RabbitMQ.</p> <p>Example Input: <pre><code>{\n    \"service\": \"video-downloader\",\n    \"source\": \"pinkfong\",\n    \"provider\": \"kids\",\n    \"data\": {\n        \"videoId\": \"XqZsoesa55w\"\n    }\n}\n</code></pre></p>"},{"location":"#output-api-output-vault","title":"Output API (Output Vault)","text":"<p>Purpose: Manages output data, including storage and retrieval. Technologies: Golang Key Features: - Centralized output management. - Scalable storage solutions.</p> <p>Example Output: <pre><code>{\n    \"service\": \"video-downloader\",\n    \"source\": \"pinkfong\",\n    \"provider\": \"kids\",\n    \"data\": {\n        \"uri\": \"http://minio:9000/kids-pinkfong/video-downloader/videos/XqZsoesa55w/video.mp4\",\n        \"partition\": \"video-downloader/videos/XqZsoesa55w\"\n    },\n    \"metadata\": {\n        \"input_id\": \"da853c5826b798b82320e42024d97837\",\n        \"input\": {\n            \"data\": {\n                \"videoId\": \"XqZsoesa55w\"\n            },\n            \"processing_id\": \"aae4b46a-855f-449b-aa0a-f595241b6d8d\",\n            \"processing_timestamp\": \"2024-06-24 08:30:00\"\n        }\n    }\n}\n</code></pre></p>"},{"location":"#data-lineage-processing-lineage","title":"Data Lineage (Processing Lineage)","text":"<p>Purpose:  Manages and controls job lineage to ensure transparency and traceability of data processing\u00a0workflows. Technologies: Golang  Key Features: - Centralized processing management. - Tracking of job execution history. - Ensuring traceability and transparency in data processing workflows.</p> <p>Example Processing Lineage: <pre><code>{\n    \"parent_processing_id\": \"1591d02f-3bd6-4c94-94e1-4646210e2c89\",\n    \"tasks\": [\n        {\n            \"source\": \"pinkfong\",\n            \"service\": \"file-watcher\",\n            \"provider\": \"kids\",\n            \"processing_id\": \"1591d02f-3bd6-4c94-94e1-4646210e2c89\",\n            \"parent_processing_id\": \"1591d02f-3bd6-4c94-94e1-4646210e2c89\",\n            \"status_code\": 200,\n            \"configs\": {\n                \"config_id\": \"ffabbe29f917c95197cd41fadc9c1635\",\n                \"config_version_id\": \"be188d85-e856-5e8c-be10-9f6a38cf2eae\",\n                \"schemas\": [\n                    {\n                        \"version\": \"f6992dbd-6c40-4130-8c1d-b8084b044c67\",\n                        \"schema_type\": \"input\",\n                        \"schemaID\": \"9a77d331df7c3bc78b34be01e3c11739\"\n                    },{\n                        \"version\": \"722f9b83-2e7d-47fa-a444-025e8486c542\",\n                        \"schema_type\": \"output\",\n                        \"schemaID\": \"d627223805943b9336298f6c9edb7716\"\n                    }\n                ]\n            },\n            \"input_id\": \"fca1ced9e6efb2252ca056988d2f4495\",\n            \"output_id\": \"3ef702427d2e223f401c55c43db4f717\",\n            \"processing_timestamp\": \"2024-01-10T01:53:12Z\"\n        },\n        {\n            \"source\": \"pinkfong\",\n            \"service\": \"video-watcher\",\n            \"provider\": \"kids\",\n            \"processing_id\": \"5064fb9a-67ed-44d9-9a21-85d77cbada0e\",\n            \"parent_processing_id\": \"1591d02f-3bd6-4c94-94e1-4646210e2c89\",\n            \"status_code\": 200,\n            \"configs\": {\n                \"config_id\": \"8ebfb00547d519fc36a2f4bb07188b36\",\n                \"config_version_id\": \"9ac394fd-a50c-431c-999b-3bd63d548f51\",\n                \"schemas\": [\n                    {\n                        \"version\": \"aa26e22a-e61e-48cd-95ae-32fd35006a16\",\n                        \"schema_type\": \"input\",\n                        \"schemaID\": \"3b99a6260cf0762e9a0de53bfb5b7bc5\"\n                    },{\n                        \"version\": \"664894cd-a6f0-40c0-be51-876508264c5b\",\n                        \"schema_type\": \"output\",\n                        \"schemaID\": \"178b6e9c84e665439c80544ca34e490e\"\n                    }\n                ]\n            },\n            \"input_id\": \"0d4918689ee5225da72d60fbbc7d2f06\",\n            \"output_id\": \"ad43547e5896519be80e175c0210da20\",\n            \"processing_timestamp\": \"2024-07-10T01:53:12Z\"\n        },\n        {\n            \"source\": \"pinkfong\",\n            \"service\": \"video-watcher\",\n            \"provider\": \"kids\",\n            \"processing_id\": \"60d55a89-efcf-4a7f-bc7a-bab28ad3a474\",\n            \"parent_processing_id\": \"1591d02f-3bd6-4c94-94e1-4646210e2c89\",\n            \"status_code\": 200,\n            \"configs\": {\n                \"config_id\": \"8ebfb00547d519fc36a2f4bb07188b36\",\n                \"config_version_id\": \"9ac394fd-a50c-431c-999b-3bd63d548f51\",\n                \"schemas\": [\n                    {\n                        \"version\": \"aa26e22a-e61e-48cd-95ae-32fd35006a16\",\n                        \"schema_type\": \"input\",\n                        \"schemaID\": \"3b99a6260cf0762e9a0de53bfb5b7bc5\"\n                    },{\n                        \"version\": \"664894cd-a6f0-40c0-be51-876508264c5b\",\n                        \"schema_type\": \"output\",\n                        \"schemaID\": \"178b6e9c84e665439c80544ca34e490e\"\n                    }\n                ]\n            },\n            \"input_id\": \"1195c9bbf8d73025a0c33298bc59f5be\",\n            \"output_id\": \"bc22dbca359dacb500948e0573771c10\",\n            \"processing_timestamp\": \"2024-07-10T01:55:57Z\"\n        },\n    ]\n}\n</code></pre></p>"},{"location":"#orchestrator-service-events-router","title":"Orchestrator Service (Events Router)","text":"<p>Purpose: Listens to messages from RabbitMQ and orchestrates the sequence of job executions by triggering appropriate operation services. Technologies: Golang Key Features: - Job orchestration     - Pre processing Input:         - Validate Input with the properly schema.         - Create an unit operation job at the processing lineage API.         - Dispatch an Input to the properly service.     - Processing:         - Update Input status     - Service Feedback         - Save the output         - Update Input Status         - Triggered jobs that depends on the jobs that finished (if success status)         - Creates the data processing lineage.</p>"},{"location":"#operation-services","title":"Operation Services","text":""},{"location":"#video-downloader-service-video-downloader","title":"Video Downloader Service (Video downloader)","text":"<p>Purpose: Downloads videos from YouTube and saves MP4 files in a storage bucket. Technologies: Python  Key Features: - Video downloading - Storage management</p>"},{"location":"#audio-converter-service-audio-provider","title":"Audio Converter Service (Audio Provider)","text":"<p>Purpose: Converts MP4 files to MP3 format. Technologies: Python Key Features: - Audio conversion - Format handling</p>"},{"location":"#text-extractor-service-speech-recognizer","title":"Text Extractor Service  (Speech Recognizer)","text":"<p>Purpose: Extracts text from MP3 files using LLM models. Technologies: Python Key Features: - Text extraction - Audio processing</p>"},{"location":"#rag-service-rag-interpreter","title":"RAG Service (Rag Interpreter)","text":"<p>Purpose: Applies Retrieval-Augmented Generation (RAG) to preprocess text data before embedding creation. Technologies: Python Key Features: - Text preprocessing - Enhancement of data quality for embeddings</p>"},{"location":"#knowledge-graph-creation-service-graph-forge","title":"Knowledge Graph Creation Service (Graph Forge)","text":"<p>Purpose: Utilizes RAG-processed text to create and manage a knowledge graph in Neo4J. This service is essential for establishing relationships between different entities derived from processed data and enabling complex querying capabilities. Technologies: Python Key Features: - Knowledge graph creation: Constructs the knowledge graph using text data processed by the RAG service. - Relationship mapping:Establishes connections between entities based on semantic relationships identified in the RAG-processed text.</p>"},{"location":"#front-end","title":"Front-end","text":"<p>Purpose: Designed to provide an intuitive and interactive user interface for users to interact with the knowledge graph semantically. Technologies: React.js  Key Features: - Prompt to execute semantic queries</p>"},{"location":"CONTRIBUTING/","title":"Contributing to LabData TCC","text":"<p>Thank you for your interest in contributing to the labdata-tcc project! I welcome contributions from the community and am excited to see what you'll bring to the project. This document outlines the guidelines for contributing to the project.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting Started","text":""},{"location":"CONTRIBUTING/#fork-the-repository","title":"Fork the Repository","text":"<ol> <li>Fork the repository by clicking the \"Fork\" button on the top right of the repository page.</li> <li>Clone your fork to your local machine:</li> </ol> <pre><code>git clone https://github.com/&lt;your-username&gt;/labdata-tcc.git\ncd labdata-tcc\n</code></pre> <ol> <li>Add the upstream repository:</li> </ol> <pre><code>git remote add upstream https://github.com/FabioCaffarello/labdata-tcc.git\n</code></pre>"},{"location":"CONTRIBUTING/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li> <p>Running Locally</p> </li> <li> <p>Prerequisites</p> <p>Ensure you have the required software installed:  - Python 3.10    - Poetry <pre><code>pip install poetry==1.8.3\n</code></pre>  - Golang 1.22.x    - Wire <pre><code>go install github.com/google/wire/cmd/wire@latest \n</code></pre>    - gomarkdoc <pre><code>go install github.com/princjef/gomarkdoc/cmd/gomarkdoc@latest\n</code></pre>  - Node.js 22.x  - Docker 26.1.1</p> </li> <li> <p>Set Up the Environment</p> <ul> <li> <p>Install NodeJS dependencies:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Install Python dependencies:    <pre><code>poetry install\n</code></pre></p> </li> </ul> </li> <li> <p>Running in a Devcontainer Locally</p> </li> </ol> <p>Ensure you have Docker and Visual Studio Code installed with the Remote - Containers extension. Open the repository in Visual Studio Code and click on \"Reopen in Container\" when prompted. The environment will be set up automatically.</p> <ol> <li>Running in GitHub Codespaces</li> </ol> <p>You can also run the project in GitHub Codespaces directly. Navigate to the repository on GitHub, click the \"Code\" button, and select \"Open with Codespaces\" to create a new codespace. The environment will be set up automatically.</p> <ul> <li> <p>Set Up Husky</p> <p>If you choose to run the project locally, you must set up Husky for managing Git hooks:</p> <pre><code>npm prepare\n</code></pre> </li> </ul>"},{"location":"CONTRIBUTING/#commit-message-linting","title":"Commit Message Linting","text":"<p>I use commit message linting to maintain a consistent commit history. Please follow the commit message format:</p> <pre><code>git commit -m \"type(scope): Description of your changes\"\n</code></pre> <p>For example:</p> <pre><code>git commit -m \"feat(api): Add new endpoint for data retrieval\"\n</code></pre> <p>The available types are: - <code>feat</code>: A new feature - <code>fix</code>: A bug fix - <code>docs</code>: Documentation only changes - <code>style</code>: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) - <code>refactor</code>: A code change that neither fixes a bug nor adds a feature - <code>perf</code>: A code change that improves performance - <code>test</code>: Adding missing or correcting existing tests - <code>chore</code>: Changes to the build process or auxiliary tools and libraries such as documentation generation</p>"},{"location":"CONTRIBUTING/#making-changes","title":"Making Changes","text":"<ol> <li>Create a Branch</li> </ol> <p>Create a new branch for your feature or bugfix:</p> <pre><code>git checkout -b &lt;branch-name&gt;\n</code></pre> <ol> <li>Make Your Changes</li> </ol> <p>Implement your changes. Ensure your code follows the project's coding standards and includes appropriate tests.</p> <ol> <li>Commit Your Changes</li> </ol> <p>Commit your changes with a clear and descriptive commit message following the commit message linting guidelines:</p> <pre><code>git add .\ngit commit -m \"type(scope): Description of your changes\"\n</code></pre> <ol> <li>Push Your Changes</li> </ol> <p>Push your changes to your forked repository:</p> <pre><code>git push origin &lt;branch-name&gt;\n</code></pre> <ol> <li>Submit a Pull Request</li> </ol> <p>Go to the original repository on GitHub and open a pull request. Provide a detailed description of your changes and any additional context that may be helpful for the reviewers.</p>"},{"location":"CONTRIBUTING/#code-style","title":"Code Style","text":"<ul> <li>Follow the coding style guidelines and best practices for Python, Go, and JavaScript.</li> <li>Use descriptive variable and function names.</li> <li>Write clear and concise comments where necessary.</li> <li>Use Docstrings:</li> <li>For Python, follow the Google Python Style Guide</li> <li>For Go, use GoDoc style for documentation.</li> <li>For JavaScript, use JSDoc style for documentation.</li> <li>Update README Files:</li> <li>Ensure that you update the README files in relevant directories to reflect any changes you make to the code or documentation.</li> <li>Provide clear instructions and examples where necessary to help others understand and use the code.</li> </ul>"},{"location":"CONTRIBUTING/#running-tests","title":"Running Tests","text":"<p>Ensure that all tests pass before submitting your pull request. You can run the tests using the following commands:</p> <ul> <li>Run tests for a specific project:   <pre><code>make check project=&lt;project-name&gt;\n</code></pre></li> </ul> <p>If you are unsure about the project name, you can check it in the <code>project.json</code> file of the respective project.</p> <ul> <li>Run all tests:   <pre><code>make check-all\n</code></pre></li> </ul>"},{"location":"CONTRIBUTING/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter any issues or have suggestions for improvements, please open an issue on GitHub. Provide as much detail as possible to help us understand and address the issue.</p>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing to LabData TCC, you agree that your contributions will be licensed under the MIT License.</p>"},{"location":"CONTRIBUTING/#thank-you","title":"Thank You!","text":"<p>Thank you for your contributions to labdata-tcc! Your efforts help make this project better for everyone. If you have any questions or need further assistance, feel free to contact us at LinkedIn or open an issue on GitHub.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#introduction","title":"Introduction","text":"<p>Welcome to the LabData TCC project! This project is part of my final work for the master's program in Data Engineering at FIA Business School. The aim of this project is to build an event-driven architecture (EDA) using configuration-oriented microservices for downloading videos from YouTube . These downloads will be used to create a knowledge graph using large language models (LLMs), enabling semantic queries through prompts as a chat chain. This repository is a monorepo, containing multiple packages and services that work together to achieve the project's goals.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Depending on how you choose to run the project, the requirements may vary. Please ensure you have met the following requirements based on your preferred method:</p> <ol> <li> <p>Running Locally</p> </li> <li> <p>You have installed:</p> <ul> <li>Python 3.10</li> <li>Poetry <pre><code>pip install poetry==1.8.3\n</code></pre></li> <li>Golang 1.22.x</li> <li>Wire <pre><code>go install github.com/google/wire/cmd/wire@latest \n</code></pre></li> <li>gomarkdoc <pre><code>go install github.com/princjef/gomarkdoc/cmd/gomarkdoc@latest\n</code></pre></li> <li>Node.js 22.x</li> <li>docker 26.1.1</li> </ul> </li> <li> <p>Running in a Devcontainer Locally</p> </li> <li> <p>You have installed:</p> <ul> <li>Docker</li> <li>Visual Studio Code with the Remote - Containers extension</li> </ul> </li> <li> <p>Running in GitHub Codespaces</p> </li> <li> <p>You have a GitHub account with access to GitHub Codespaces.</p> </li> </ol>"},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li>Clone the Repository</li> </ol> <p>First, clone the repository to your local machine using git:</p> <pre><code>git clone https://github.com/FabioCaffarello/labdata-tcc.git\ncd labdata-tcc\n</code></pre>"},{"location":"getting-started/#running-the-project","title":"Running the Project","text":"<ol> <li> <p>Running Locally</p> </li> <li> <p>Set Up the Environment</p> <p>Ensure you have all the required dependencies:</p> <ul> <li> <p>NodeJS:     <pre><code>npm install\n</code></pre></p> </li> <li> <p>Python:     <pre><code>poetry install\n</code></pre></p> </li> </ul> </li> <li> <p>Running in a Devcontainer Locally</p> </li> </ol> <p>Ensure you have Docker and Visual Studio Code installed with the Remote - Containers extension. Open the repository in Visual Studio Code and click on \"Reopen in Container\" when prompted. The environment will be set up automatically.</p> <ol> <li>Running in GitHub Codespaces</li> </ol> <p>You can also run the project in GitHub Codespaces directly. Navigate to the repository on GitHub, click the \"Code\" button, and select \"Open with Codespaces\" to create a new codespace. The environment will be set up automatically.</p>"},{"location":"getting-started/#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please read the CONTRIBUTING.md file for details on the process for submitting pull requests.</p>"},{"location":"getting-started/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"getting-started/#contact","title":"Contact","text":"<p>If you have any questions or need further assistance, feel free to contact me at linkedin or open an issue on GitHub.</p>"},{"location":"summary/","title":"Summary","text":"<ul> <li>Getting Started</li> <li>Architecture</li> <li>Services</li> <li>Libraries</li> <li>Dependency Graph</li> </ul>"},{"location":"reference/libs/golang/clients/apis/config-vault/","title":"config-vault/client","text":"<p><code>config-vault/client</code> is a Go library that provides a client for interacting with the configuration vault API. This library includes functionalities for creating, reading, updating, and deleting configuration entities via HTTP requests.</p>"},{"location":"reference/libs/golang/clients/apis/config-vault/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete configuration entities via HTTP requests.</li> <li>List configurations based on various attributes such as service, provider, source, and dependencies.</li> <li>Handles request creation, sending, and response processing.</li> </ul>"},{"location":"reference/libs/golang/clients/apis/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/clients/apis/config-vault/#creating-a-client","title":"Creating a Client","text":"<p>The <code>Client</code> struct provides methods to interact with the configuration vault API.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"fmt\"\n    \"config-vault/client\"\n    inputdto \"libs/golang/ddd/dtos/config-vault/input\"\n)\n\nfunc main() {\n    cli := client.NewClient()\n\n    // Create a new configuration\n    configInput := inputdto.ConfigDTO{\n        Active:   true,\n        Service:  \"example-service\",\n        Source:   \"example-source\",\n        Provider: \"example-provider\",\n        DependsOn: []inputdto.JobDependenciesDTO{\n            {Service: \"dep-service\", Source: \"dep-source\"},\n        },\n    }\n\n    configOutput, err := cli.CreateConfig(configInput)\n    if err != nil {\n        log.Fatalf(\"Failed to create config: %v\", err)\n    }\n    fmt.Printf(\"Created config: %+v\\n\", configOutput)\n\n    // Other client methods can be used similarly...\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#client-methods","title":"Client Methods","text":""},{"location":"reference/libs/golang/clients/apis/config-vault/#createconfig","title":"CreateConfig","text":"<p>Creates a new configuration.</p> <pre><code>func (c *Client) CreateConfig(configInput inputdto.ConfigDTO) (outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#updateconfig","title":"UpdateConfig","text":"<p>Updates an existing configuration.</p> <pre><code>func (c *Client) UpdateConfig(configInput inputdto.ConfigDTO) (outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#listallconfigs","title":"ListAllConfigs","text":"<p>Lists all configurations.</p> <pre><code>func (c *Client) ListAllConfigs() ([]outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#listconfigbyid","title":"ListConfigByID","text":"<p>Gets a configuration by its ID.</p> <pre><code>func (c *Client) ListConfigByID(id string) (outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#deleteconfig","title":"DeleteConfig","text":"<p>Deletes a configuration by its ID.</p> <pre><code>func (c *Client) DeleteConfig(id string) error\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#listconfigsbyserviceandprovider","title":"ListConfigsByServiceAndProvider","text":"<p>Lists configurations by service and provider.</p> <pre><code>func (c *Client) ListConfigsByServiceAndProvider(service, provider string) ([]outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#listconfigsbysourceandprovider","title":"ListConfigsBySourceAndProvider","text":"<p>Lists configurations by source and provider.</p> <pre><code>func (c *Client) ListConfigsBySourceAndProvider(source, provider string) ([]outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#listconfigsbyserviceandproviderandactive","title":"ListConfigsByServiceAndProviderAndActive","text":"<p>Lists configurations by service, provider, and active status.</p> <pre><code>func (c *Client) ListConfigsByServiceAndProviderAndActive(service, provider, active string) ([]outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#listconfigsbyserviceandsourceandprovider","title":"ListConfigsByServiceAndSourceAndProvider","text":"<p>Lists configurations by service, source, and provider.</p> <pre><code>func (c *Client) ListConfigsByServiceAndSourceAndProvider(service, source, provider string) ([]outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#listconfigsbyprovideranddependencies","title":"ListConfigsByProviderAndDependencies","text":"<p>Lists configurations by provider and dependencies.</p> <pre><code>func (c *Client) ListConfigsByProviderAndDependencies(provider, service, source string) ([]outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>client</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-clients-apis-config-vault\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/#error-handling","title":"Error Handling","text":"<p>The client methods include error handling for various scenarios, such as:</p> <ul> <li>Invalid request body</li> <li>Request timeout</li> <li>Internal server errors during API interaction</li> </ul> <p>These errors are handled and returned as appropriate Go errors.</p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#client","title":"client","text":"<pre><code>import \"libs/golang/clients/apis/config-vault/client\"\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type Client</li> <li>func NewClient() *Client</li> <li>func (c *Client) CreateConfig(configInput inputdto.ConfigDTO) (outputdto.ConfigDTO, error)</li> <li>func (c *Client) DeleteConfig(id string) error</li> <li>func (c *Client) ListAllConfigs() ([]outputdto.ConfigDTO, error)</li> <li>func (c *Client) ListConfigByID(id string) (outputdto.ConfigDTO, error)</li> <li>func (c *Client) ListConfigsByProviderAndDependencies(provider, service, source string) ([]outputdto.ConfigDTO, error)</li> <li>func (c *Client) ListConfigsByServiceAndProvider(service, provider string) ([]outputdto.ConfigDTO, error)</li> <li>func (c *Client) ListConfigsByServiceAndProviderAndActive(service, provider, active string) ([]outputdto.ConfigDTO, error)</li> <li>func (c *Client) ListConfigsByServiceAndSourceAndProvider(service, source, provider string) ([]outputdto.ConfigDTO, error)</li> <li>func (c *Client) ListConfigsBySourceAndProvider(source, provider string) ([]outputdto.ConfigDTO, error)</li> <li>func (c *Client) UpdateConfig(configInput inputdto.ConfigDTO) (outputdto.ConfigDTO, error)</li> </ul>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#type-client","title":"type Client","text":"<p>Client represents the configuration vault client.</p> <pre><code>type Client struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient() *Client\n</code></pre> <p>NewClient initializes a new configuration vault client.</p> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-createconfig","title":"func (*Client) CreateConfig","text":"<pre><code>func (c *Client) CreateConfig(configInput inputdto.ConfigDTO) (outputdto.ConfigDTO, error)\n</code></pre> <p>CreateConfig sends a request to create a new configuration.</p> <p>Parameters:</p> <ul> <li>configInput: The configuration data transfer object.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.ConfigDTO: The created configuration data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-deleteconfig","title":"func (*Client) DeleteConfig","text":"<pre><code>func (c *Client) DeleteConfig(id string) error\n</code></pre> <p>DeleteConfig sends a request to delete a configuration by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the configuration.</li> </ul> <p>Returns:</p> <ul> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-listallconfigs","title":"func (*Client) ListAllConfigs","text":"<pre><code>func (c *Client) ListAllConfigs() ([]outputdto.ConfigDTO, error)\n</code></pre> <p>ListAllConfigs sends a request to retrieve all configurations.</p> <p>Returns:</p> <ul> <li>[]outputdto.ConfigDTO: A slice of configuration data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-listconfigbyid","title":"func (*Client) ListConfigByID","text":"<pre><code>func (c *Client) ListConfigByID(id string) (outputdto.ConfigDTO, error)\n</code></pre> <p>ListConfigByID sends a request to retrieve a configuration by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the configuration.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.ConfigDTO: The configuration data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-listconfigsbyprovideranddependencies","title":"func (*Client) ListConfigsByProviderAndDependencies","text":"<pre><code>func (c *Client) ListConfigsByProviderAndDependencies(provider, service, source string) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>ListConfigsByProviderAndDependencies sends a request to retrieve configurations by provider and dependencies.</p> <p>Parameters:</p> <ul> <li>provider: The provider name.</li> <li>service: The service name.</li> <li>source: The source name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.ConfigDTO: A slice of configuration data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-listconfigsbyserviceandprovider","title":"func (*Client) ListConfigsByServiceAndProvider","text":"<pre><code>func (c *Client) ListConfigsByServiceAndProvider(service, provider string) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>ListConfigsByServiceAndProvider sends a request to retrieve configurations by service and provider.</p> <p>Parameters:</p> <ul> <li>service: The service name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.ConfigDTO: A slice of configuration data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-listconfigsbyserviceandproviderandactive","title":"func (*Client) ListConfigsByServiceAndProviderAndActive","text":"<pre><code>func (c *Client) ListConfigsByServiceAndProviderAndActive(service, provider, active string) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>ListConfigsByServiceAndProviderAndActive sends a request to retrieve configurations by service, provider, and active status.</p> <p>Parameters:</p> <ul> <li>service: The service name.</li> <li>provider: The provider name.</li> <li>active: The active status.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.ConfigDTO: A slice of configuration data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-listconfigsbyserviceandsourceandprovider","title":"func (*Client) ListConfigsByServiceAndSourceAndProvider","text":"<pre><code>func (c *Client) ListConfigsByServiceAndSourceAndProvider(service, source, provider string) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>ListConfigsByServiceAndSourceAndProvider sends a request to retrieve configurations by service, source, and provider.</p> <p>Parameters:</p> <ul> <li>service: The service name.</li> <li>source: The source name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.ConfigDTO: A slice of configuration data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-listconfigsbysourceandprovider","title":"func (*Client) ListConfigsBySourceAndProvider","text":"<pre><code>func (c *Client) ListConfigsBySourceAndProvider(source, provider string) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>ListConfigsBySourceAndProvider sends a request to retrieve configurations by source and provider.</p> <p>Parameters:</p> <ul> <li>source: The source name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.ConfigDTO: A slice of configuration data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/config-vault/docs/godoc/#func-client-updateconfig","title":"func (*Client) UpdateConfig","text":"<pre><code>func (c *Client) UpdateConfig(configInput inputdto.ConfigDTO) (outputdto.ConfigDTO, error)\n</code></pre> <p>UpdateConfig sends a request to update an existing configuration.</p> <p>Parameters:</p> <ul> <li>configInput: The configuration data transfer object.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.ConfigDTO: The updated configuration data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/clients/apis/input-broker/","title":"input-broker/client","text":"<p><code>input-broker/client</code> is a Go library that provides a client for interacting with the input broker API. This library includes functionalities for creating inputs via HTTP requests.</p>"},{"location":"reference/libs/golang/clients/apis/input-broker/#features","title":"Features","text":"<ul> <li>Create input entities via HTTP requests.</li> <li>Handles request creation, sending, and response processing.</li> </ul>"},{"location":"reference/libs/golang/clients/apis/input-broker/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/clients/apis/input-broker/#creating-a-client","title":"Creating a Client","text":"<p>The <code>Client</code> struct provides methods to interact with the input broker API.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"fmt\"\n    \"input-broker/client\"\n    inputdto \"libs/golang/ddd/dtos/input-broker/input\"\n)\n\nfunc main() {\n    cli := client.NewClient()\n\n    // Create a new input\n    inputInput := inputdto.InputDTO{\n        Provider: \"example-provider\",\n        Service:  \"example-service\",\n        Source:   \"example-source\",\n        Data:     map[string]interface{}{\"key\": \"value\"},\n    }\n\n    inputOutput, err := cli.CreateInput(inputInput)\n    if err != nil {\n        log.Fatalf(\"Failed to create input: %v\", err)\n    }\n    fmt.Printf(\"Created input: %+v\\n\", inputOutput)\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/input-broker/#client-methods","title":"Client Methods","text":""},{"location":"reference/libs/golang/clients/apis/input-broker/#createinput","title":"CreateInput","text":"<p>Creates a new input.</p> <pre><code>func (c *Client) CreateInput(inputInput inputdto.InputDTO) (outputdto.InputDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/input-broker/#testing","title":"Testing","text":"<p>To run the tests for the <code>client</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-clients-apis-input-broker-client\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/input-broker/#error-handling","title":"Error Handling","text":"<p>The client methods include error handling for various scenarios, such as:</p> <ul> <li>Invalid request body</li> <li>Request timeout</li> <li>Internal server errors during API interaction</li> </ul> <p>These errors are handled and returned as appropriate Go errors.</p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#client","title":"client","text":"<pre><code>import \"libs/golang/clients/apis/input-broker/client\"\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>type Client</li> <li>func NewClient() *Client</li> <li>func (c *Client) CreateInput(inputInput inputdto.InputDTO) (outputdto.InputDTO, error)</li> <li>func (c *Client) DeleteInput(id string) error</li> <li>func (c *Client) GetInputByID(id string) (outputdto.InputDTO, error)</li> <li>func (c *Client) ListAllInputs() ([]outputdto.InputDTO, error)</li> <li>func (c *Client) ListInputsByServiceAndProvider(service, provider string) ([]outputdto.InputDTO, error)</li> <li>func (c *Client) ListInputsByServiceAndSourceAndProvider(service, source, provider string) ([]outputdto.InputDTO, error)</li> <li>func (c *Client) ListInputsBySourceAndProvider(source, provider string) ([]outputdto.InputDTO, error)</li> <li>func (c *Client) ListInputsByStatusAndProvider(status int, provider string) ([]outputdto.InputDTO, error)</li> <li>func (c *Client) ListInputsByStatusAndServiceAndProvider(status int, service, provider string) ([]outputdto.InputDTO, error)</li> <li>func (c *Client) ListInputsByStatusAndServiceAndSourceAndProvider(status int, service, source, provider string) ([]outputdto.InputDTO, error)</li> <li>func (c *Client) ListInputsByStatusAndSourceAndProvider(status int, source, provider string) ([]outputdto.InputDTO, error)</li> <li>func (c *Client) UpdateInput(id string, inputInput inputdto.InputDTO) (outputdto.InputDTO, error)</li> <li>func (c *Client) UpdateInputStatus(id string, status shareddto.StatusDTO) (outputdto.InputDTO, error)</li> </ul>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#type-client","title":"type Client","text":"<p>Client represents the input broker client.</p> <pre><code>type Client struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient() *Client\n</code></pre> <p>NewClient initializes a new input broker client.</p> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-createinput","title":"func (*Client) CreateInput","text":"<pre><code>func (c *Client) CreateInput(inputInput inputdto.InputDTO) (outputdto.InputDTO, error)\n</code></pre> <p>CreateInput sends a request to create a new input.</p> <p>Parameters:</p> <ul> <li>inputInput: The input data transfer object.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.InputDTO: The created input data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-deleteinput","title":"func (*Client) DeleteInput","text":"<pre><code>func (c *Client) DeleteInput(id string) error\n</code></pre> <p>DeleteInput sends a request to delete an input by ID.</p> <p>Parameters:</p> <ul> <li>id: The input ID.</li> </ul> <p>Returns:</p> <ul> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-getinputbyid","title":"func (*Client) GetInputByID","text":"<pre><code>func (c *Client) GetInputByID(id string) (outputdto.InputDTO, error)\n</code></pre> <p>GetInputByID sends a request to retrieve an input by ID.</p> <p>Parameters:</p> <ul> <li>id: The input ID.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.InputDTO: The input data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-listallinputs","title":"func (*Client) ListAllInputs","text":"<pre><code>func (c *Client) ListAllInputs() ([]outputdto.InputDTO, error)\n</code></pre> <p>ListAllInputs sends a request to retrieve all inputs.</p> <p>Returns:</p> <ul> <li>[]outputdto.InputDTO: A list of input data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-listinputsbyserviceandprovider","title":"func (*Client) ListInputsByServiceAndProvider","text":"<pre><code>func (c *Client) ListInputsByServiceAndProvider(service, provider string) ([]outputdto.InputDTO, error)\n</code></pre> <p>ListInputsByServiceAndProvider sends a request to retrieve inputs by service and provider.</p> <p>Parameters:</p> <ul> <li>service: The service name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.InputDTO: A list of input data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-listinputsbyserviceandsourceandprovider","title":"func (*Client) ListInputsByServiceAndSourceAndProvider","text":"<pre><code>func (c *Client) ListInputsByServiceAndSourceAndProvider(service, source, provider string) ([]outputdto.InputDTO, error)\n</code></pre> <p>ListInputsByServiceAndSourceAndProvider sends a request to retrieve inputs by service, source, and provider.</p> <p>Parameters:</p> <ul> <li>service: The service name.</li> <li>source: The source name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.InputDTO: A list of input data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-listinputsbysourceandprovider","title":"func (*Client) ListInputsBySourceAndProvider","text":"<pre><code>func (c *Client) ListInputsBySourceAndProvider(source, provider string) ([]outputdto.InputDTO, error)\n</code></pre> <p>ListInputsBySourceAndProvider sends a request to retrieve inputs by source and provider.</p> <p>Parameters:</p> <ul> <li>source: The source name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.InputDTO: A list of input data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-listinputsbystatusandprovider","title":"func (*Client) ListInputsByStatusAndProvider","text":"<pre><code>func (c *Client) ListInputsByStatusAndProvider(status int, provider string) ([]outputdto.InputDTO, error)\n</code></pre> <p>ListInputsByStatusAndProvider sends a request to retrieve inputs by status and provider.</p> <p>Parameters:</p> <ul> <li>status: The status code.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.InputDTO: A list of input data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-listinputsbystatusandserviceandprovider","title":"func (*Client) ListInputsByStatusAndServiceAndProvider","text":"<pre><code>func (c *Client) ListInputsByStatusAndServiceAndProvider(status int, service, provider string) ([]outputdto.InputDTO, error)\n</code></pre> <p>ListInputsByStatusAndServiceAndProvider sends a request to retrieve inputs by status, service, and provider.</p> <p>Parameters:</p> <ul> <li>status: The status code.</li> <li>service: The service name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.InputDTO: A list of input data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-listinputsbystatusandserviceandsourceandprovider","title":"func (*Client) ListInputsByStatusAndServiceAndSourceAndProvider","text":"<pre><code>func (c *Client) ListInputsByStatusAndServiceAndSourceAndProvider(status int, service, source, provider string) ([]outputdto.InputDTO, error)\n</code></pre> <p>ListInputsByStatusAndServiceAndSourceAndProvider sends a request to retrieve inputs by status, service, source, and provider.</p> <p>Parameters:</p> <ul> <li>status: The status code.</li> <li>service: The service name.</li> <li>source: The source name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.InputDTO: A list of input data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-listinputsbystatusandsourceandprovider","title":"func (*Client) ListInputsByStatusAndSourceAndProvider","text":"<pre><code>func (c *Client) ListInputsByStatusAndSourceAndProvider(status int, source, provider string) ([]outputdto.InputDTO, error)\n</code></pre> <p>ListInputsByStatusAndSourceAndProvider sends a request to retrieve inputs by status, source, and provider.</p> <p>Parameters:</p> <ul> <li>status: The status code.</li> <li>source: The source name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.InputDTO: A list of input data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-updateinput","title":"func (*Client) UpdateInput","text":"<pre><code>func (c *Client) UpdateInput(id string, inputInput inputdto.InputDTO) (outputdto.InputDTO, error)\n</code></pre> <p>UpdateInput sends a request to update an existing input.</p> <p>Parameters:</p> <ul> <li>id: The input ID.</li> <li>inputInput: The input data transfer object.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.InputDTO: The updated input data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/input-broker/docs/godoc/#func-client-updateinputstatus","title":"func (*Client) UpdateInputStatus","text":"<pre><code>func (c *Client) UpdateInputStatus(id string, status shareddto.StatusDTO) (outputdto.InputDTO, error)\n</code></pre> <p>UpdateInputStatus sends a request to update the status of an existing input.</p> <p>Parameters:</p> <ul> <li>id: The input ID.</li> <li>status: The status data transfer object.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.InputDTO: The updated input data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/clients/apis/output-vault/","title":"output-vault/client","text":"<p><code>output-vault/client</code> is a Go library that provides a client for interacting with the output vault API. This library includes functionalities for creating, reading, updating, and deleting output entities via HTTP requests.</p>"},{"location":"reference/libs/golang/clients/apis/output-vault/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete output entities via HTTP requests.</li> <li>List outputs based on various attributes such as service, provider, source, and dependencies.</li> <li>Handles request creation, sending, and response processing.</li> </ul>"},{"location":"reference/libs/golang/clients/apis/output-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/clients/apis/output-vault/#creating-a-client","title":"Creating a Client","text":"<p>The <code>Client</code> struct provides methods to interact with the output vault API.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"fmt\"\n    \"output-vault/client\"\n    inputdto \"libs/golang/ddd/dtos/output-vault/input\"\n)\n\nfunc main() {\n    cli := client.NewClient()\n\n    // Create a new output\n    outputInput := inputdto.OutputDTO{\n        Data:      map[string]interface{}{\"key\": \"value\"},\n        Service:   \"example-service\",\n        Source:    \"example-source\",\n        Provider:  \"example-provider\",\n        Metadata:  inputdto.MetadataDTO{},\n    }\n\n    outputOutput, err := cli.CreateOutput(outputInput)\n    if err != nil {\n        log.Fatalf(\"Failed to create output: %v\", err)\n    }\n    fmt.Printf(\"Created output: %+v\\n\", outputOutput)\n\n    // Other client methods can be used similarly...\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#client-methods","title":"Client Methods","text":""},{"location":"reference/libs/golang/clients/apis/output-vault/#createoutput","title":"CreateOutput","text":"<p>Creates a new output.</p> <pre><code>func (c *Client) CreateOutput(outputInput inputdto.OutputDTO) (outputdto.OutputDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#updateoutput","title":"UpdateOutput","text":"<p>Updates an existing output.</p> <pre><code>func (c *Client) UpdateOutput(outputInput inputdto.OutputDTO) (outputdto.OutputDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#listalloutputs","title":"ListAllOutputs","text":"<p>Lists all outputs.</p> <pre><code>func (c *Client) ListAllOutputs() ([]outputdto.OutputDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#listoutputbyid","title":"ListOutputByID","text":"<p>Gets an output by its ID.</p> <pre><code>func (c *Client) ListOutputByID(id string) (outputdto.OutputDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#deleteoutput","title":"DeleteOutput","text":"<p>Deletes an output by its ID.</p> <pre><code>func (c *Client) DeleteOutput(id string) error\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#listoutputsbyserviceandprovider","title":"ListOutputsByServiceAndProvider","text":"<p>Lists outputs by service and provider.</p> <pre><code>func (c *Client) ListOutputsByServiceAndProvider(service, provider string) ([]outputdto.OutputDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#listoutputsbysourceandprovider","title":"ListOutputsBySourceAndProvider","text":"<p>Lists outputs by source and provider.</p> <pre><code>func (c *Client) ListOutputsBySourceAndProvider(source, provider string) ([]outputdto.OutputDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#listoutputsbyserviceandsourceandprovider","title":"ListOutputsByServiceAndSourceAndProvider","text":"<p>Lists outputs by service, source, and provider.</p> <pre><code>func (c *Client) ListOutputsByServiceAndSourceAndProvider(service, source, provider string) ([]outputdto.OutputDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>client</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-clients-apis-output-vault-client\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/#error-handling","title":"Error Handling","text":"<p>The client methods include error handling for various scenarios, such as:</p> <ul> <li>Invalid request body</li> <li>Request timeout</li> <li>Internal server errors during API interaction</li> </ul> <p>These errors are handled and returned as appropriate Go errors.</p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#client","title":"client","text":"<pre><code>import \"libs/golang/clients/apis/output-vault/client\"\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type Client</li> <li>func NewClient() *Client</li> <li>func (c *Client) CreateOutput(outputInput inputdto.OutputDTO) (outputdto.OutputDTO, error)</li> <li>func (c *Client) DeleteOutput(id string) error</li> <li>func (c *Client) ListAllOutputs() ([]outputdto.OutputDTO, error)</li> <li>func (c *Client) ListOutputByID(id string) (outputdto.OutputDTO, error)</li> <li>func (c *Client) ListOutputsByServiceAndProvider(service, provider string) ([]outputdto.OutputDTO, error)</li> <li>func (c *Client) ListOutputsByServiceAndSourceAndProvider(service, source, provider string) ([]outputdto.OutputDTO, error)</li> <li>func (c *Client) ListOutputsBySourceAndProvider(source, provider string) ([]outputdto.OutputDTO, error)</li> <li>func (c *Client) UpdateOutput(outputInput inputdto.OutputDTO) (outputdto.OutputDTO, error)</li> </ul>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#type-client","title":"type Client","text":"<p>Client represents the output vault client.</p> <pre><code>type Client struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient() *Client\n</code></pre> <p>NewClient initializes a new output vault client.</p> <p></p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#func-client-createoutput","title":"func (*Client) CreateOutput","text":"<pre><code>func (c *Client) CreateOutput(outputInput inputdto.OutputDTO) (outputdto.OutputDTO, error)\n</code></pre> <p>CreateOutput sends a request to create a new output.</p> <p>Parameters:</p> <ul> <li>outputInput: The output data transfer object.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.OutputDTO: The created output data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#func-client-deleteoutput","title":"func (*Client) DeleteOutput","text":"<pre><code>func (c *Client) DeleteOutput(id string) error\n</code></pre> <p>DeleteOutput sends a request to delete an output by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the output.</li> </ul> <p>Returns:</p> <ul> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#func-client-listalloutputs","title":"func (*Client) ListAllOutputs","text":"<pre><code>func (c *Client) ListAllOutputs() ([]outputdto.OutputDTO, error)\n</code></pre> <p>ListAllOutputs sends a request to retrieve all outputs.</p> <p>Returns:</p> <ul> <li>[]outputdto.OutputDTO: A slice of output data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#func-client-listoutputbyid","title":"func (*Client) ListOutputByID","text":"<pre><code>func (c *Client) ListOutputByID(id string) (outputdto.OutputDTO, error)\n</code></pre> <p>ListOutputByID sends a request to retrieve an output by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the output.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.OutputDTO: The output data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#func-client-listoutputsbyserviceandprovider","title":"func (*Client) ListOutputsByServiceAndProvider","text":"<pre><code>func (c *Client) ListOutputsByServiceAndProvider(service, provider string) ([]outputdto.OutputDTO, error)\n</code></pre> <p>ListOutputsByServiceAndProvider sends a request to retrieve outputs by service and provider.</p> <p>Parameters:</p> <ul> <li>service: The service name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.OutputDTO: A slice of output data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#func-client-listoutputsbyserviceandsourceandprovider","title":"func (*Client) ListOutputsByServiceAndSourceAndProvider","text":"<pre><code>func (c *Client) ListOutputsByServiceAndSourceAndProvider(service, source, provider string) ([]outputdto.OutputDTO, error)\n</code></pre> <p>ListOutputsByServiceAndSourceAndProvider sends a request to retrieve outputs by service, source, and provider.</p> <p>Parameters:</p> <ul> <li>service: The service name.</li> <li>source: The source name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.OutputDTO: A slice of output data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#func-client-listoutputsbysourceandprovider","title":"func (*Client) ListOutputsBySourceAndProvider","text":"<pre><code>func (c *Client) ListOutputsBySourceAndProvider(source, provider string) ([]outputdto.OutputDTO, error)\n</code></pre> <p>ListOutputsBySourceAndProvider sends a request to retrieve outputs by source and provider.</p> <p>Parameters:</p> <ul> <li>source: The source name.</li> <li>provider: The provider name.</li> </ul> <p>Returns:</p> <ul> <li>[]outputdto.OutputDTO: A slice of output data transfer objects.</li> <li>error: An error if the request fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/apis/output-vault/docs/godoc/#func-client-updateoutput","title":"func (*Client) UpdateOutput","text":"<pre><code>func (c *Client) UpdateOutput(outputInput inputdto.OutputDTO) (outputdto.OutputDTO, error)\n</code></pre> <p>UpdateOutput sends a request to update an existing output.</p> <p>Parameters:</p> <ul> <li>outputInput: The output data transfer object.</li> </ul> <p>Returns:</p> <ul> <li>outputdto.OutputDTO: The updated output data transfer object.</li> <li>error: An error if the request fails.</li> </ul> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/clients/apis/schema-vault/","title":"schema-vault/client","text":"<p><code>schema-vault/client</code> is a Go library that provides a client for interacting with the schema vault API. This library includes functionalities for creating, reading, updating, and deleting schema entities via HTTP requests.</p>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete schema entities via HTTP requests.</li> <li>List schemas based on various attributes such as service, provider, source, and dependencies.</li> <li>Handles request creation, sending, and response processing.</li> </ul>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/clients/apis/schema-vault/#creating-a-client","title":"Creating a Client","text":"<p>The <code>Client</code> struct provides methods to interact with the schema vault API.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"fmt\"\n    \"schema-vault/client\"\n    inputdto \"libs/golang/ddd/dtos/schema-vault/input\"\n)\n\nfunc main() {\n    cli := client.NewClient()\n\n    // Create a new schema\n    schemaInput := inputdto.SchemaDTO{\n        Service:    \"example-service\",\n        Source:     \"example-source\",\n        Provider:   \"example-provider\",\n        SchemaType: \"example-type\",\n        JsonSchema: inputdto.JsonSchemaDTO{},\n    }\n\n    schemaOutput, err := cli.CreateSchema(schemaInput)\n    if err != nil {\n        log.Fatalf(\"Failed to create schema: %v\", err)\n    }\n    fmt.Printf(\"Created schema: %+v\\n\", schemaOutput)\n\n    // Other client methods can be used similarly...\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#client-methods","title":"Client Methods","text":""},{"location":"reference/libs/golang/clients/apis/schema-vault/#createschema","title":"CreateSchema","text":"<p>Creates a new schema.</p> <pre><code>func (c *Client) CreateSchema(schemaInput inputdto.SchemaDTO) (outputdto.SchemaDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#updateschema","title":"UpdateSchema","text":"<p>Updates an existing schema.</p> <pre><code>func (c *Client) UpdateSchema(schemaInput inputdto.SchemaDTO) (outputdto.SchemaDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#listallschemas","title":"ListAllSchemas","text":"<p>Lists all schemas.</p> <pre><code>func (c *Client) ListAllSchemas() ([]outputdto.SchemaDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#listschemabyid","title":"ListSchemaByID","text":"<p>Gets a schema by its ID.</p> <pre><code>func (c *Client) ListSchemaByID(id string) (outputdto.SchemaDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#deleteschema","title":"DeleteSchema","text":"<p>Deletes a schema by its ID.</p> <pre><code>func (c *Client) DeleteSchema(id string) error\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#listschemasbyserviceandprovider","title":"ListSchemasByServiceAndProvider","text":"<p>Lists schemas by service and provider.</p> <pre><code>func (c *Client) ListSchemasByServiceAndProvider(service, provider string) ([]outputdto.SchemaDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#listschemasbysourceandprovider","title":"ListSchemasBySourceAndProvider","text":"<p>Lists schemas by source and provider.</p> <pre><code>func (c *Client) ListSchemasBySourceAndProvider(source, provider string) ([]outputdto.SchemaDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#listschemasbyserviceandsourceandprovider","title":"ListSchemasByServiceAndSourceAndProvider","text":"<p>Lists schemas by service, source, and provider.</p> <pre><code>func (c *Client) ListSchemasByServiceAndSourceAndProvider(service, source, provider string) ([]outputdto.SchemaDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>client</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-clients-apis-schema-vault-client\n</code></pre>"},{"location":"reference/libs/golang/clients/apis/schema-vault/#error-handling","title":"Error Handling","text":"<p>The client methods include error handling for various scenarios, such as:</p> <ul> <li>Invalid request body</li> <li>Request timeout</li> <li>Internal server errors during API interaction</li> </ul> <p>These errors are handled and returned as appropriate Go errors.</p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/","title":"go-docdb/client","text":"<p><code>go-docdb</code> is a Go library that provides a client wrapper for interacting with an in-memory document-based database. This library facilitates creating and managing collections and documents within the database.</p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/#features","title":"Features","text":"<ul> <li>Create and drop collections</li> <li>Insert, find, update, and delete documents</li> <li>List all collections</li> <li>Convert maps to documents with required fields</li> </ul>"},{"location":"reference/libs/golang/clients/resources/go-docdb/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/clients/resources/go-docdb/#creating-a-client","title":"Creating a Client","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/clients/resources/go-docdb/client\"\n)\n\nfunc main() {\n    // Create a new in-memory document database\n    db := database.NewInMemoryDocBD(\"MyDatabase\")\n\n    // Create a new client\n    c := client.NewClient(db)\n\n    fmt.Println(\"Client created successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-docdb/#creating-a-collection","title":"Creating a Collection","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/clients/resources/go-docdb/client\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"MyDatabase\")\n    c := client.NewClient(db)\n\n    err := c.CreateCollection(\"MyCollection\")\n    if err != nil {\n        log.Fatalf(\"Failed to create collection: %v\", err)\n    }\n\n    fmt.Println(\"Collection created successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-docdb/#inserting-a-document","title":"Inserting a Document","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/clients/resources/go-docdb/client\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"MyDatabase\")\n    c := client.NewClient(db)\n\n    document := map[string]interface{}{\n        \"_id\": \"123\",\n        \"name\": \"John Doe\",\n        \"age\": 30,\n    }\n\n    err := c.InsertOne(\"MyCollection\", document)\n    if err != nil {\n        log.Fatalf(\"Failed to insert document: %v\", err)\n    }\n\n    fmt.Println(\"Document inserted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-docdb/#finding-a-document-by-id","title":"Finding a Document by ID","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/clients/resources/go-docdb/client\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"MyDatabase\")\n    c := client.NewClient(db)\n\n    doc, err := c.FindOne(\"MyCollection\", \"123\")\n    if err != nil {\n        log.Fatalf(\"Failed to find document: %v\", err)\n    }\n\n    fmt.Printf(\"Found document: %v\\n\", doc)\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-docdb/#updating-a-document","title":"Updating a Document","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/clients/resources/go-docdb/client\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"MyDatabase\")\n    c := client.NewClient(db)\n\n    update := map[string]interface{}{\n        \"age\": 31,\n    }\n\n    err := c.UpdateOne(\"MyCollection\", \"123\", update)\n    if err != nil {\n        log.Fatalf(\"Failed to update document: %v\", err)\n    }\n\n    fmt.Println(\"Document updated successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-docdb/#deleting-a-document","title":"Deleting a Document","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/clients/resources/go-docdb/client\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"MyDatabase\")\n    c := client.NewClient(db)\n\n    err := c.DeleteOne(\"MyCollection\", \"123\")\n    if err != nil {\n        log.Fatalf(\"Failed to delete document: %v\", err)\n    }\n\n    fmt.Println(\"Document deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-docdb/#listing-all-collections","title":"Listing All Collections","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/clients/resources/go-docdb/client\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"MyDatabase\")\n    c := client.NewClient(db)\n\n    collections := c.ListCollections()\n    for _, name := range collections {\n        fmt.Println(name)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-docdb/#testing","title":"Testing","text":"<p>To run the tests for the <code>client</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-clients-resources-go-docdb\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#client","title":"client","text":"<pre><code>import \"libs/golang/clients/resources/go-docdb/client\"\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#index","title":"Index","text":"<ul> <li>type Client</li> <li>func NewClient(db *database.InMemoryDocBD) *Client</li> <li>func (c *Client) ConvertToDocument(document map[string]interface{}) (database.Document, error)</li> <li>func (c *Client) CreateCollection(collectionName string) error</li> <li>func (c *Client) DeleteAll(collectionName string) error</li> <li>func (c *Client) DeleteOne(collectionName string, id string) error</li> <li>func (c *Client) DropCollection(collectionName string) error</li> <li>func (c *Client) Find(collectionName string, filter map[string]interface{}) ([]map[string]interface{}, error)</li> <li>func (c *Client) FindAll(collectionName string) ([]map[string]interface{}, error)</li> <li>func (c *Client) FindOne(collectionName string, id string) (map[string]interface{}, error)</li> <li>func (c *Client) InsertOne(collectionName string, document map[string]interface{}) error</li> <li>func (c *Client) ListCollections() []string</li> <li>func (c *Client) UpdateOne(collectionName string, id string, update map[string]interface{}) error</li> </ul>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#type-client","title":"type Client","text":"<p>Client provides a higher-level interface for interacting with the in-memory document-based database. It wraps around the InMemoryDocBD instance to perform various database operations.</p> <pre><code>type Client struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient(db *database.InMemoryDocBD) *Client\n</code></pre> <p>NewClient creates a new Client instance.</p> <p>Parameters:</p> <ul> <li>db: A pointer to an InMemoryDocBD instance.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the newly created Client instance.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-converttodocument","title":"func (*Client) ConvertToDocument","text":"<pre><code>func (c *Client) ConvertToDocument(document map[string]interface{}) (database.Document, error)\n</code></pre> <p>ConvertToDocument converts a map into a Document type.</p> <p>Parameters:</p> <ul> <li>document: The map to convert.</li> </ul> <p>Returns:</p> <ul> <li>The converted Document.</li> <li>An error if the document is nil or does not contain an \"_id\" field.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-createcollection","title":"func (*Client) CreateCollection","text":"<pre><code>func (c *Client) CreateCollection(collectionName string) error\n</code></pre> <p>CreateCollection creates a new collection with the specified name.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to create.</li> </ul> <p>Returns:</p> <ul> <li>An error if the collection already exists.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-deleteall","title":"func (*Client) DeleteAll","text":"<pre><code>func (c *Client) DeleteAll(collectionName string) error\n</code></pre> <p>DeleteAll deletes all documents from the specified collection.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to delete all documents from.</li> </ul> <p>Returns:</p> <ul> <li>An error if the collection does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-deleteone","title":"func (*Client) DeleteOne","text":"<pre><code>func (c *Client) DeleteOne(collectionName string, id string) error\n</code></pre> <p>DeleteOne deletes a document by its ID from the specified collection.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to delete the document from.</li> <li>id: The ID of the document to delete.</li> </ul> <p>Returns:</p> <ul> <li>An error if the collection or document does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-dropcollection","title":"func (*Client) DropCollection","text":"<pre><code>func (c *Client) DropCollection(collectionName string) error\n</code></pre> <p>DropCollection removes a collection by its name.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to remove.</li> </ul> <p>Returns:</p> <ul> <li>An error if the collection does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-find","title":"func (*Client) Find","text":"<pre><code>func (c *Client) Find(collectionName string, filter map[string]interface{}) ([]map[string]interface{}, error)\n</code></pre> <p>Find searches for documents matching a given query in the specified collection.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to search.</li> <li>filter: The query criteria to match documents against.</li> </ul> <p>Returns:</p> <ul> <li>A slice of documents that match the query.</li> <li>An error if the collection does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-findall","title":"func (*Client) FindAll","text":"<pre><code>func (c *Client) FindAll(collectionName string) ([]map[string]interface{}, error)\n</code></pre> <p>FindAll retrieves all documents from the specified collection.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to search.</li> </ul> <p>Returns:</p> <ul> <li>A slice of documents if found.</li> <li>An error if the collection does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-findone","title":"func (*Client) FindOne","text":"<pre><code>func (c *Client) FindOne(collectionName string, id string) (map[string]interface{}, error)\n</code></pre> <p>FindOne retrieves a document by its ID from the specified collection.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to search.</li> <li>id: The ID of the document to retrieve.</li> </ul> <p>Returns:</p> <ul> <li>The document if found.</li> <li>An error if the collection or document does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-insertone","title":"func (*Client) InsertOne","text":"<pre><code>func (c *Client) InsertOne(collectionName string, document map[string]interface{}) error\n</code></pre> <p>InsertOne inserts a new document into the specified collection.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to insert the document into.</li> <li>document: The document to insert.</li> </ul> <p>Returns:</p> <ul> <li>An error if the collection does not exist or if the document is invalid.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-listcollections","title":"func (*Client) ListCollections","text":"<pre><code>func (c *Client) ListCollections() []string\n</code></pre> <p>ListCollections returns a list of all collection names.</p> <p>Returns:</p> <ul> <li>A slice of strings containing the names of all collections.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-docdb/docs/godoc/#func-client-updateone","title":"func (*Client) UpdateOne","text":"<pre><code>func (c *Client) UpdateOne(collectionName string, id string, update map[string]interface{}) error\n</code></pre> <p>UpdateOne updates a document by its ID in the specified collection.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to update the document in.</li> <li>id: The ID of the document to update.</li> <li>update: The document fields to update.</li> </ul> <p>Returns:</p> <ul> <li>An error if the collection or document does not exist, or if the update is empty.</li> </ul> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/clients/resources/go-minio/","title":"go-minio","text":"<p><code>go-minio</code> is a Go library that provides a convenient interface for interacting with Minio, an object storage server compatible with Amazon S3 cloud storage service. This library wraps the Minio client to offer additional functionality and simplifies operations such as uploading, downloading, and managing objects in Minio.</p>"},{"location":"reference/libs/golang/clients/resources/go-minio/#features","title":"Features","text":"<ul> <li>Create a new Minio client with configuration options.</li> <li>Upload files to a Minio bucket.</li> <li>Upload files in chunks to handle large files.</li> <li>Download files from a Minio bucket.</li> <li>Remove objects from a Minio bucket.</li> <li>Remove all objects from a Minio bucket.</li> </ul>"},{"location":"reference/libs/golang/clients/resources/go-minio/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/clients/resources/go-minio/#creating-a-client","title":"Creating a Client","text":"<pre><code>package main\n\nimport (\n    \"log\"\n    \"libs/golang/clients/resources/go-minio/client\"\n)\n\nfunc main() {\n    config := gominio.Config{\n        Endpoint:  \"localhost:9000\",\n        AccessKey: \"minioaccesskey\",\n        SecretKey: \"miniosecretkey\",\n        UseSSL:    false,\n    }\n    client, err := gominio.NewClient(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n    // Use the client...\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-minio/#uploading-a-file","title":"Uploading a File","text":"<pre><code>package main\n\nimport (\n    \"log\"\n    \"libs/golang/clients/resources/go-minio/client\"\n)\n\nfunc main() {\n    config := gominio.Config{\n        Endpoint:  \"localhost:9000\",\n        AccessKey: \"minioaccesskey\",\n        SecretKey: \"miniosecretkey\",\n        UseSSL:    false,\n    }\n    client, err := gominio.NewClient(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fileContent := []byte(\"Hello, Minio!\")\n    bucketName := \"example-bucket\"\n    fileName := \"hello.txt\"\n    uploadedPath, err := client.UploadFile(bucketName, fileName, fileContent)\n    if err != nil {\n        log.Fatal(err)\n    }\n    log.Println(\"File uploaded to:\", uploadedPath)\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-minio/#uploading-a-file-with-chunks","title":"Uploading a File with Chunks","text":"<pre><code>package main\n\nimport (\n    \"log\"\n    \"libs/golang/clients/resources/go-minio/client\"\n)\n\nfunc main() {\n    config := gominio.Config{\n        Endpoint:  \"localhost:9000\",\n        AccessKey: \"minioaccesskey\",\n        SecretKey: \"miniosecretkey\",\n        UseSSL:    false,\n    }\n    client, err := gominio.NewClient(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fileContent := make([]byte, 150*1024*1024) // 150MB\n    bucketName := \"example-bucket\"\n    fileName := \"largefile.txt\"\n    partSize := int64(50 * 1024 * 1024) // 50MB\n    uploadedPath, err := client.UploadFileWithChunks(bucketName, fileName, fileContent, partSize)\n    if err != nil {\n        log.Fatal(err)\n    }\n    log.Println(\"File uploaded in chunks to:\", uploadedPath)\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-minio/#downloading-a-file","title":"Downloading a File","text":"<pre><code>package main\n\nimport (\n    \"log\"\n    \"libs/golang/clients/resources/go-minio/client\"\n)\n\nfunc main() {\n    config := gominio.Config{\n        Endpoint:  \"localhost:9000\",\n        AccessKey: \"minioaccesskey\",\n        SecretKey: \"miniosecretkey\",\n        UseSSL:    false,\n    }\n    client, err := gominio.NewClient(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    uri := \"http://localhost:9000/example-bucket/hello.txt\"\n    content, err := client.DownloadFile(uri)\n    if err != nil {\n        log.Fatal(err)\n    }\n    log.Println(\"File content:\", string(content))\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-minio/#removing-an-object","title":"Removing an Object","text":"<pre><code>package main\n\nimport (\n    \"log\"\n    \"libs/golang/clients/resources/go-minio/client\"\n)\n\nfunc main() {\n    config := gominio.Config{\n        Endpoint:  \"localhost:9000\",\n        AccessKey: \"minioaccesskey\",\n        SecretKey: \"miniosecretkey\",\n        UseSSL:    false,\n    }\n    client, err := gominio.NewClient(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    bucketName := \"example-bucket\"\n    objectName := \"hello.txt\"\n    err = client.RemoveObject(bucketName, objectName)\n    if err != nil {\n        log.Fatal(err)\n    }\n    log.Println(\"Object removed:\", objectName)\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-minio/#removing-all-objects-from-a-bucket","title":"Removing All Objects from a Bucket","text":"<pre><code>package main\n\nimport (\n    \"log\"\n    \"libs/golang/clients/resources/go-minio/client\"\n)\n\nfunc main() {\n    config := gominio.Config{\n        Endpoint:  \"localhost:9000\",\n        AccessKey: \"minioaccesskey\",\n        SecretKey: \"miniosecretkey\",\n        UseSSL:    false,\n    }\n    client, err := gominio.NewClient(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    bucketName := \"example-bucket\"\n    err = client.RemoveAllObjectsFromBucket(bucketName)\n    if err != nil {\n        log.Fatal(err)\n    }\n    log.Println(\"All objects removed from bucket:\", bucketName)\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-minio/#testing","title":"Testing","text":"<p>To run the tests for the <code>gominio</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-clients-resources-go-minio\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#gominio","title":"gominio","text":"<pre><code>import \"libs/golang/clients/resources/go-minio/client\"\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#index","title":"Index","text":"<ul> <li>type Client</li> <li>func NewClient(config Config) (*Client, error)</li> <li>func (c *Client) DownloadFile(uri string) ([]byte, error)</li> <li>func (c *Client) GetObject(bucketName, fileName string) ([]byte, error)</li> <li>func (c *Client) RemoveAllObjectsFromBucket(bucketName string) error</li> <li>func (c *Client) RemoveObject(bucketName, objectName string) error</li> <li>func (c *Client) UploadFile(bucketName, fileName string, fileContent []byte) (string, error)</li> <li>func (c *Client) UploadFileWithChunks(bucketName, fileName string, fileContent []byte, partSize int64) (string, error)</li> <li>type Config</li> </ul>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#type-client","title":"type Client","text":"<p>Client wraps the Minio client to provide additional functionality.</p> <pre><code>type Client struct {\n    *minio.Client\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient(config Config) (*Client, error)\n</code></pre> <p>NewClient creates a new Minio client with the given configuration. It returns the Client and an error if any occurred during connection.</p> <p>Example:</p> <pre><code>config := Config{\n     Port:      \"9000\",\n     Host:      \"localhost\",\n        AccessKey: \"minioaccesskey\",\n        SecretKey: \"miniosecretkey\",\n        UseSSL:    false,\n    }\n    client, err := NewClient(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#func-client-downloadfile","title":"func (*Client) DownloadFile","text":"<pre><code>func (c *Client) DownloadFile(uri string) ([]byte, error)\n</code></pre> <p>DownloadFile downloads a file from the specified URI and returns its content as a byte slice.</p> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#func-client-getobject","title":"func (*Client) GetObject","text":"<pre><code>func (c *Client) GetObject(bucketName, fileName string) ([]byte, error)\n</code></pre> <p>GetObject retrieves an object from the specified bucket and returns its content as a byte slice.</p> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#func-client-removeallobjectsfrombucket","title":"func (*Client) RemoveAllObjectsFromBucket","text":"<pre><code>func (c *Client) RemoveAllObjectsFromBucket(bucketName string) error\n</code></pre> <p>RemoveAllObjectsFromBucket removes all objects from the specified bucket.</p> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#func-client-removeobject","title":"func (*Client) RemoveObject","text":"<pre><code>func (c *Client) RemoveObject(bucketName, objectName string) error\n</code></pre> <p>RemoveObject removes an object from the specified bucket.</p> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#func-client-uploadfile","title":"func (*Client) UploadFile","text":"<pre><code>func (c *Client) UploadFile(bucketName, fileName string, fileContent []byte) (string, error)\n</code></pre> <p>UploadFile uploads a file to the specified bucket and returns the path to the uploaded file.</p> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#func-client-uploadfilewithchunks","title":"func (*Client) UploadFileWithChunks","text":"<pre><code>func (c *Client) UploadFileWithChunks(bucketName, fileName string, fileContent []byte, partSize int64) (string, error)\n</code></pre> <p>UploadFileWithChunks uploads a file in chunks of a specified size to the specified bucket and returns the path to the uploaded parts.</p> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-minio/docs/godoc/#type-config","title":"type Config","text":"<p>Config holds the configuration for connecting to a Minio instance.</p> <pre><code>type Config struct {\n    Port      string // Minio server port\n    Host      string // Minio server host\n    AccessKey string // Access key for authentication\n    SecretKey string // Secret key for authentication\n    UseSSL    bool   // Use SSL connection\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/clients/resources/go-mongo/","title":"go-mongo","text":"<p><code>go-mongo</code> is a Go library that provides a MongoDB client wrapper with utilities for connecting to and interacting with a MongoDB database. This library facilitates creating a connection to a MongoDB instance, pinging the server, and disconnecting from it.</p>"},{"location":"reference/libs/golang/clients/resources/go-mongo/#features","title":"Features","text":"<ul> <li>Connect to a MongoDB instance using configuration parameters</li> <li>Ping the MongoDB server to check the connection</li> <li>Disconnect from the MongoDB instance</li> </ul>"},{"location":"reference/libs/golang/clients/resources/go-mongo/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/clients/resources/go-mongo/#creating-a-mongodb-client","title":"Creating a MongoDB Client","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"libs/golang/clients/resources/go-mongo/client\"\n)\n\nfunc main() {\n    config := mongo.Config{\n        User:     \"testuser\",\n        Password: \"testpassword\",\n        Host:     \"localhost\",\n        Port:     \"27017\",\n        DBName:   \"testdb\",\n    }\n\n    client, err := mongo.NewClient(config)\n    if err != nil {\n        log.Fatalf(\"Failed to create MongoDB client: %v\", err)\n    }\n\n    defer client.Disconnect(context.Background())\n\n    fmt.Println(\"Connected to MongoDB\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-mongo/#pinging-the-mongodb-server","title":"Pinging the MongoDB Server","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"libs/golang/clients/resources/go-mongo/client\"\n)\n\nfunc main() {\n    config := mongo.Config{\n        User:     \"testuser\",\n        Password: \"testpassword\",\n        Host:     \"localhost\",\n        Port:     \"27017\",\n        DBName:   \"testdb\",\n    }\n\n    client, err := mongo.NewClient(config)\n    if err != nil {\n        log.Fatalf(\"Failed to create MongoDB client: %v\", err)\n    }\n\n    defer client.Disconnect(context.Background())\n\n    err = client.Ping(context.Background(), nil)\n    if err != nil {\n        log.Fatalf(\"Failed to ping MongoDB: %v\", err)\n    }\n\n    fmt.Println(\"MongoDB server is reachable\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-mongo/#disconnecting-from-mongodb","title":"Disconnecting from MongoDB","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"libs/golang/clients/resources/go-mongo/client\"\n)\n\nfunc main() {\n    config := mongo.Config{\n        User:     \"testuser\",\n        Password: \"testpassword\",\n        Host:     \"localhost\",\n        Port:     \"27017\",\n        DBName:   \"testdb\",\n    }\n\n    client, err := mongo.NewClient(config)\n    if err != nil {\n        log.Fatalf(\"Failed to create MongoDB client: %v\", err)\n    }\n\n    err = client.Disconnect(context.Background())\n    if err != nil {\n        log.Fatalf(\"Failed to disconnect from MongoDB: %v\", err)\n    }\n\n    fmt.Println(\"Disconnected from MongoDB\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-mongo/#testing","title":"Testing","text":"<p>To run the tests for the <code>go-mongo</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-clients-resources-go-mongo\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-mongo/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/clients/resources/go-mongo/docs/godoc/#gomongodb","title":"gomongodb","text":"<pre><code>import \"libs/golang/clients/resources/go-mongo/client\"\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-mongo/docs/godoc/#index","title":"Index","text":"<ul> <li>type Client</li> <li>func NewClient(config Config) (*Client, error)</li> <li>func (c *Client) Disconnect(ctx context.Context) error</li> <li>type Config</li> </ul>"},{"location":"reference/libs/golang/clients/resources/go-mongo/docs/godoc/#type-client","title":"type Client","text":"<p>Client is a wrapper around the mongo.Client.</p> <pre><code>type Client struct {\n    *mongo.Client\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-mongo/docs/godoc/#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient(config Config) (*Client, error)\n</code></pre> <p>NewClient creates a new MongoDB client with the given configuration. It returns the Client and an error if any occurred during connection.</p> <p>Example:</p> <pre><code>config := Config{\n    User:     \"testuser\",\n    Password: \"testpassword\",\n    Host:     \"localhost\",\n    Port:     \"27017\",\n    DBName:   \"testdb\",\n}\nclient, err := NewClient(config)\nif err != nil {\n    log.Fatal(err)\n}\ndefer client.Disconnect(context.Background())\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-mongo/docs/godoc/#func-client-disconnect","title":"func (*Client) Disconnect","text":"<pre><code>func (c *Client) Disconnect(ctx context.Context) error\n</code></pre> <p>Disconnect closes the connection to the MongoDB instance. It returns an error if any occurred during disconnection.</p> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-mongo/docs/godoc/#type-config","title":"type Config","text":"<p>Config holds the configuration for connecting to a MongoDB instance.</p> <pre><code>type Config struct {\n    User     string // Username for authentication\n    Password string // Password for authentication\n    Host     string // Host of the MongoDB instance\n    Port     string // Port of the MongoDB instance\n    DBName   string // Name of the database to connect to\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/","title":"Index","text":"<p>Here's the updated README file with improved docstrings and consistent formatting:</p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/#go-rabbitmq","title":"go-rabbitmq","text":"<p><code>go-rabbitmq</code> is a Go library that provides a RabbitMQ client wrapper with utilities for connecting to and interacting with a RabbitMQ server. This library facilitates creating a connection to a RabbitMQ instance, declaring exchanges and queues, binding queues, publishing messages, and consuming messages.</p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/#features","title":"Features","text":"<ul> <li>Connect to a RabbitMQ instance using configuration parameters</li> <li>Declare exchanges and queues</li> <li>Bind queues to exchanges</li> <li>Publish messages to exchanges</li> <li>Consume messages from queues</li> </ul>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/#creating-a-rabbitmq-client","title":"Creating a RabbitMQ Client","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/clients/resources/go-rabbitmq\"\n)\n\nfunc main() {\n    config := gorabbitmq.Config{\n        User:         \"guest\",\n        Password:     \"guest\",\n        Host:         \"localhost\",\n        Port:         \"5672\",\n        Protocol:     \"amqp\",\n        ExchangeName: \"my_exchange\",\n        ExchangeType: \"direct\",\n    }\n\n    client, err := gorabbitmq.NewClient(config)\n    if err != nil {\n        log.Fatalf(\"Failed to create RabbitMQ client: %v\", err)\n    }\n\n    defer client.Close()\n\n    fmt.Println(\"Connected to RabbitMQ\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/#publishing-a-message","title":"Publishing a Message","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"libs/golang/clients/resources/go-rabbitmq\"\n)\n\nfunc main() {\n    config := gorabbitmq.Config{\n        User:         \"guest\",\n        Password:     \"guest\",\n        Host:         \"localhost\",\n        Port:         \"5672\",\n        Protocol:     \"amqp\",\n        ExchangeName: \"my_exchange\",\n        ExchangeType: \"direct\",\n    }\n\n    client, err := gorabbitmq.NewClient(config)\n    if err != nil {\n        log.Fatalf(\"Failed to create RabbitMQ client: %v\", err)\n    }\n\n    defer client.Close()\n\n    ctx := context.Background()\n    message := []byte(\"Hello, RabbitMQ!\")\n    err = client.Publish(ctx, \"text/plain\", message, \"my_routing_key\")\n    if err != nil {\n        log.Fatalf(\"Failed to publish message: %v\", err)\n    }\n\n    fmt.Println(\"Message published\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/#sending-notifications","title":"Sending Notifications","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/clients/resources/go-rabbitmq\"\n)\n\nfunc main() {\n    config := gorabbitmq.Config{\n        User:         \"guest\",\n        Password:     \"guest\",\n        Host:         \"localhost\",\n        Port:         \"5672\",\n        Protocol:     \"amqp\",\n        ExchangeName: \"my_exchange\",\n        ExchangeType: \"direct\",\n    }\n\n    client, err := gorabbitmq.NewClient(config)\n    if err != nil {\n        log.Fatalf(\"Failed to create RabbitMQ client: %v\", err)\n    }\n\n    defer client.Close()\n\n    notifier := gorabbitmq.NewRabbitMQNotifier(client)\n    message := []byte(`{\"message\": \"Hello, World!\"}`)\n    err = notifier.Notify(message, \"my_routing_key\")\n    if err != nil {\n        log.Fatalf(\"Failed to send notification: %v\", err)\n    }\n\n    fmt.Println(\"Notification sent\")\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/#consuming-messages","title":"Consuming Messages","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"time\"\n    \"libs/golang/clients/resources/go-rabbitmq\"\n    \"github.com/rabbitmq/amqp091-go\"\n)\n\nfunc main() {\n    config := gorabbitmq.Config{\n        User:         \"guest\",\n        Password:     \"guest\",\n        Host:         \"localhost\",\n        Port:         \"5672\",\n        Protocol:     \"amqp\",\n        ExchangeName: \"my_exchange\",\n        ExchangeType: \"direct\",\n    }\n\n    consumerConfig := gorabbitmq.ConsumerConfig{\n        ConsumerName: \"consumer_name\",\n        AutoAck:      false,\n        Args:         nil,\n    }\n\n    queueName := \"test_queue\"\n    routingKey := \"test_key\"\n    msgCh := make(chan amqp.Delivery)\n\n    client, err := gorabbitmq.NewClient(config)\n    if err != nil {\n        log.Fatalf(\"Failed to create RabbitMQ client: %v\", err)\n    }\n\n    defer client.Close()\n\n    consumer := gorabbitmq.NewRabbitMQConsumer(client, consumerConfig)\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n\n    go consumer.Consume(ctx, msgCh, queueName, routingKey)\n\n    select {\n    case msg := &lt;-msgCh:\n        log.Printf(\"Received message: %s\", string(msg.Body))\n    case &lt;-ctx.Done():\n        log.Println(\"Did not receive message in time\")\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/#testing","title":"Testing","text":"<p>To run the tests for the <code>go-rabbitmq</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-clients-resources-go-rabbitmq\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#gorabbitmq","title":"gorabbitmq","text":"<pre><code>import \"libs/golang/clients/resources/go-rabbitmq/client\"\n</code></pre>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#index","title":"Index","text":"<ul> <li>type Client</li> <li>func NewClient(config Config) (*Client, error)</li> <li>func (c *Client) Close() error</li> <li>type Config</li> <li>type ConsumerConfig</li> <li>type RabbitMQConsumer</li> <li>func NewRabbitMQConsumer(rmqClient *Client, config ConsumerConfig) *RabbitMQConsumer</li> <li>func (c *RabbitMQConsumer) Consume(ctx context.Context, msgCh chan amqp.Delivery, queueName string, routingKey string)</li> <li>func (c *RabbitMQConsumer) Wait()</li> <li>type RabbitMQNotifier</li> <li>func NewRabbitMQNotifier(rmqClient *Client) *RabbitMQNotifier</li> <li>func (n *RabbitMQNotifier) Notify(message []byte, routingKey string) error</li> </ul>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#type-client","title":"type Client","text":"<p>Client represents a RabbitMQ client.</p> <pre><code>type Client struct {\n    Dsn          string           // Data Source Name for connecting to RabbitMQ\n    Conn         *amqp.Connection // RabbitMQ connection instance\n    Channel      *amqp.Channel    // RabbitMQ channel instance\n    ExchangeName string           // Name of the RabbitMQ exchange in use\n    ExchangeType string           // Type of the RabbitMQ exchange in use\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#func-newclient","title":"func NewClient","text":"<pre><code>func NewClient(config Config) (*Client, error)\n</code></pre> <p>NewClient creates a new RabbitMQ client with the given configuration.</p> <p>Parameters:</p> <ul> <li>config: The configuration for connecting to RabbitMQ.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the newly created Client.</li> <li>An error if the client could not be created.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#func-client-close","title":"func (*Client) Close","text":"<pre><code>func (c *Client) Close() error\n</code></pre> <p>Close closes the RabbitMQ client's channel and connection.</p> <p>Returns:</p> <ul> <li>An error if the channel or connection could not be closed.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#type-config","title":"type Config","text":"<p>Config holds the configuration for connecting to a RabbitMQ instance.</p> <pre><code>type Config struct {\n    User         string // Username for RabbitMQ authentication\n    Password     string // Password for RabbitMQ authentication\n    Host         string // Host address of the RabbitMQ server\n    Port         string // Port number of the RabbitMQ server\n    Protocol     string // Protocol to use for the connection (e.g., \"amqp\")\n    ExchangeName string // Name of the RabbitMQ exchange to use\n    ExchangeType string // Type of the RabbitMQ exchange (e.g., \"direct\", \"fanout\")\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#type-consumerconfig","title":"type ConsumerConfig","text":"<p>ConsumerConfig holds the configuration for the RabbitMQ consumer.</p> <pre><code>type ConsumerConfig struct {\n    ConsumerName string     // Name of the consumer\n    AutoAck      bool       // Automatic acknowledgment flag\n    Args         amqp.Table // Additional arguments for the queue declaration\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#type-rabbitmqconsumer","title":"type RabbitMQConsumer","text":"<p>RabbitMQConsumer represents a RabbitMQ consumer.</p> <pre><code>type RabbitMQConsumer struct {\n    ConsumerName string // Name of the consumer\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#func-newrabbitmqconsumer","title":"func NewRabbitMQConsumer","text":"<pre><code>func NewRabbitMQConsumer(rmqClient *Client, config ConsumerConfig) *RabbitMQConsumer\n</code></pre> <p>NewRabbitMQConsumer creates a new RabbitMQ consumer with the given configuration.</p> <p>Parameters:</p> <ul> <li>rmqClient: A pointer to a Client instance that is already connected to RabbitMQ.</li> <li>config: The configuration for the consumer.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the newly created RabbitMQConsumer.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#func-rabbitmqconsumer-consume","title":"func (*RabbitMQConsumer) Consume","text":"<pre><code>func (c *RabbitMQConsumer) Consume(ctx context.Context, msgCh chan amqp.Delivery, queueName string, routingKey string)\n</code></pre> <p>Consume starts consuming messages from the specified queue and sends them to the provided channel.</p> <p>Parameters:</p> <ul> <li>ctx: The context to use for the consumer.</li> <li>msgCh: A channel to send the consumed messages to.</li> <li>queueName: The name of the queue to consume messages from.</li> <li>routingKey: The routing key to use for binding the queue.</li> </ul> <p>This method will panic if the queue declaration, binding, or consumption fails.</p> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#func-rabbitmqconsumer-wait","title":"func (*RabbitMQConsumer) Wait","text":"<pre><code>func (c *RabbitMQConsumer) Wait()\n</code></pre> <p>Wait waits for all goroutines to finish.</p> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#type-rabbitmqnotifier","title":"type RabbitMQNotifier","text":"<p>RabbitMQNotifier is a struct that handles sending notifications through RabbitMQ.</p> <pre><code>type RabbitMQNotifier struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#func-newrabbitmqnotifier","title":"func NewRabbitMQNotifier","text":"<pre><code>func NewRabbitMQNotifier(rmqClient *Client) *RabbitMQNotifier\n</code></pre> <p>NewRabbitMQNotifier creates a new RabbitMQNotifier with the given RabbitMQ client.</p> <p>Parameters:</p> <ul> <li>rmqClient: A pointer to a Client instance that is already connected to RabbitMQ.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the newly created RabbitMQNotifier.</li> </ul> <p></p>"},{"location":"reference/libs/golang/clients/resources/go-rabbitmq/docs/godoc/#func-rabbitmqnotifier-notify","title":"func (*RabbitMQNotifier) Notify","text":"<pre><code>func (n *RabbitMQNotifier) Notify(message []byte, routingKey string) error\n</code></pre> <p>Notify sends a notification message to the RabbitMQ exchange using the specified routing key.</p> <p>Parameters:</p> <ul> <li>message: The message to be sent as a byte slice.</li> <li>routingKey: The routing key to be used for routing the message.</li> </ul> <p>Returns:</p> <ul> <li>An error if the message could not be published, or nil if the message was successfully published.</li> </ul> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/database/go-docdb/","title":"go-docdb","text":"<p><code>go-docdb</code> library provides an in-memory document-based database implementation in Go. It allows you to create, read, update, and delete collections and documents with thread-safe operations.</p>"},{"location":"reference/libs/golang/database/go-docdb/#features","title":"Features","text":"<ul> <li>Create and manage collections of documents.</li> <li>Insert, find, update, and delete documents.</li> <li>Supports querying documents based on specified criteria.</li> <li>Thread-safe operations using <code>sync.RWMutex</code>.</li> </ul>"},{"location":"reference/libs/golang/database/go-docdb/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/database/go-docdb/#create-a-new-in-memory-document-database","title":"Create a new in-memory document database","text":"<pre><code>import (\n    \"libs/golang/database/go-docdb/database\"\n)\n\ndb := database.NewInMemoryDocBD(\"MyDatabase\")\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/#create-a-new-collection","title":"Create a new collection","text":"<pre><code>err := db.CreateCollection(\"MyCollection\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/#insert-a-document-into-a-collection","title":"Insert a document into a collection","text":"<pre><code>collection, err := db.GetCollection(\"MyCollection\")\nif err != nil {\n    log.Fatal(err)\n}\n\ndocument := database.Document{\n    \"_id\": \"123\",\n    \"name\": \"John Doe\",\n    \"age\": 30,\n}\nerr = collection.InsertOne(document)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/#find-a-document-by-id","title":"Find a document by ID","text":"<pre><code>doc, err := collection.FindOne(\"123\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(doc)\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/#find-all-documents-in-a-collection","title":"Find all documents in a collection","text":"<pre><code>docs := collection.FindAll()\nfor _, doc := range docs {\n    fmt.Println(doc)\n}\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/#update-a-document","title":"Update a document","text":"<pre><code>update := database.Document{\n    \"age\": 31,\n}\nerr = collection.UpdateOne(\"123\", update)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/#delete-a-document","title":"Delete a document","text":"<pre><code>err = collection.DeleteOne(\"123\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/#list-all-collections","title":"List all collections","text":"<pre><code>collections := db.ListCollections()\nfor _, name := range collections {\n    fmt.Println(name)\n}\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/#delete-all-documents-in-a-collection","title":"Delete all documents in a collection","text":"<pre><code>err = collection.DeleteAll()\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/#documentation","title":"Documentation","text":""},{"location":"reference/libs/golang/database/go-docdb/#package-database","title":"Package <code>database</code>","text":""},{"location":"reference/libs/golang/database/go-docdb/#types","title":"Types","text":"<ul> <li><code>InMemoryDocBD</code>: Represents an in-memory document-based database.</li> <li><code>DocumentID</code>: Represents the ID of a document.</li> <li><code>Document</code>: Represents a document with key-value pairs.</li> <li><code>Collection</code>: Represents a collection of documents.</li> </ul>"},{"location":"reference/libs/golang/database/go-docdb/#functions-and-methods","title":"Functions and Methods","text":"<ul> <li><code>NewInMemoryDocBD(name string) *InMemoryDocBD</code>: Creates a new in-memory document-based database.</li> <li><code>(*InMemoryDocBD) GetCollection(collectionName string) (*Collection, error)</code>: Retrieves a collection by its name.</li> <li><code>(*InMemoryDocBD) CreateCollection(collectionName string) error</code>: Creates a new collection.</li> <li><code>(*InMemoryDocBD) DropCollection(collectionName string) error</code>: Removes a collection by its name.</li> <li><code>(*InMemoryDocBD) ListCollections() []string</code>: Returns a list of all collection names.</li> <li><code>NewCollection() *Collection</code>: Creates a new collection.</li> <li><code>(*Collection) InsertOne(document Document) error</code>: Inserts a new document into the collection.</li> <li><code>(*Collection) FindOne(id string) (Document, error)</code>: Retrieves a document by its ID.</li> <li><code>(*Collection) FindAll() []Document</code>: Retrieves all documents in the collection.</li> <li><code>(*Collection) Find(query map[string]interface{}) []Document</code>: Searches for documents matching a given query.</li> <li><code>(*Collection) DeleteOne(id string) error</code>: Deletes a document by its ID.</li> <li><code>(*Collection) UpdateOne(id string, update Document) error</code>: Updates a document by its ID.</li> <li><code>(*Collection) DeleteAll() error</code>: Deletes all documents in the collection.</li> </ul>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#database","title":"database","text":"<pre><code>import \"libs/golang/database/go-docdb/database\"\n</code></pre>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#index","title":"Index","text":"<ul> <li>type Collection</li> <li>func NewCollection() *Collection</li> <li>func (c *Collection) DeleteAll() error</li> <li>func (c *Collection) DeleteOne(id string) error</li> <li>func (c *Collection) Find(query map[string]interface{}) []Document</li> <li>func (c *Collection) FindAll() []Document</li> <li>func (c *Collection) FindOne(id string) (Document, error)</li> <li>func (c *Collection) InsertOne(document Document) error</li> <li>func (c *Collection) UpdateOne(id string, update Document) error</li> <li>type Document</li> <li>type DocumentID</li> <li>type InMemoryDocBD</li> <li>func NewInMemoryDocBD(name string) *InMemoryDocBD</li> <li>func (d *InMemoryDocBD) CreateCollection(collectionName string) error</li> <li>func (d *InMemoryDocBD) DropCollection(collectionName string) error</li> <li>func (d *InMemoryDocBD) GetCollection(collectionName string) (*Collection, error)</li> <li>func (d *InMemoryDocBD) ListCollections() []string</li> </ul>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#type-collection","title":"type Collection","text":"<p>Collection represents a collection of documents with thread-safe operations.</p> <pre><code>type Collection struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-newcollection","title":"func NewCollection","text":"<pre><code>func NewCollection() *Collection\n</code></pre> <p>NewCollection creates a new collection and initializes its data map.</p> <p>Returns:</p> <ul> <li>A pointer to the newly created Collection instance.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-collection-deleteall","title":"func (*Collection) DeleteAll","text":"<pre><code>func (c *Collection) DeleteAll() error\n</code></pre> <p>DeleteAll deletes all documents in the collection.</p> <p>Returns:</p> <ul> <li>An error if there is an issue during deletion.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-collection-deleteone","title":"func (*Collection) DeleteOne","text":"<pre><code>func (c *Collection) DeleteOne(id string) error\n</code></pre> <p>DeleteOne deletes a document by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the document to delete.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-collection-find","title":"func (*Collection) Find","text":"<pre><code>func (c *Collection) Find(query map[string]interface{}) []Document\n</code></pre> <p>Find searches for documents matching a given query.</p> <p>Parameters:</p> <ul> <li>query: The query criteria to match documents against.</li> </ul> <p>Returns:</p> <ul> <li>A slice of documents that match the query.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-collection-findall","title":"func (*Collection) FindAll","text":"<pre><code>func (c *Collection) FindAll() []Document\n</code></pre> <p>FindAll retrieves all documents in the collection.</p> <p>Returns:</p> <ul> <li>A slice of all documents in the collection.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-collection-findone","title":"func (*Collection) FindOne","text":"<pre><code>func (c *Collection) FindOne(id string) (Document, error)\n</code></pre> <p>FindOne retrieves a document by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the document to retrieve.</li> </ul> <p>Returns:</p> <ul> <li>The document if found.</li> <li>An error if the document does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-collection-insertone","title":"func (*Collection) InsertOne","text":"<pre><code>func (c *Collection) InsertOne(document Document) error\n</code></pre> <p>InsertOne inserts a new document into the collection.</p> <p>Parameters:</p> <ul> <li>document: The document to insert, which must contain an \"_id\" field.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document already exists or if the \"_id\" field is missing.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-collection-updateone","title":"func (*Collection) UpdateOne","text":"<pre><code>func (c *Collection) UpdateOne(id string, update Document) error\n</code></pre> <p>UpdateOne updates a document by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the document to update.</li> <li>update: The document fields to update.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#type-document","title":"type Document","text":"<p>Document represents a document with key-value pairs.</p> <pre><code>type Document map[string]interface{}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#type-documentid","title":"type DocumentID","text":"<p>DocumentID represents the ID of a document in the collection.</p> <pre><code>type DocumentID string\n</code></pre> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#type-inmemorydocbd","title":"type InMemoryDocBD","text":"<p>InMemoryDocBD represents an in-memory document-based database. It stores collections of documents in memory and provides methods to interact with these collections.</p> <pre><code>type InMemoryDocBD struct {\n    Name        string\n    Collections map[string]*Collection\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-newinmemorydocbd","title":"func NewInMemoryDocBD","text":"<pre><code>func NewInMemoryDocBD(name string) *InMemoryDocBD\n</code></pre> <p>NewInMemoryDocBD creates a new in-memory document-based database with the specified name and initializes its collections map.</p> <p>Parameters:</p> <ul> <li>name: The name of the in-memory database.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the newly created InMemoryDocBD instance.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-inmemorydocbd-createcollection","title":"func (*InMemoryDocBD) CreateCollection","text":"<pre><code>func (d *InMemoryDocBD) CreateCollection(collectionName string) error\n</code></pre> <p>CreateCollection creates a new collection with the specified name.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to create.</li> </ul> <p>Returns:</p> <ul> <li>An error if the collection already exists.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-inmemorydocbd-dropcollection","title":"func (*InMemoryDocBD) DropCollection","text":"<pre><code>func (d *InMemoryDocBD) DropCollection(collectionName string) error\n</code></pre> <p>DropCollection removes a collection by its name.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to remove.</li> </ul> <p>Returns:</p> <ul> <li>An error if the collection does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-inmemorydocbd-getcollection","title":"func (*InMemoryDocBD) GetCollection","text":"<pre><code>func (d *InMemoryDocBD) GetCollection(collectionName string) (*Collection, error)\n</code></pre> <p>GetCollection retrieves a collection by its name.</p> <p>Parameters:</p> <ul> <li>collectionName: The name of the collection to retrieve.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the Collection if found, otherwise nil.</li> <li>An error if the collection does not exist.</li> </ul> <p></p>"},{"location":"reference/libs/golang/database/go-docdb/docs/godoc/#func-inmemorydocbd-listcollections","title":"func (*InMemoryDocBD) ListCollections","text":"<pre><code>func (d *InMemoryDocBD) ListCollections() []string\n</code></pre> <p>ListCollections returns a list of all collection names.</p> <p>Returns:</p> <ul> <li>A slice of strings containing the names of all collections.</li> </ul> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/","title":"config-vault/handlers","text":"<p><code>config-vault/handlers</code> is a Go library that provides HTTP handlers for managing configuration entities within a web application. This library includes functionalities for creating, reading, updating, and deleting configuration entities through HTTP requests.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete configuration entities via HTTP requests.</li> <li>List configurations based on various attributes such as service, provider, and source.</li> <li>Handle input validation and error responses.</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/#creating-a-webconfighandler","title":"Creating a WebConfigHandler","text":"<p>The <code>WebConfigHandler</code> struct provides methods to handle HTTP requests for configuration operations.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"net/http\"\n\n    \"libs/golang/ddd/adapters/http/handlers/config-vault/handlers\"\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    handler := handlers.NewWebConfigHandler(repo)\n\n    http.HandleFunc(\"/configs\", handler.CreateConfig)\n    http.HandleFunc(\"/configs\", handler.UpdateConfig)\n    http.HandleFunc(\"/configs\", handler.DeleteConfig)\n    http.HandleFunc(\"/configs\", handler.ListAllConfigs)\n    http.HandleFunc(\"/configs\", handler.ListConfigByID)\n    http.HandleFunc(\"/configs\", handler.ListConfigsByServiceAndProvider)\n    http.HandleFunc(\"/configs\", handler.ListConfigsBySourceAndProvider)\n    http.HandleFunc(\"/configs\", handler.ListConfigsByServiceAndSourceAndProvider)\n    http.HandleFunc(\"/configs\", handler.ListConfigsByServiceAndProviderAndActive)\n    http.HandleFunc(\"/configs/depends-on\", handler.ListConfigsByProviderAndDependencies)\n\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>handlers</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-adapters-http-handlers-config-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/#error-handling","title":"Error Handling","text":"<p>The handlers include error handling for various scenarios, such as:</p> <ul> <li>Invalid request body</li> <li>Missing required query parameters</li> <li>Internal server errors during use case execution</li> </ul> <p>These errors are responded to with appropriate HTTP status codes and error messages.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#handlers","title":"handlers","text":"<pre><code>import \"libs/golang/ddd/adapters/http/handlers/config-vault/handlers\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type WebConfigHandler</li> <li>func NewWebConfigHandler(ConfigRepository entity.ConfigRepositoryInterface) *WebConfigHandler</li> <li>func (h *WebConfigHandler) CreateConfig(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebConfigHandler) DeleteConfig(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebConfigHandler) ListAllConfigs(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebConfigHandler) ListConfigByID(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebConfigHandler) ListConfigsByProviderAndDependencies(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebConfigHandler) ListConfigsByServiceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebConfigHandler) ListConfigsByServiceAndProviderAndActive(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebConfigHandler) ListConfigsByServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebConfigHandler) ListConfigsBySourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebConfigHandler) UpdateConfig(w http.ResponseWriter, r *http.Request)</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#type-webconfighandler","title":"type WebConfigHandler","text":"<p>WebConfigHandler handles HTTP requests for configuration operations.</p> <pre><code>type WebConfigHandler struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-newwebconfighandler","title":"func NewWebConfigHandler","text":"<pre><code>func NewWebConfigHandler(ConfigRepository entity.ConfigRepositoryInterface) *WebConfigHandler\n</code></pre> <p>NewWebConfigHandler creates and returns a new WebConfigHandler instance with the provided ConfigRepository.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A new WebConfigHandler instance.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-createconfig","title":"func (*WebConfigHandler) CreateConfig","text":"<pre><code>func (h *WebConfigHandler) CreateConfig(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>CreateConfig handles HTTP POST requests to create a new configuration. It decodes the request body into a ConfigDTO, executes the CreateConfigUseCase, and writes the created configuration as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the request body cannot be decoded, it responds with HTTP status 400 (Bad Request). If an error occurs during the creation process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-deleteconfig","title":"func (*WebConfigHandler) DeleteConfig","text":"<pre><code>func (h *WebConfigHandler) DeleteConfig(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>DeleteConfig handles HTTP DELETE requests to delete an existing configuration by its ID. It extracts the ID from the query parameters, executes the DeleteConfigUseCase, and writes a success message.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the ID is not provided or an error occurs during the deletion process, it responds with the appropriate HTTP status code.</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-listallconfigs","title":"func (*WebConfigHandler) ListAllConfigs","text":"<pre><code>func (h *WebConfigHandler) ListAllConfigs(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListAllConfigs handles HTTP GET requests to list all configurations. It executes the ListAllConfigUseCase and writes the list of configurations as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-listconfigbyid","title":"func (*WebConfigHandler) ListConfigByID","text":"<pre><code>func (h *WebConfigHandler) ListConfigByID(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListConfigByID handles HTTP GET requests to list a configuration by its ID. It extracts the ID from the query parameters, executes the ListOneByIDConfigUseCase, and writes the configuration as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the ID is not provided or an error occurs during the listing process, it responds with the appropriate HTTP status code.</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-listconfigsbyprovideranddependencies","title":"func (*WebConfigHandler) ListConfigsByProviderAndDependencies","text":"<pre><code>func (h *WebConfigHandler) ListConfigsByProviderAndDependencies(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListConfigsByProviderAndDependencies handles HTTP GET requests to list configurations by their dependencies. It extracts the dependencies from the query parameters, executes the ListAllByProviderAndDependsOnConfigUseCase, and writes the list of configurations as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the dependencies are not provided or an error occurs during the listing process, it responds with the appropriate HTTP status code.</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-listconfigsbyserviceandprovider","title":"func (*WebConfigHandler) ListConfigsByServiceAndProvider","text":"<pre><code>func (h *WebConfigHandler) ListConfigsByServiceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListConfigsByServiceAndProvider handles HTTP GET requests to list configurations by service and provider. It extracts the service and provider from the query parameters, executes the ListByServiceAndProviderConfigUseCase, and writes the list of configurations as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the service or provider is not provided or an error occurs during the listing process, it responds with the appropriate HTTP status code.</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-listconfigsbyserviceandproviderandactive","title":"func (*WebConfigHandler) ListConfigsByServiceAndProviderAndActive","text":"<pre><code>func (h *WebConfigHandler) ListConfigsByServiceAndProviderAndActive(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListConfigsByServiceAndProviderAndActive handles HTTP GET requests to list configurations by service, provider, and active status. It extracts the service, provider, and active status from the query parameters, executes the ListByServiceAndProviderAndActiveConfigUseCase, and writes the list of configurations as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the service, provider, or active status is not provided or an error occurs during the listing process, it responds with the appropriate HTTP status code.</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-listconfigsbyserviceandsourceandprovider","title":"func (*WebConfigHandler) ListConfigsByServiceAndSourceAndProvider","text":"<pre><code>func (h *WebConfigHandler) ListConfigsByServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListConfigsByServiceAndSourceAndProvider handles HTTP GET requests to list configurations by service, source, and provider. It extracts the service, source, and provider from the query parameters, executes the ListByServiceAndSourceAndProviderConfigUseCase, and writes the list of configurations as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the service, source, or provider is not provided or an error occurs during the listing process, it responds with the appropriate HTTP status code.</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-listconfigsbysourceandprovider","title":"func (*WebConfigHandler) ListConfigsBySourceAndProvider","text":"<pre><code>func (h *WebConfigHandler) ListConfigsBySourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListConfigsBySourceAndProvider handles HTTP GET requests to list configurations by source and provider. It extracts the source and provider from the query parameters, executes the ListBySourceAndProviderConfigUseCase, and writes the list of configurations as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the source or provider is not provided or an error occurs during the listing process, it responds with the appropriate HTTP status code.</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/config-vault/docs/godoc/#func-webconfighandler-updateconfig","title":"func (*WebConfigHandler) UpdateConfig","text":"<pre><code>func (h *WebConfigHandler) UpdateConfig(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>UpdateConfig handles HTTP PUT requests to update an existing configuration. It decodes the request body into a ConfigDTO, executes the UpdateConfigUseCase, and writes the updated configuration as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the request body cannot be decoded, it responds with HTTP status 400 (Bad Request). If an error occurs during the update process, it responds with HTTP status 500 (Internal Server Error).</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/","title":"healthz","text":"<p>The <code>healthz</code> package is a Go library that provides a handler for HTTP health checks. This library allows you to monitor the health status of your server by checking its uptime and readiness. It supports customizable time providers to facilitate testing and real-time monitoring.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/#features","title":"Features","text":"<ul> <li>HTTP handler for health checks</li> <li>Customizable time providers for flexibility and testability</li> <li>Responds with appropriate HTTP status codes based on server uptime</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/#creating-a-health-check-handler","title":"Creating a Health Check Handler","text":"<p>The <code>WebHealthzHandler</code> struct is used to handle health check requests. You can create a new instance of this handler using the <code>NewWebHealthzHandler</code> function, which accepts a <code>TimeProvider</code> to manage time-related functions.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/#example-with-realtimeprovider","title":"Example with RealTimeProvider","text":"<pre><code>package main\n\nimport (\n    \"net/http\"\n    \"libs/golang/ddd/adapters/http/handlers/health-check/healthz\"\n)\n\nfunc main() {\n    timeProvider := &amp;healthz.RealTimeProvider{}\n    handler := healthz.NewWebHealthzHandler(timeProvider)\n\n    http.HandleFunc(\"/healthz\", handler.Healthz)\n    http.ListenAndServe(\":8080\", nil)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/#implementing-custom-time-providers","title":"Implementing Custom Time Providers","text":"<p>You can implement the <code>TimeProvider</code> interface to create your own custom time providers. This is useful for testing or for integrating with other time-based systems.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"time\"\n)\n\ntype CustomTimeProvider struct{}\n\nfunc (c *CustomTimeProvider) Now() time.Time {\n    // Custom implementation\n}\n\nfunc (c *CustomTimeProvider) Since(t time.Time) time.Duration {\n    // Custom implementation\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/#testing","title":"Testing","text":"<p>To run the tests for the <code>healthz</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-adapters-http-handlers-health-check\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#healthz","title":"healthz","text":"<pre><code>import \"libs/golang/ddd/adapters/http/handlers/health-check/healthz\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#index","title":"Index","text":"<ul> <li>type MockTimeProvider</li> <li>func (m *MockTimeProvider) Advance(d time.Duration)</li> <li>func (m *MockTimeProvider) Now() time.Time</li> <li>func (m *MockTimeProvider) Since(t time.Time) time.Duration</li> <li>type RealTimeProvider</li> <li>func (r *RealTimeProvider) Now() time.Time</li> <li>func (r *RealTimeProvider) Since(t time.Time) time.Duration</li> <li>type TimeProvider</li> <li>type WebHealthzHandler</li> <li>func NewWebHealthzHandler(timeProvider TimeProvider, minUptime time.Duration) *WebHealthzHandler</li> <li>func (h *WebHealthzHandler) Healthz(w http.ResponseWriter, r *http.Request)</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#type-mocktimeprovider","title":"type MockTimeProvider","text":"<pre><code>type MockTimeProvider struct {\n    // contains filtered or unexported fields\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#func-mocktimeprovider-advance","title":"func (*MockTimeProvider) Advance","text":"<pre><code>func (m *MockTimeProvider) Advance(d time.Duration)\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#func-mocktimeprovider-now","title":"func (*MockTimeProvider) Now","text":"<pre><code>func (m *MockTimeProvider) Now() time.Time\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#func-mocktimeprovider-since","title":"func (*MockTimeProvider) Since","text":"<pre><code>func (m *MockTimeProvider) Since(t time.Time) time.Duration\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#type-realtimeprovider","title":"type RealTimeProvider","text":"<p>RealTimeProvider is a struct that implements the TimeProvider interface using the real time functions from the time package.</p> <pre><code>type RealTimeProvider struct{}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#func-realtimeprovider-now","title":"func (*RealTimeProvider) Now","text":"<pre><code>func (r *RealTimeProvider) Now() time.Time\n</code></pre> <p>Now returns the current local time.</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#func-realtimeprovider-since","title":"func (*RealTimeProvider) Since","text":"<pre><code>func (r *RealTimeProvider) Since(t time.Time) time.Duration\n</code></pre> <p>Since returns the time elapsed since t.</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#type-timeprovider","title":"type TimeProvider","text":"<p>TimeProvider is an interface that abstracts time-related functions, allowing for easier testing by enabling the use of mock time providers.</p> <pre><code>type TimeProvider interface {\n    Now() time.Time\n    Since(t time.Time) time.Duration\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#type-webhealthzhandler","title":"type WebHealthzHandler","text":"<p>WebHealthzHandler handles HTTP requests for health checks, providing information about the server's uptime and readiness.</p> <pre><code>type WebHealthzHandler struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#func-newwebhealthzhandler","title":"func NewWebHealthzHandler","text":"<pre><code>func NewWebHealthzHandler(timeProvider TimeProvider, minUptime time.Duration) *WebHealthzHandler\n</code></pre> <p>NewWebHealthzHandler creates and returns a new WebHealthzHandler instance with the specified TimeProvider. This allows for both real and mock time providers.</p> <p>Parameters:</p> <ul> <li>timeProvider: An implementation of the TimeProvider interface for time-related functions.</li> <li>minUptime: The minimum uptime required for the server to be considered healthy.</li> </ul> <p>Returns:</p> <ul> <li>A new instance of WebHealthzHandler.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/health-check/docs/godoc/#func-webhealthzhandler-healthz","title":"func (*WebHealthzHandler) Healthz","text":"<pre><code>func (h *WebHealthzHandler) Healthz(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>Healthz is an HTTP handler function that checks the health status of the server. If the server has been running for less than the minimum uptime required, it responds with a 500 Internal Server Error status. Otherwise, it responds with a 200 OK status.</p> <p>Parameters:</p> <ul> <li>w: The ResponseWriter to write the HTTP response.</li> <li>r: The HTTP request being handled.</li> </ul> <p>Returns:</p> <ul> <li>None.</li> </ul> <p>Example:</p> <pre><code>http.HandleFunc(\"/healthz\", handler.Healthz)\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/","title":"input-broker/handlers","text":"<p><code>input-broker/handlers</code> is a Go library that provides HTTP handlers for managing input entities within a web application. This library includes functionalities for creating, updating, deleting, and retrieving input entities through HTTP requests and dispatching events.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/#features","title":"Features","text":"<ul> <li>Create input entities via HTTP requests.</li> <li>Update existing input entities.</li> <li>Delete input entities.</li> <li>Retrieve input entities by various criteria.</li> <li>Dispatch events upon successful creation of input entities.</li> <li>Handle input validation and error responses.</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/#creating-a-webinputhandler","title":"Creating a WebInputHandler","text":"<p>The <code>WebInputHandler</code> struct provides methods to handle HTTP requests for input operations.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"net/http\"\n\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    \"libs/golang/ddd/usecases/input-broker/usecase\"\n    \"libs/golang/ddd/adapters/http/handlers/input-broker/handlers\"\n    events \"libs/golang/shared/go-events/amqp_events\"\n\n    \"github.com/go-chi/chi/v5\"\n)\n\nfunc main() {\n    inputRepository := entity.NewInputRepository()\n    eventDispatcher := events.NewEventDispatcher()\n    inputCreatedEvent := events.NewInputCreatedEvent()\n\n    handler := handlers.NewWebInputHandler(inputRepository, eventDispatcher, inputCreatedEvent)\n\n    r := chi.NewRouter()\n    r.Post(\"/inputs\", handler.CreateInput)\n    r.Put(\"/inputs/{id}\", handler.UpdateInput)\n    r.Delete(\"/inputs/{id}\", handler.DeleteInput)\n    r.Get(\"/inputs\", handler.ListAllInputs)\n    r.Get(\"/inputs/{id}\", handler.ListInputByID)\n    r.Get(\"/inputs/service/{service}/provider/{provider}\", handler.ListInputsByServiceAndProvider)\n    r.Get(\"/inputs/source/{source}/provider/{provider}\", handler.ListInputsBySourceAndProvider)\n    r.Get(\"/inputs/service/{service}/source/{source}/provider/{provider}\", handler.ListInputsByServiceAndSourceAndProvider)\n    r.Get(\"/inputs/status/{status}/provider/{provider}\", handler.ListInputsByStatusAndProvider)\n    r.Get(\"/inputs/status/{status}/service/{service}/provider/{provider}\", handler.ListInputsByStatusAndServiceAndProvider)\n    r.Get(\"/inputs/status/{status}/source/{source}/provider/{provider}\", handler.ListInputsByStatusAndSourceAndProvider)\n    r.Get(\"/inputs/status/{status}/service/{service}/source/{source}/provider/{provider}\", handler.ListInputsByStatusAndServiceAndSourceAndProvider)\n    r.Put(\"/inputs/{id}/status\", handler.UpdateInputStatus)\n\n    log.Fatal(http.ListenAndServe(\":8080\", r))\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/#http-endpoints","title":"HTTP Endpoints","text":"<ul> <li><code>POST /inputs</code> - Create a new input entity.</li> <li><code>PUT /inputs/{id}</code> - Update an existing input entity.</li> <li><code>DELETE /inputs/{id}</code> - Delete an input entity.</li> <li><code>GET /inputs</code> - List all input entities.</li> <li><code>GET /inputs/{id}</code> - Retrieve an input entity by ID.</li> <li><code>GET /inputs/service/{service}/provider/{provider}</code> - Retrieve input entities by service and provider.</li> <li><code>GET /inputs/source/{source}/provider/{provider}</code> - Retrieve input entities by source and provider.</li> <li><code>GET /inputs/service/{service}/source/{source}/provider/{provider}</code> - Retrieve input entities by service, source, and provider.</li> <li><code>GET /inputs/status/{status}/provider/{provider}</code> - Retrieve input entities by status and provider.</li> <li><code>GET /inputs/status/{status}/service/{service}/provider/{provider}</code> - Retrieve input entities by status, service, and provider.</li> <li><code>GET /inputs/status/{status}/source/{source}/provider/{provider}</code> - Retrieve input entities by status, source, and provider.</li> <li><code>GET /inputs/status/{status}/service/{service}/source/{source}/provider/{provider}</code> - Retrieve input entities by status, service, source, and provider.</li> <li><code>PUT /inputs/{id}/status</code> - Update the status of an existing input entity.</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/#testing","title":"Testing","text":"<p>To run the tests for the <code>handlers</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-adapters-http-handlers-input-broker\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/#error-handling","title":"Error Handling","text":"<p>The handlers include error handling for various scenarios, such as:</p> <ul> <li>Invalid request body</li> <li>Missing required parameters</li> <li>Internal server errors during use case execution</li> </ul> <p>These errors are responded to with appropriate HTTP status codes and error messages.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/#example-error-responses","title":"Example Error Responses","text":"<ul> <li><code>400 Bad Request</code> - Returned when the request body is invalid or required parameters are missing.</li> <li><code>500 Internal Server Error</code> - Returned when there is an error during use case execution or encoding the response.</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#handlers","title":"handlers","text":"<pre><code>import \"libs/golang/ddd/adapters/http/handlers/input-broker/handlers\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>type WebInputHandler</li> <li>func NewWebInputHandler(inputRepository entity.InputRepositoryInterface, eventDispatcher events.EventDispatcherInterface, inputCreatedEvent events.EventInterface) *WebInputHandler</li> <li>func (h *WebInputHandler) CreateInput(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) DeleteInput(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) ListAllInputs(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) ListInputByID(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) ListInputsByServiceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) ListInputsByServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) ListInputsBySourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) ListInputsByStatusAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) ListInputsByStatusAndServiceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) ListInputsByStatusAndServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) ListInputsByStatusAndSourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) UpdateInput(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebInputHandler) UpdateInputStatus(w http.ResponseWriter, r *http.Request)</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#type-webinputhandler","title":"type WebInputHandler","text":"<p>WebInputHandler handles HTTP requests for input-related operations.</p> <pre><code>type WebInputHandler struct {\n    InputRepository   entity.InputRepositoryInterface // Interface for input repository operations.\n    EventDispatcher   events.EventDispatcherInterface // Interface for event dispatching.\n    InputCreatedEvent events.EventInterface           // Event interface for input creation event.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-newwebinputhandler","title":"func NewWebInputHandler","text":"<pre><code>func NewWebInputHandler(inputRepository entity.InputRepositoryInterface, eventDispatcher events.EventDispatcherInterface, inputCreatedEvent events.EventInterface) *WebInputHandler\n</code></pre> <p>NewWebInputHandler creates a new instance of WebInputHandler with the provided dependencies.</p> <p>Parameters:</p> <ul> <li>inputRepository: Interface for input repository operations.</li> <li>eventDispatcher: Interface for event dispatching.</li> <li>inputCreatedEvent: Event interface for input creation event.</li> </ul> <p>Returns:</p> <ul> <li>A new instance of WebInputHandler.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-createinput","title":"func (*WebInputHandler) CreateInput","text":"<pre><code>func (h *WebInputHandler) CreateInput(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>CreateInput handles the creation of a new input entity.</p> <p>This function decodes the request body into an InputDTO, validates it, and then creates a new input entity using the use case. If successful, it responds with the created input entity as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the input data.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entity is created successfully, the response contains the created input entity as JSON.</li> <li>400 Bad Request: If there is an error decoding the request body.</li> <li>500 Internal Server Error: If there is an error creating the input entity or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-deleteinput","title":"func (*WebInputHandler) DeleteInput","text":"<pre><code>func (h *WebInputHandler) DeleteInput(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>DeleteInput handles the deletion of an existing input entity.</p> <p>This function extracts the input ID from the request URL, and then deletes the input entity using the use case. If successful, it responds with a success message. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the input ID.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entity is deleted successfully, the response contains a success message.</li> <li>500 Internal Server Error: If there is an error deleting the input entity.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-listallinputs","title":"func (*WebInputHandler) ListAllInputs","text":"<pre><code>func (h *WebInputHandler) ListAllInputs(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListAllInputs handles the retrieval of all input entities.</p> <p>This function retrieves all input entities using the use case, and then responds with the list of input entities as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entities are retrieved successfully, the response contains the list of input entities as JSON.</li> <li>500 Internal Server Error: If there is an error retrieving the input entities or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-listinputbyid","title":"func (*WebInputHandler) ListInputByID","text":"<pre><code>func (h *WebInputHandler) ListInputByID(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListInputByID handles the retrieval of an input entity by ID.</p> <p>This function extracts the input ID from the request URL, and then retrieves the input entity using the use case. If successful, it responds with the input entity as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the input ID.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entity is retrieved successfully, the response contains the input entity as JSON.</li> <li>500 Internal Server Error: If there is an error retrieving the input entity or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-listinputsbyserviceandprovider","title":"func (*WebInputHandler) ListInputsByServiceAndProvider","text":"<pre><code>func (h *WebInputHandler) ListInputsByServiceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListInputsByServiceAndProvider handles the retrieval of input entities by service and provider.</p> <p>This function extracts the service and provider from the request URL, and then retrieves the input entities using the use case. If successful, it responds with the list of input entities as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the service and provider.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entities are retrieved successfully, the response contains the list of input entities as JSON.</li> <li>400 Bad Request: If the service or provider is missing.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-listinputsbyserviceandsourceandprovider","title":"func (*WebInputHandler) ListInputsByServiceAndSourceAndProvider","text":"<pre><code>func (h *WebInputHandler) ListInputsByServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListInputsByServiceAndSourceAndProvider handles the retrieval of input entities by service, source, and provider.</p> <p>This function extracts the service, source, and provider from the request URL, and then retrieves the input entities using the use case. If successful, it responds with the list of input entities as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the service, source, and provider.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entities are retrieved successfully, the response contains the list of input entities as JSON.</li> <li>400 Bad Request: If the service, source, or provider is missing.</li> <li>500 Internal Server Error: If there is an error retrieving the input entities or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-listinputsbysourceandprovider","title":"func (*WebInputHandler) ListInputsBySourceAndProvider","text":"<pre><code>func (h *WebInputHandler) ListInputsBySourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListInputsBySourceAndProvider handles the retrieval of input entities by source and provider.</p> <p>This function extracts the source and provider from the request URL, and then retrieves the input entities using the use case. If successful, it responds with the list of input entities as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the source and provider.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entities are retrieved successfully, the response contains the list of input entities as JSON.</li> <li>400 Bad Request: If the source or provider is missing.</li> <li>500 Internal Server Error: If there is an error retrieving the input entities or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-listinputsbystatusandprovider","title":"func (*WebInputHandler) ListInputsByStatusAndProvider","text":"<pre><code>func (h *WebInputHandler) ListInputsByStatusAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListInputsByStatusAndProvider handles the retrieval of input entities by status and provider.</p> <p>This function extracts the status and provider from the request URL, and then retrieves the input entities using the use case. If successful, it responds with the list of input entities as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the status and provider.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entities are retrieved successfully, the response contains the list of input entities as JSON.</li> <li>400 Bad Request: If the status or provider is missing.</li> <li>500 Internal Server Error: If there is an error retrieving the input entities or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-listinputsbystatusandserviceandprovider","title":"func (*WebInputHandler) ListInputsByStatusAndServiceAndProvider","text":"<pre><code>func (h *WebInputHandler) ListInputsByStatusAndServiceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListInputsByStatusAndServiceAndProvider handles the retrieval of input entities by status, service, and provider.</p> <p>This function extracts the status, service, and provider from the request URL, and then retrieves the input entities using the use case. If successful, it responds with the list of input entities as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the status, service, and provider.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entities are retrieved successfully, the response contains the list of input entities as JSON.</li> <li>400 Bad Request: If the status, service, or provider is missing.</li> <li>500 Internal Server Error: If there is an error retrieving the input entities or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-listinputsbystatusandserviceandsourceandprovider","title":"func (*WebInputHandler) ListInputsByStatusAndServiceAndSourceAndProvider","text":"<pre><code>func (h *WebInputHandler) ListInputsByStatusAndServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListInputsByStatusAndServiceAndSourceAndProvider handles the retrieval of input entities by status, service, source, and provider.</p> <p>This function extracts the status, service, source, and provider from the request URL, and then retrieves the input entities using the use case. If successful, it responds with the list of input entities as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the status, service, source, and provider.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entities are retrieved successfully, the response contains the list of input entities as JSON.</li> <li>400 Bad Request: If the status, service, source, or provider is missing.</li> <li>500 Internal Server Error: If there is an error retrieving the input entities or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-listinputsbystatusandsourceandprovider","title":"func (*WebInputHandler) ListInputsByStatusAndSourceAndProvider","text":"<pre><code>func (h *WebInputHandler) ListInputsByStatusAndSourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListInputsByStatusAndSourceAndProvider handles the retrieval of input entities by status, source, and provider.</p> <p>This function extracts the status, source, and provider from the request URL, and then retrieves the input entities using the use case. If successful, it responds with the list of input entities as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the status, source, and provider.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entities are retrieved successfully, the response contains the list of input entities as JSON.</li> <li>400 Bad Request: If the status, source, or provider is missing.</li> <li>500 Internal Server Error: If there is an error retrieving the input entities or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-updateinput","title":"func (*WebInputHandler) UpdateInput","text":"<pre><code>func (h *WebInputHandler) UpdateInput(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>UpdateInput handles the update of an existing input entity.</p> <p>This function decodes the request body into an InputDTO, validates it, and then updates the input entity using the use case. If successful, it responds with the updated input entity as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the input ID and data.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entity is updated successfully, the response contains the updated input entity as JSON.</li> <li>400 Bad Request: If there is an error decoding the request body.</li> <li>500 Internal Server Error: If there is an error updating the input entity or encoding the response.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/input-broker/docs/godoc/#func-webinputhandler-updateinputstatus","title":"func (*WebInputHandler) UpdateInputStatus","text":"<pre><code>func (h *WebInputHandler) UpdateInputStatus(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>UpdateInputStatus handles the update of an existing input entity's status.</p> <p>This function decodes the request body into a StatusDTO, validates it, and then updates the status of the input entity using the use case. If successful, it responds with the updated input entity as JSON. If there are errors, appropriate HTTP error responses are returned.</p> <p>Parameters:</p> <ul> <li>w: HTTP Response Writer to write the response.</li> <li>r: HTTP Request containing the input ID and status data.</li> </ul> <p>Responses:</p> <ul> <li>200 OK: If the input entity status is updated successfully, the response contains the updated input entity as JSON.</li> <li>400 Bad Request: If there is an error decoding the request body.</li> <li>500 Internal Server Error: If there is an error updating the input entity status or encoding the response.</li> </ul> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/","title":"output-vault/handlers","text":"<p><code>output-vault/handlers</code> is a Go library that provides HTTP handlers for managing outputs entities within a web application. This library includes functionalities for creating, reading, updating, and deleting outputs entities through HTTP requests.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete output entities via HTTP requests.</li> <li>List outputs based on various attributes such as service, provider, and source.</li> <li>Handle input validation and error responses.</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/#creating-a-weboutputhandler","title":"Creating a WebOutputHandler","text":"<p>The <code>WebOutputHandler</code> struct provides methods to handle HTTP requests for output operations.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"net/http\"\n\n    \"libs/golang/ddd/adapters/http/handlers/output-vault/handlers\"\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    handler := handlers.NewWebConfigHandler(repo)\n\n    http.HandleFunc(\"/outputs\", handler.CreateConfig)\n    http.HandleFunc(\"/outputs\", handler.UpdateConfig)\n    http.HandleFunc(\"/outputs\", handler.DeleteConfig)\n    http.HandleFunc(\"/outputs\", handler.ListAllConfigs)\n    http.HandleFunc(\"/outputs\", handler.ListConfigByID)\n    http.HandleFunc(\"/outputs\", handler.ListConfigsByServiceAndProvider)\n    http.HandleFunc(\"/outputs\", handler.ListConfigsBySourceAndProvider)\n    http.HandleFunc(\"/outputs\", handler.ListConfigsByServiceAndSourceAndProvider)\n\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>handlers</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-adapters-http-handlers-output-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/#error-handling","title":"Error Handling","text":"<p>The handlers include error handling for various scenarios, such as:</p> <ul> <li>Invalid request body</li> <li>Missing required query parameters</li> <li>Internal server errors during use case execution</li> </ul> <p>These errors are responded to with appropriate HTTP status codes and error messages.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#handlers","title":"handlers","text":"<pre><code>import \"libs/golang/ddd/adapters/http/handlers/output-vault/handlers\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type WebOutputHandler</li> <li>func NewWebOutputHandler(outputRepository entity.OutputRepositoryInterface) *WebOutputHandler</li> <li>func (h *WebOutputHandler) CreateOutput(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebOutputHandler) DeleteOutput(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebOutputHandler) ListAllOutputs(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebOutputHandler) ListOutputByID(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebOutputHandler) ListOutputsByServiceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebOutputHandler) ListOutputsByServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebOutputHandler) ListOutputsBySourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebOutputHandler) UpdateOutput(w http.ResponseWriter, r *http.Request)</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#type-weboutputhandler","title":"type WebOutputHandler","text":"<p>WebOutputHandler represents the handler for the output vault.</p> <pre><code>type WebOutputHandler struct {\n    OutputRepository entity.OutputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#func-newweboutputhandler","title":"func NewWebOutputHandler","text":"<pre><code>func NewWebOutputHandler(outputRepository entity.OutputRepositoryInterface) *WebOutputHandler\n</code></pre> <p>NewWebOutputHandler initializes a new instance of WebOutputHandler with the provided OutputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>outputRepository: The repository interface for managing Output entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of WebOutputHandler.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#func-weboutputhandler-createoutput","title":"func (*WebOutputHandler) CreateOutput","text":"<pre><code>func (h *WebOutputHandler) CreateOutput(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>CreateOutput handles HTTP POST requests to create a new output. It decodes the request body into a OutputDTO, executes the CreateOutputUseCase, and writes the created output as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the request body cannot be decoded, it responds with HTTP status 400 (Bad Request). If an error occurs during the creation process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#func-weboutputhandler-deleteoutput","title":"func (*WebOutputHandler) DeleteOutput","text":"<pre><code>func (h *WebOutputHandler) DeleteOutput(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>DeleteOutput handles HTTP DELETE requests to delete an existing output by its ID. It extracts the output ID from the request URL, executes the DeleteOutputUseCase, and writes the deleted output as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the deletion process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#func-weboutputhandler-listalloutputs","title":"func (*WebOutputHandler) ListAllOutputs","text":"<pre><code>func (h *WebOutputHandler) ListAllOutputs(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListAllOutputs handles HTTP GET requests to list all outputs. It executes the ListAllOutputUseCase and writes the outputs as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#func-weboutputhandler-listoutputbyid","title":"func (*WebOutputHandler) ListOutputByID","text":"<pre><code>func (h *WebOutputHandler) ListOutputByID(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListOutputByID handles HTTP GET requests to list a output by its ID. It extracts the output ID from the request URL, executes the ListOneByIDOutputUseCase, and writes the output as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#func-weboutputhandler-listoutputsbyserviceandprovider","title":"func (*WebOutputHandler) ListOutputsByServiceAndProvider","text":"<pre><code>func (h *WebOutputHandler) ListOutputsByServiceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListOutputsByServiceAndProvider handles HTTP GET requests to list all outputs by service and provider. It extracts the service and provider names from the request URL, executes the ListAllBySourceAndProviderOutputUseCase, and writes the outputs as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#func-weboutputhandler-listoutputsbyserviceandsourceandprovider","title":"func (*WebOutputHandler) ListOutputsByServiceAndSourceAndProvider","text":"<pre><code>func (h *WebOutputHandler) ListOutputsByServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListOutputsByServiceAndSourceAndProvider handles HTTP GET requests to list all outputs by service, source, and provider. It extracts the service, source, and provider names from the request URL, executes the ListAllByServiceAndSourceAndProviderOutputUseCase, and writes the outputs as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#func-weboutputhandler-listoutputsbysourceandprovider","title":"func (*WebOutputHandler) ListOutputsBySourceAndProvider","text":"<pre><code>func (h *WebOutputHandler) ListOutputsBySourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListOutputsBySourceAndProvider handles HTTP GET requests to list all outputs by source and provider. It extracts the source and provider names from the request URL, executes the ListAllBySourceAndProviderOutputUseCase, and writes the outputs as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/output-vault/docs/godoc/#func-weboutputhandler-updateoutput","title":"func (*WebOutputHandler) UpdateOutput","text":"<pre><code>func (h *WebOutputHandler) UpdateOutput(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>UpdateOutput handles HTTP PUT requests to update an existing output. It decodes the request body into a OutputDTO, executes the UpdateOutputUseCase, and writes the updated output as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the request body cannot be decoded, it responds with HTTP status 400 (Bad Request). If an error occurs during the update process, it responds with HTTP status 500 (Internal Server Error).</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/","title":"schema-vault/handlers","text":"<p><code>schema-vault/handlers</code> is a Go library that provides HTTP handlers for managing schemas entities within a web application. This library includes functionalities for creating, reading, updating, and deleting schemas entities through HTTP requests.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete schema entities via HTTP requests.</li> <li>List schemas based on various attributes such as service, provider, and source.</li> <li>Handle input validation and error responses.</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/#creating-a-webschemahandler","title":"Creating a WebSchemaHandler","text":"<p>The <code>WebSchemaHandler</code> struct provides methods to handle HTTP requests for schema operations.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"net/http\"\n\n    \"libs/golang/ddd/adapters/http/handlers/schema-vault/handlers\"\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    handler := handlers.NewWebConfigHandler(repo)\n\n    http.HandleFunc(\"/schemas\", handler.CreateConfig)\n    http.HandleFunc(\"/schemas\", handler.UpdateConfig)\n    http.HandleFunc(\"/schemas\", handler.DeleteConfig)\n    http.HandleFunc(\"/schemas\", handler.ListAllConfigs)\n    http.HandleFunc(\"/schemas\", handler.ListConfigByID)\n    http.HandleFunc(\"/schemas\", handler.ListConfigsByServiceAndProvider)\n    http.HandleFunc(\"/schemas\", handler.ListConfigsBySourceAndProvider)\n    http.HandleFunc(\"/schemas\", handler.ListConfigsByServiceAndSourceAndProvider)\n\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>handlers</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-adapters-http-handlers-schema-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/#error-handling","title":"Error Handling","text":"<p>The handlers include error handling for various scenarios, such as:</p> <ul> <li>Invalid request body</li> <li>Missing required query parameters</li> <li>Internal server errors during use case execution</li> </ul> <p>These errors are responded to with appropriate HTTP status codes and error messages.</p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#handlers","title":"handlers","text":"<pre><code>import \"libs/golang/ddd/adapters/http/handlers/schema-vault/handlers\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type WebSchemaHandler</li> <li>func NewWebSchemaHandler(schemaRepository entity.SchemaRepositoryInterface) *WebSchemaHandler</li> <li>func (h *WebSchemaHandler) CreateSchema(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebSchemaHandler) DeleteSchema(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebSchemaHandler) ListAllSchemas(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebSchemaHandler) ListSchemaByID(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebSchemaHandler) ListSchemasByServiceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebSchemaHandler) ListSchemasByServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebSchemaHandler) ListSchemasByServiceAndSourceAndProviderAndSchemaType(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebSchemaHandler) ListSchemasBySourceAndProvider(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebSchemaHandler) UpdateSchema(w http.ResponseWriter, r *http.Request)</li> <li>func (h *WebSchemaHandler) ValidateSchema(w http.ResponseWriter, r *http.Request)</li> </ul>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#type-webschemahandler","title":"type WebSchemaHandler","text":"<p>WebSchemaHandler represents the handler for the schema vault.</p> <pre><code>type WebSchemaHandler struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-newwebschemahandler","title":"func NewWebSchemaHandler","text":"<pre><code>func NewWebSchemaHandler(schemaRepository entity.SchemaRepositoryInterface) *WebSchemaHandler\n</code></pre> <p>NewWebSchemaHandler initializes a new instance of WebSchemaHandler with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of WebSchemaHandler.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-createschema","title":"func (*WebSchemaHandler) CreateSchema","text":"<pre><code>func (h *WebSchemaHandler) CreateSchema(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>CreateSchema handles HTTP POST requests to create a new schema. It decodes the request body into a SchemaDTO, executes the CreateSchemaUseCase, and writes the created schema as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the request body cannot be decoded, it responds with HTTP status 400 (Bad Request). If an error occurs during the creation process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-deleteschema","title":"func (*WebSchemaHandler) DeleteSchema","text":"<pre><code>func (h *WebSchemaHandler) DeleteSchema(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>DeleteSchema handles HTTP DELETE requests to delete an existing schema by its ID. It extracts the schema ID from the request URL, executes the DeleteSchemaUseCase, and writes the deleted schema as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the deletion process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-listallschemas","title":"func (*WebSchemaHandler) ListAllSchemas","text":"<pre><code>func (h *WebSchemaHandler) ListAllSchemas(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListAllSchemas handles HTTP GET requests to list all schemas. It executes the ListAllSchemaUseCase and writes the schemas as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-listschemabyid","title":"func (*WebSchemaHandler) ListSchemaByID","text":"<pre><code>func (h *WebSchemaHandler) ListSchemaByID(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListSchemaByID handles HTTP GET requests to list a schema by its ID. It extracts the schema ID from the request URL, executes the ListOneByIDSchemaUseCase, and writes the schema as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-listschemasbyserviceandprovider","title":"func (*WebSchemaHandler) ListSchemasByServiceAndProvider","text":"<pre><code>func (h *WebSchemaHandler) ListSchemasByServiceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListSchemasByServiceAndProvider handles HTTP GET requests to list all schemas by service and provider. It extracts the service and provider names from the request URL, executes the ListAllBySourceAndProviderSchemaUseCase, and writes the schemas as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-listschemasbyserviceandsourceandprovider","title":"func (*WebSchemaHandler) ListSchemasByServiceAndSourceAndProvider","text":"<pre><code>func (h *WebSchemaHandler) ListSchemasByServiceAndSourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListSchemasByServiceAndSourceAndProvider handles HTTP GET requests to list all schemas by service, source, and provider. It extracts the service, source, and provider names from the request URL, executes the ListAllByServiceAndSourceAndProviderSchemaUseCase, and writes the schemas as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-listschemasbyserviceandsourceandproviderandschematype","title":"func (*WebSchemaHandler) ListSchemasByServiceAndSourceAndProviderAndSchemaType","text":"<pre><code>func (h *WebSchemaHandler) ListSchemasByServiceAndSourceAndProviderAndSchemaType(w http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-listschemasbysourceandprovider","title":"func (*WebSchemaHandler) ListSchemasBySourceAndProvider","text":"<pre><code>func (h *WebSchemaHandler) ListSchemasBySourceAndProvider(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>ListSchemasBySourceAndProvider handles HTTP GET requests to list all schemas by source and provider. It extracts the source and provider names from the request URL, executes the ListAllBySourceAndProviderSchemaUseCase, and writes the schemas as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If an error occurs during the listing process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-updateschema","title":"func (*WebSchemaHandler) UpdateSchema","text":"<pre><code>func (h *WebSchemaHandler) UpdateSchema(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>UpdateSchema handles HTTP PUT requests to update an existing schema. It decodes the request body into a SchemaDTO, executes the UpdateSchemaUseCase, and writes the updated schema as a JSON response.</p> <p>Parameters:</p> <pre><code>w: The HTTP response writer.\nr: The HTTP request.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>If the request body cannot be decoded, it responds with HTTP status 400 (Bad Request). If an error occurs during the update process, it responds with HTTP status 500 (Internal Server Error).</p> <p></p>"},{"location":"reference/libs/golang/ddd/adapters/http/handlers/schema-vault/docs/godoc/#func-webschemahandler-validateschema","title":"func (*WebSchemaHandler) ValidateSchema","text":"<pre><code>func (h *WebSchemaHandler) ValidateSchema(w http.ResponseWriter, r *http.Request)\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/","title":"config-vault/entity","text":"<p><code>config-vault/entity</code> is a Go library that provides structures and functions to manage and manipulate configuration entities within a system. This library includes utilities for converting data between different formats, validating configuration data, and generating necessary identifiers.</p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/#features","title":"Features","text":"<ul> <li>Define and manage configuration entities.</li> <li>Convert between <code>map[string]interface{}</code> and entity structs.</li> <li>Validate configuration data.</li> <li>Generate and handle MD5 and UUID identifiers.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/#defining-configuration-entities","title":"Defining Configuration Entities","text":"<p>The <code>Config</code> struct represents a configuration entity with attributes such as service, source, provider, and dependencies.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n)\n\nfunc main() {\n    configProps := entity.ConfigProps{\n        Active:   true,\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Provider: \"exampleProvider\",\n        JobParameters: map[string]interface{}{\n            \"parser_module\": \"test_parser_module\",\n        },\n        DependsOn: []map[string]interface{}{\n            {\"service\": \"dependencyService\", \"source\": \"dependencySource\"},\n        },\n    }\n\n    config, err := entity.NewConfig(configProps)\n    if err != nil {\n        fmt.Println(\"Error creating config:\", err)\n        return\n    }\n\n    fmt.Printf(\"Config: %+v\\n\", config)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/#converting-configuration-entities-to-maps","title":"Converting Configuration Entities to Maps","text":"<p>The <code>ToMap</code> method converts a <code>Config</code> entity to a <code>map[string]interface{}</code> representation.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n)\n\nfunc main() {\n    configProps := entity.ConfigProps{\n        Active:   true,\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Provider: \"exampleProvider\",\n        JobParameters: map[string]interface{}{\n            \"parser_module\": \"test_parser_module\",\n        },\n        DependsOn: []map[string]interface{}{\n            {\"service\": \"dependencyService\", \"source\": \"dependencySource\"},\n        },\n    }\n\n    config, err := entity.NewConfig(configProps)\n    if err != nil {\n        fmt.Println(\"Error creating config:\", err)\n        return\n    }\n\n    configMap, err := config.ToMap()\n    if err != nil {\n        fmt.Println(\"Error converting config to map:\", err)\n        return\n    }\n\n    fmt.Printf(\"Config as map: %+v\\n\", configMap)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/#validating-configuration-entities","title":"Validating Configuration Entities","text":"<p>The <code>isValid</code> method ensures that all required fields of a <code>Config</code> entity are set.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n)\n\nfunc main() {\n    configProps := entity.ConfigProps{\n        Active:   true,\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Provider: \"exampleProvider\",\n        JobParameters: map[string]interface{}{\n            \"parser_module\": \"test_parser_module\",\n        },\n        DependsOn: []map[string]interface{}{\n            {\"service\": \"dependencyService\", \"source\": \"dependencySource\"},\n        },\n    }\n\n    config, err := entity.NewConfig(configProps)\n    if err != nil {\n        fmt.Println(\"Error creating config:\", err)\n        return\n    }\n\n    err = config.isValid()\n    if err != nil {\n        fmt.Println(\"Config is invalid:\", err)\n        return\n    }\n\n    fmt.Println(\"Config is valid\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>entity</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-entities-config-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/#errors","title":"Errors","text":"<ul> <li><code>ErrInvalidID</code>: Returned when the ID of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidService</code>: Returned when the service of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidSource</code>: Returned when the source of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidProvider</code>: Returned when the provider of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidConfigVersionID</code>: Returned when the config version ID of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidCreatedAt</code>: Returned when the created at timestamp of a <code>Config</code> is invalid.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#entity","title":"entity","text":"<pre><code>import \"libs/golang/ddd/domain/entities/config-vault/entity\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>Variables</li> <li>type Config</li> <li>func NewConfig(configProps ConfigProps) (*Config, error)</li> <li>func (c *Config) GetEntityID() string</li> <li>func (c *Config) GetVersionIDData() map[string]interface{}</li> <li>func (c *Config) MapToEntity(doc map[string]interface{}) (*Config, error)</li> <li>func (c *Config) SetConfigVersionID(configVersionID uuid.ID)</li> <li>func (c *Config) SetCreatedAt(createdAt string)</li> <li>func (c *Config) SetDependsOn(dependsOn []JobDependencies)</li> <li>func (c *Config) ToMap() (map[string]interface{}, error)</li> <li>type ConfigProps</li> <li>type ConfigRepositoryInterface</li> <li>type JobDependencies</li> <li>type JobParameters</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#variables","title":"Variables","text":"<pre><code>var (\n    // ErrInvalidID is returned when the ID of a Config is invalid.\n    ErrInvalidID = errors.New(\"invalid ID\")\n\n    // ErrInvalidService is returned when the service of a Config is invalid.\n    ErrInvalidService = errors.New(\"invalid service\")\n\n    // ErrInvalidSource is returned when the source of a Config is invalid.\n    ErrInvalidSource = errors.New(\"invalid source\")\n\n    // ErrInvalidProvider is returned when the provider of a Config is invalid.\n    ErrInvalidProvider = errors.New(\"invalid provider\")\n\n    // ErrInvalidConfigVersionID is returned when the config version ID of a Config is invalid.\n    ErrInvalidConfigVersionID = errors.New(\"invalid config version ID\")\n\n    // ErrInvalidCreatedAt is returned when the created at timestamp of a Config is invalid.\n    ErrInvalidCreatedAt = errors.New(\"invalid created at\")\n)\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#type-config","title":"type Config","text":"<p>Config represents a configuration entity with various attributes such as service, source, provider, and dependencies.</p> <pre><code>type Config struct {\n    ID              md5id.ID          `bson:\"_id\"`\n    Active          bool              `bson:\"active\"`\n    Service         string            `bson:\"service\"`\n    Source          string            `bson:\"source\"`\n    Provider        string            `bson:\"provider\"`\n    DependsOn       []JobDependencies `bson:\"depends_on\"`\n    JobParameters   JobParameters     `bson:\"job_parameters\"`\n    ConfigVersionID uuid.ID           `bson:\"config_version_id\"`\n    CreatedAt       string            `bson:\"created_at\"`\n    UpdatedAt       string            `bson:\"updated_at\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#func-newconfig","title":"func NewConfig","text":"<pre><code>func NewConfig(configProps ConfigProps) (*Config, error)\n</code></pre> <p>NewConfig creates a new Config entity based on the provided ConfigProps. It validates the properties and generates necessary IDs.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#func-config-getentityid","title":"func (*Config) GetEntityID","text":"<pre><code>func (c *Config) GetEntityID() string\n</code></pre> <p>GetEntityID returns the ID of the Config entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#func-config-getversioniddata","title":"func (*Config) GetVersionIDData","text":"<pre><code>func (c *Config) GetVersionIDData() map[string]interface{}\n</code></pre> <p>GetVersionIDData returns a map with the version ID data for the Config entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#func-config-maptoentity","title":"func (*Config) MapToEntity","text":"<pre><code>func (c *Config) MapToEntity(doc map[string]interface{}) (*Config, error)\n</code></pre> <p>MapToEntity converts a map representation to a Config entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#func-config-setconfigversionid","title":"func (*Config) SetConfigVersionID","text":"<pre><code>func (c *Config) SetConfigVersionID(configVersionID uuid.ID)\n</code></pre> <p>SetConfigVersionID sets the config version ID of the Config entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#func-config-setcreatedat","title":"func (*Config) SetCreatedAt","text":"<pre><code>func (c *Config) SetCreatedAt(createdAt string)\n</code></pre> <p>SetCreatedAt sets the created at timestamp of the Config entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#func-config-setdependson","title":"func (*Config) SetDependsOn","text":"<pre><code>func (c *Config) SetDependsOn(dependsOn []JobDependencies)\n</code></pre> <p>SetDependsOn sets the dependencies of the Config entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#func-config-tomap","title":"func (*Config) ToMap","text":"<pre><code>func (c *Config) ToMap() (map[string]interface{}, error)\n</code></pre> <p>ToMap converts the Config entity to a map representation.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#type-configprops","title":"type ConfigProps","text":"<p>ConfigProps represents the properties needed to create a new Config entity.</p> <pre><code>type ConfigProps struct {\n    Active        bool\n    Service       string\n    Source        string\n    Provider      string\n    DependsOn     []map[string]interface{}\n    JobParameters map[string]interface{}\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#type-configrepositoryinterface","title":"type ConfigRepositoryInterface","text":"<pre><code>type ConfigRepositoryInterface interface {\n    Create(config *Config) error\n    FindByID(id string) (*Config, error)\n    FindAll() ([]*Config, error)\n    Update(config *Config) error\n    Delete(id string) error\n    FindAllByServiceAndProvider(provider, service string) ([]*Config, error)\n    FindAllBySourceAndProvider(provider, source string) ([]*Config, error)\n    FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*Config, error)\n    FindAllByServiceAndProviderAndActive(service, provider string, active bool) ([]*Config, error)\n    FindAllByProviderAndDependsOn(provider, service, source string) ([]*Config, error)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#type-jobdependencies","title":"type JobDependencies","text":"<p>JobDependencies represents the dependencies of a job, including the service and source.</p> <pre><code>type JobDependencies struct {\n    Service string `json:\"service\"`\n    Source  string `json:\"source\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/config-vault/docs/godoc/#type-jobparameters","title":"type JobParameters","text":"<p>JobParameters represents the parameters of a job.</p> <pre><code>type JobParameters struct {\n    ParserModule string `json:\"parser_module\"`\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/","title":"Events Router Entity","text":"<p>The <code>events-router/entity</code> package is a Go library that provides structures and functions to manage and manipulate event order entities within a system. This library includes utilities for converting data between different formats, validating event data, and generating necessary identifiers.</p>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/#features","title":"Features","text":"<ul> <li>Define and manage event order entities.</li> <li>Convert between <code>map[string]interface{}</code> and entity structs.</li> <li>Validate event data.</li> <li>Generate and handle MD5 and UUID identifiers.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/entities/events-router/#defining-event-order-entities","title":"Defining Event Order Entities","text":"<p>The <code>EventOrder</code> struct represents an event order entity with attributes such as service, source, provider, and data.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/events-router/entity\"\n)\n\nfunc main() {\n    eventOrderProps := entity.EventOrderProps{\n        Data: map[string]interface{}{\n            \"key\": \"value\",\n        },\n        Service:      \"test_service\",\n        Source:       \"test_source\",\n        Provider:     \"test_provider\",\n        InputID:      \"input-id\",\n        ProcessingID: \"xyz789\",\n    }\n\n    eventOrder, err := entity.NewEventOrder(eventOrderProps)\n    if err != nil {\n        fmt.Println(\"Error creating event order:\", err)\n        return\n    }\n\n    fmt.Printf(\"EventOrder: %+v\\n\", eventOrder)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/#converting-event-order-entities-to-maps","title":"Converting Event Order Entities to Maps","text":"<p>The <code>ToMap</code> method converts an <code>EventOrder</code> entity to a <code>map[string]interface{}</code> representation.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/events-router/entity\"\n)\n\nfunc main() {\n    eventOrderProps := entity.EventOrderProps{\n        Data: map[string]interface{}{\n            \"key\": \"value\",\n        },\n        Service:      \"test_service\",\n        Source:       \"test_source\",\n        Provider:     \"test_provider\",\n        InputID:      \"input-id\",\n        ProcessingID: \"xyz789\",\n    }\n\n    eventOrder, err := entity.NewEventOrder(eventOrderProps)\n    if err != nil {\n        fmt.Println(\"Error creating event order:\", err)\n        return\n    }\n\n    eventOrderMap, err := eventOrder.ToMap()\n    if err != nil {\n        fmt.Println(\"Error converting event order to map:\", err)\n        return\n    }\n\n    fmt.Printf(\"EventOrder as map: %+v\\n\", eventOrderMap)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/#validating-event-order-entities","title":"Validating Event Order Entities","text":"<p>The <code>isValid</code> method ensures that all required fields of an <code>EventOrder</code> entity are set.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/events-router/entity\"\n)\n\nfunc main() {\n    eventOrderProps := entity.EventOrderProps{\n        Data: map[string]interface{}{\n            \"key\": \"value\",\n        },\n        Service:      \"test_service\",\n        Source:       \"test_source\",\n        Provider:     \"test_provider\",\n        InputID:      \"input-id\",\n        ProcessingID: \"xyz789\",\n    }\n\n    eventOrder, err := entity.NewEventOrder(eventOrderProps)\n    if err != nil {\n        fmt.Println(\"Error creating event order:\", err)\n        return\n    }\n\n    err = eventOrder.isValid()\n    if err != nil {\n        fmt.Println(\"Event order is invalid:\", err)\n        return\n    }\n\n    fmt.Println(\"Event order is valid\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/#testing","title":"Testing","text":"<p>To run the tests for the <code>entity</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-entities-events-router\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/#errors","title":"Errors","text":"<ul> <li><code>ErrInvalidID</code>: Returned when the ID of an <code>EventOrder</code> is invalid.</li> <li><code>ErrInvalidService</code>: Returned when the service of an <code>EventOrder</code> is invalid.</li> <li><code>ErrInvalidSource</code>: Returned when the source of an <code>EventOrder</code> is invalid.</li> <li><code>ErrInvalidProvider</code>: Returned when the provider of an <code>EventOrder</code> is invalid.</li> <li><code>ErrInvalidProcessingID</code>: Returned when the processing ID of an <code>EventOrder</code> is invalid.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#entity","title":"entity","text":"<pre><code>import \"libs/golang/ddd/domain/entities/events-router/entity\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#index","title":"Index","text":"<ul> <li>Variables</li> <li>type EventOrder</li> <li>func NewEventOrder(props EventOrderProps) (*EventOrder, error)</li> <li>func (i *EventOrder) GetEntityID() string</li> <li>func (i *EventOrder) MapToEntity(doc map[string]interface{}) (*EventOrder, error)</li> <li>func (i *EventOrder) ToMap() (map[string]interface{}, error)</li> <li>type EventOrderProps</li> <li>type EventOrderRepositoryInterface</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#variables","title":"Variables","text":"<pre><code>var (\n    // ErrInvalidID is returned when the ID of an EventOrder is invalid.\n    ErrInvalidID = errors.New(\"invalid ID\")\n\n    // ErrInvalidService is returned when the service of an EventOrder is invalid.\n    ErrInvalidService = errors.New(\"invalid service\")\n\n    // ErrInvalidSource is returned when the source of an EventOrder is invalid.\n    ErrInvalidSource = errors.New(\"invalid source\")\n\n    // ErrInvalidProvider is returned when the provider of an EventOrder is invalid.\n    ErrInvalidProvider = errors.New(\"invalid provider\")\n\n    // ErrInvalidProcessingID is returned when the processing ID of an EventOrder is invalid.\n    ErrInvalidProcessingID = errors.New(\"invalid processing ID\")\n\n    // ErrInvalidStage is returned when the stage of an EventOrder is invalid.\n    ErrInvalidStage = errors.New(\"invalid stage\")\n)\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#type-eventorder","title":"type EventOrder","text":"<p>EventOrder represents an event order entity with various attributes.</p> <pre><code>type EventOrder struct {\n    ID           md5id.ID               `bson:\"_id\"`\n    Service      string                 `bson:\"service\"`\n    Source       string                 `bson:\"source\"`\n    Provider     string                 `bson:\"provider\"`\n    Stage        string                 `bson:\"stage\"`\n    ProcessingID uuid.ID                `bson:\"processing_id\"`\n    InputID      string                 `bson:\"input_id\"`\n    Data         map[string]interface{} `bson:\"data\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#func-neweventorder","title":"func NewEventOrder","text":"<pre><code>func NewEventOrder(props EventOrderProps) (*EventOrder, error)\n</code></pre> <p>NewEventOrder creates a new EventOrder with the provided properties.</p> <p>Parameters:</p> <ul> <li>props: The properties required to create a new EventOrder.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the created EventOrder.</li> <li>An error if the validation of the EventOrder fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#func-eventorder-getentityid","title":"func (*EventOrder) GetEntityID","text":"<pre><code>func (i *EventOrder) GetEntityID() string\n</code></pre> <p>GetEntityID returns the unique identifier of the EventOrder entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#func-eventorder-maptoentity","title":"func (*EventOrder) MapToEntity","text":"<pre><code>func (i *EventOrder) MapToEntity(doc map[string]interface{}) (*EventOrder, error)\n</code></pre> <p>MapToEntity converts a map to an EventOrder entity.</p> <p>Parameters:</p> <ul> <li>doc: The map representation of an EventOrder.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the EventOrder entity.</li> <li>An error if the conversion fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#func-eventorder-tomap","title":"func (*EventOrder) ToMap","text":"<pre><code>func (i *EventOrder) ToMap() (map[string]interface{}, error)\n</code></pre> <p>ToMap converts the EventOrder entity to a map.</p> <p>Returns:</p> <ul> <li>A map representation of the EventOrder entity.</li> <li>An error if the conversion fails.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#type-eventorderprops","title":"type EventOrderProps","text":"<p>EventOrderProps holds the properties required to create a new EventOrder.</p> <pre><code>type EventOrderProps struct {\n    Service      string\n    Source       string\n    Provider     string\n    ProcessingID string\n    InputID      string\n    Stage        string\n    Data         map[string]interface{}\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/events-router/docs/godoc/#type-eventorderrepositoryinterface","title":"type EventOrderRepositoryInterface","text":"<pre><code>type EventOrderRepositoryInterface interface {\n    Create(output *EventOrder) error\n    FindByID(id string) (*EventOrder, error)\n    FindAll() ([]*EventOrder, error)\n    Delete(id string) error\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/","title":"Input Broker Entity","text":"<p>The <code>input-broker/entity</code> package is a Go library that provides structures and functions to manage and manipulate input entities within a system. This library includes utilities for converting data between different formats, validating input data, and generating necessary identifiers.</p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/#features","title":"Features","text":"<ul> <li>Define and manage input entities.</li> <li>Convert between <code>map[string]interface{}</code> and entity structs.</li> <li>Validate input data.</li> <li>Generate and handle MD5 and UUID identifiers.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/#defining-input-entities","title":"Defining Input Entities","text":"<p>The <code>Input</code> struct represents an input entity with attributes such as service, source, provider, and data.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n)\n\nfunc main() {\n    inputProps := entity.InputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n    }\n\n    input, err := entity.NewInput(inputProps)\n    if err != nil {\n        fmt.Println(\"Error creating input:\", err)\n        return\n    }\n\n    fmt.Printf(\"Input: %+v\\n\", input)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/#converting-input-entities-to-maps","title":"Converting Input Entities to Maps","text":"<p>The <code>ToMap</code> method converts an <code>Input</code> entity to a <code>map[string]interface{}</code> representation.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n)\n\nfunc main() {\n    inputProps := entity.InputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n    }\n\n    input, err := entity.NewInput(inputProps)\n    if err != nil {\n        fmt.Println(\"Error creating input:\", err)\n        return\n    }\n\n    inputMap, err := input.ToMap()\n    if err != nil {\n        fmt.Println(\"Error converting input to map:\", err)\n        return\n    }\n\n    fmt.Printf(\"Input as map: %+v\\n\", inputMap)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/#validating-input-entities","title":"Validating Input Entities","text":"<p>The <code>isValid</code> method ensures that all required fields of an <code>Input</code> entity are set.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n)\n\nfunc main() {\n    inputProps := entity.InputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n    }\n\n    input, err := entity.NewInput(inputProps)\n    if err != nil {\n        fmt.Println(\"Error creating input:\", err)\n        return\n    }\n\n    err = input.isValid()\n    if err != nil {\n        fmt.Println(\"Input is invalid:\", err)\n        return\n    }\n\n    fmt.Println(\"Input is valid\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/#testing","title":"Testing","text":"<p>To run the tests for the <code>entity</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-entities-input-broker\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/#errors","title":"Errors","text":"<ul> <li><code>ErrInvalidID</code>: Returned when the ID of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidService</code>: Returned when the service of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidSource</code>: Returned when the source of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidProvider</code>: Returned when the provider of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidProcessingID</code>: Returned when the processing ID of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidProcessingTimestamp</code>: Returned when the processing timestamp of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidData</code>: Returned when the data of an <code>Input</code> is invalid.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#entity","title":"entity","text":"<pre><code>import \"libs/golang/ddd/domain/entities/input-broker/entity\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>Variables</li> <li>type Input</li> <li>func NewInput(props InputProps) (*Input, error)</li> <li>func (i *Input) GetEntityID() string</li> <li>func (i *Input) MapToEntity(doc map[string]interface{}) (*Input, error)</li> <li>func (i *Input) SetCreatedAt(createdAt string)</li> <li>func (i *Input) SetProcessingTimestamp(timestamp time.Time)</li> <li>func (i *Input) SetStatus(code int, detail string)</li> <li>func (i *Input) SetUpdatedAt(updatedAt string)</li> <li>func (i *Input) ToMap() (map[string]interface{}, error)</li> <li>type InputProps</li> <li>type InputRepositoryInterface</li> <li>type Metadata</li> <li>type Status</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#variables","title":"Variables","text":"<pre><code>var (\n    // ErrInvalidID is returned when the ID of an Output is invalid.\n    ErrInvalidID = errors.New(\"invalid ID\")\n\n    // ErrInvalidService is returned when the service of an Output is invalid.\n    ErrInvalidService = errors.New(\"invalid service\")\n\n    // ErrInvalidSource is returned when the source of an Output is invalid.\n    ErrInvalidSource = errors.New(\"invalid source\")\n\n    // ErrInvalidProvider is returned when the provider of an Output is invalid.\n    ErrInvalidProvider = errors.New(\"invalid provider\")\n\n    // ErrInvalidInputID is returned when the input ID of an Output is invalid.\n    ErrInvalidInputID = errors.New(\"invalid input ID\")\n\n    // ErrInvalidProcessingID is returned when the processing ID of an Output is invalid.\n    ErrInvalidProcessingID = errors.New(\"invalid processing ID\")\n\n    // ErrInvalidProcessingTimestamp is returned when the processing timestamp of an Output is invalid.\n    ErrInvalidProcessingTimestamp = errors.New(\"invalid processing timestamp\")\n\n    // ErrInvalidData is returned when the data of an Output is invalid.\n    ErrInvalidData = errors.New(\"invalid data\")\n\n    // ErrInvalidInputData is returned when the input data of an Output is invalid.\n    ErrInvalidInputData = errors.New(\"invalid input data\")\n\n    // ErrInvalidStatusCode is returned when the status code of an Output is invalid.\n    ErrInvalidStatusCode = errors.New(\"invalid status code\")\n\n    // ErrInvalidStatusDetail is returned when the status detail of an Output is invalid.\n    ErrInvalidStatusDetail = errors.New(\"invalid status detail\")\n\n    // StatusCodeIdle represents the idle status code.\n    StatusCodeIdle = 0\n\n    // StatusDetailIdle represents the idle status detail.\n    StatusDetailIdle = \"Idle\"\n\n    // DateLayout defines the layout for parsing and formatting dates.\n    DateLayout = \"2006-01-02 15:04:05\"\n)\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#type-input","title":"type Input","text":"<pre><code>type Input struct {\n    ID        md5id.ID               `bson:\"_id\"`        // ID is the unique identifier of the Input entity.\n    Data      map[string]interface{} `bson:\"data\"`       // Data represents the input data.\n    Metadata  Metadata               `bson:\"metadata\"`   // Metadata represents the metadata of the input data.\n    Status    Status                 `bson:\"status\"`     // Status represents the status of the input data.\n    CreatedAt string                 `bson:\"created_at\"` // CreatedAt is the timestamp when the Input entity was created.\n    UpdatedAt string                 `bson:\"updated_at\"` // UpdatedAt is the timestamp when the Input entity was last updated.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#func-newinput","title":"func NewInput","text":"<pre><code>func NewInput(props InputProps) (*Input, error)\n</code></pre> <p>NewInput creates a new Input entity based on the provided InputProps. It validates the properties and returns an error if any of them are invalid.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#func-input-getentityid","title":"func (*Input) GetEntityID","text":"<pre><code>func (i *Input) GetEntityID() string\n</code></pre> <p>GetEntityID returns the unique identifier of the Input entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#func-input-maptoentity","title":"func (*Input) MapToEntity","text":"<pre><code>func (i *Input) MapToEntity(doc map[string]interface{}) (*Input, error)\n</code></pre> <p>MapToEntity converts a map representation to an Input entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#func-input-setcreatedat","title":"func (*Input) SetCreatedAt","text":"<pre><code>func (i *Input) SetCreatedAt(createdAt string)\n</code></pre> <p>SetCreatedAt sets the created at timestamp of the Input entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#func-input-setprocessingtimestamp","title":"func (*Input) SetProcessingTimestamp","text":"<pre><code>func (i *Input) SetProcessingTimestamp(timestamp time.Time)\n</code></pre> <p>SetProcessingTimestamp sets the processing timestamp of the Input entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#func-input-setstatus","title":"func (*Input) SetStatus","text":"<pre><code>func (i *Input) SetStatus(code int, detail string)\n</code></pre> <p>SetStatus sets the status of the Input entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#func-input-setupdatedat","title":"func (*Input) SetUpdatedAt","text":"<pre><code>func (i *Input) SetUpdatedAt(updatedAt string)\n</code></pre> <p>SetUpdatedAt sets the updated at timestamp of the Input entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#func-input-tomap","title":"func (*Input) ToMap","text":"<pre><code>func (i *Input) ToMap() (map[string]interface{}, error)\n</code></pre> <p>ToMap converts the Input entity to a map.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#type-inputprops","title":"type InputProps","text":"<pre><code>type InputProps struct {\n    Data     map[string]interface{}\n    Service  string\n    Source   string\n    Provider string\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#type-inputrepositoryinterface","title":"type InputRepositoryInterface","text":"<pre><code>type InputRepositoryInterface interface {\n    Create(output *Input) error\n    FindByID(id string) (*Input, error)\n    FindAll() ([]*Input, error)\n    Update(output *Input) error\n    Delete(id string) error\n    FindAllByStatusAndProvider(provider string, status int) ([]*Input, error)\n    FindAllByServiceAndProvider(provider, service string) ([]*Input, error)\n    FindAllBySourceAndProvider(provider, source string) ([]*Input, error)\n    FindAllByServiceAndSourceAndProvider(provider, service, source string) ([]*Input, error)\n    FindAllByStatusAndServiceAndProvider(service, provider string, status int) ([]*Input, error)\n    FindAllByStatusAndSourceAndProvider(source, provider string, status int) ([]*Input, error)\n    FindAllByStatusAndServiceAndSourceAndProvider(service, source, provider string, status int) ([]*Input, error)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#type-metadata","title":"type Metadata","text":"<pre><code>type Metadata struct {\n    ProcessingID        uuid.ID `bson:\"processing_id\"`        // ProcessingID is the unique identifier of the processing job.\n    ProcessingTimestamp string  `bson:\"processing_timestamp\"` // ProcessingTimestamp is the timestamp when the processing job was executed.\n    Service             string  `bson:\"service\"`              // Service represents the service of the input data.\n    Source              string  `bson:\"source\"`               // Source represents the source of the input data.\n    Provider            string  `bson:\"provider\"`             // Provider represents the provider of the input data.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/input-broker/docs/godoc/#type-status","title":"type Status","text":"<pre><code>type Status struct {\n    Code   int    `bson:\"code\"`   // Code represents the status code.\n    Detail string `bson:\"detail\"` // Detail represents the status detail.\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/","title":"output-vault/entity","text":"<p><code>output-vault/entity</code> is a Go library that provides structures and functions to manage and manipulate output entities within a system. This library includes utilities for converting data between different formats, validating output data, and generating necessary identifiers.</p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/#features","title":"Features","text":"<ul> <li>Define and manage output entities.</li> <li>Convert between <code>map[string]interface{}</code> and entity structs.</li> <li>Validate output data.</li> <li>Generate and handle MD5 identifiers.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/#defining-output-entities","title":"Defining Output Entities","text":"<p>The <code>Output</code> struct represents an output entity with attributes such as service, source, provider, and data.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n)\n\nfunc main() {\n    outputProps := entity.OutputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n        Metadata: map[string]interface{}{\n            \"input_id\": \"input_id\",\n            \"input\": map[string]interface{}{\n                \"data\": map[string]interface{}{\n                    \"input1\": \"value1\",\n                },\n                \"processing_id\":        \"processing_id\",\n                \"processing_timestamp\": \"2023-06-01 00:00:00\",\n            },\n        },\n    }\n\n    output, err := entity.NewOutput(outputProps)\n    if err != nil {\n        fmt.Println(\"Error creating output:\", err)\n        return\n    }\n\n    fmt.Printf(\"Output: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/#converting-output-entities-to-maps","title":"Converting Output Entities to Maps","text":"<p>The <code>ToMap</code> method converts an <code>Output</code> entity to a <code>map[string]interface{}</code> representation.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n)\n\nfunc main() {\n    outputProps := entity.OutputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n        Metadata: map[string]interface{}{\n            \"input_id\": \"input_id\",\n            \"input\": map[string]interface{}{\n                \"data\": map[string]interface{}{\n                    \"input1\": \"value1\",\n                },\n                \"processing_id\":        \"processing_id\",\n                \"processing_timestamp\": \"2023-06-01 00:00:00\",\n            },\n        },\n    }\n\n    output, err := entity.NewOutput(outputProps)\n    if err != nil {\n        fmt.Println(\"Error creating output:\", err)\n        return\n    }\n\n    outputMap, err := output.ToMap()\n    if err != nil {\n        fmt.Println(\"Error converting output to map:\", err)\n        return\n    }\n\n    fmt.Printf(\"Output as map: %+v\\n\", outputMap)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/#validating-output-entities","title":"Validating Output Entities","text":"<p>The <code>isValid</code> method ensures that all required fields of an <code>Output</code> entity are set.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n)\n\nfunc main() {\n    outputProps := entity.OutputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n        Metadata: map[string]interface{}{\n            \"input_id\": \"input_id\",\n            \"input\": map[string]interface{}{\n                \"data\": map[string]interface{}{\n                    \"input1\": \"value1\",\n                },\n                \"processing_id\":        \"processing_id\",\n                \"processing_timestamp\": \"2023-06-01 00:00:00\",\n            },\n        },\n    }\n\n    output, err := entity.NewOutput(outputProps)\n    if err != nil {\n        fmt.Println(\"Error creating output:\", err)\n        return\n    }\n\n    err = output.isValid()\n    if err != nil {\n        fmt.Println(\"Output is invalid:\", err)\n        return\n    }\n\n    fmt.Println(\"Output is valid\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>entity</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-entities-output-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/#errors","title":"Errors","text":"<ul> <li><code>ErrInvalidID</code>: Returned when the ID of an <code>Output</code> is invalid.</li> <li><code>ErrInvalidService</code>: Returned when the service of an <code>Output</code> is invalid.</li> <li><code>ErrInvalidSource</code>: Returned when the source of an <code>Output</code> is invalid.</li> <li><code>ErrInvalidProvider</code>: Returned when the provider of an <code>Output</code> is invalid.</li> <li><code>ErrInvalidInputID</code>: Returned when the input ID of an <code>Output</code> is invalid.</li> <li><code>ErrInvalidProcessingID</code>: Returned when the processing ID of an <code>Output</code> is invalid.</li> <li><code>ErrInvalidProcessingTimestamp</code>: Returned when the processing timestamp of an <code>Output</code> is invalid.</li> <li><code>ErrInvalidData</code>: Returned when the data of an <code>Output</code> is invalid.</li> <li><code>ErrInvalidInputData</code>: Returned when the input data of an <code>Output</code> is invalid.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#entity","title":"entity","text":"<pre><code>import \"libs/golang/ddd/domain/entities/output-vault/entity\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>Variables</li> <li>type Input</li> <li>type Metadata</li> <li>type Output</li> <li>func NewOutput(props OutputProps) (*Output, error)</li> <li>func (o *Output) GetEntityID() string</li> <li>func (o *Output) MapToEntity(doc map[string]interface{}) (*Output, error)</li> <li>func (o *Output) SetCreatedAt(createdAt string)</li> <li>func (o *Output) ToMap() (map[string]interface{}, error)</li> <li>type OutputProps</li> <li>type OutputRepositoryInterface</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#variables","title":"Variables","text":"<pre><code>var (\n    // ErrInvalidID is returned when the ID of an Output is invalid.\n    ErrInvalidID = errors.New(\"invalid ID\")\n\n    // ErrInvalidService is returned when the service of an Output is invalid.\n    ErrInvalidService = errors.New(\"invalid service\")\n\n    // ErrInvalidSource is returned when the source of an Output is invalid.\n    ErrInvalidSource = errors.New(\"invalid source\")\n\n    // ErrInvalidProvider is returned when the provider of an Output is invalid.\n    ErrInvalidProvider = errors.New(\"invalid provider\")\n\n    // ErrInvalidInputID is returned when the input ID of an Output is invalid.\n    ErrInvalidInputID = errors.New(\"invalid input ID\")\n\n    // ErrInvalidProcessingID is returned when the processing ID of an Output is invalid.\n    ErrInvalidProcessingID = errors.New(\"invalid processing ID\")\n\n    // ErrInvalidProcessingTimestamp is returned when the processing timestamp of an Output is invalid.\n    ErrInvalidProcessingTimestamp = errors.New(\"invalid processing timestamp\")\n\n    // ErrInvalidData is returned when the data of an Output is invalid.\n    ErrInvalidData = errors.New(\"invalid data\")\n\n    // ErrInvalidInputData is returned when the input data of an Output is invalid.\n    ErrInvalidInputData = errors.New(\"invalid input data\")\n)\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#type-input","title":"type Input","text":"<p>Input represents the input data of an Output entity.</p> <pre><code>type Input struct {\n    Data                map[string]interface{} `bson:\"data\"`                 // Data represents the input data.\n    ProcessingID        string                 `bson:\"processing_id\"`        // ProcessingID is the unique identifier of the processing job.\n    ProcessingTimestamp string                 `bson:\"processing_timestamp\"` // ProcessingTimestamp is the timestamp when the processing job was executed.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#type-metadata","title":"type Metadata","text":"<p>Metadata represents the metadata of an Output entity.</p> <pre><code>type Metadata struct {\n    InputID string `bson:\"input_id\"` // InputID is the unique identifier of the input data.\n    Input   Input  `bson:\"input\"`    // Input represents the input data of the Output entity.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#type-output","title":"type Output","text":"<p>Output represents an output entity with various attributes such as service, source, provider, and data.</p> <pre><code>type Output struct {\n    ID        md5id.ID               `bson:\"_id\"`        // ID is the unique identifier of the Output entity.\n    Data      map[string]interface{} `bson:\"data\"`       // Data represents the output data.\n    Service   string                 `bson:\"service\"`    // Service represents the name of the service for which the output is created.\n    Source    string                 `bson:\"source\"`     // Source indicates the origin or source of the output.\n    Provider  string                 `bson:\"provider\"`   // Provider specifies the provider of the output.\n    Metadata  Metadata               `bson:\"metadata\"`   // Metadata represents the metadata of the output.\n    CreatedAt string                 `bson:\"created_at\"` // CreatedAt is the timestamp when the Output entity was created.\n    UpdatedAt string                 `bson:\"updated_at\"` // UpdatedAt is the timestamp when the Output entity was last updated.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#func-newoutput","title":"func NewOutput","text":"<pre><code>func NewOutput(props OutputProps) (*Output, error)\n</code></pre> <p>NewOutput creates a new Output entity based on the provided OutputProps. It validates the properties and returns an error if any of them are invalid.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#func-output-getentityid","title":"func (*Output) GetEntityID","text":"<pre><code>func (o *Output) GetEntityID() string\n</code></pre> <p>GetEntityID returns the ID of the Output entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#func-output-maptoentity","title":"func (*Output) MapToEntity","text":"<pre><code>func (o *Output) MapToEntity(doc map[string]interface{}) (*Output, error)\n</code></pre> <p>MapToEntity converts a map representation to an Output entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#func-output-setcreatedat","title":"func (*Output) SetCreatedAt","text":"<pre><code>func (o *Output) SetCreatedAt(createdAt string)\n</code></pre> <p>SetCreatedAt sets the created at timestamp of the Output entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#func-output-tomap","title":"func (*Output) ToMap","text":"<pre><code>func (o *Output) ToMap() (map[string]interface{}, error)\n</code></pre> <p>ToMap converts the Output entity to a map representation.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#type-outputprops","title":"type OutputProps","text":"<p>OutputProps represents the properties needed to create a new Output entity.</p> <pre><code>type OutputProps struct {\n    Data     map[string]interface{}\n    Service  string\n    Source   string\n    Provider string\n    Metadata map[string]interface{}\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/output-vault/docs/godoc/#type-outputrepositoryinterface","title":"type OutputRepositoryInterface","text":"<pre><code>type OutputRepositoryInterface interface {\n    Create(output *Output) error\n    FindByID(id string) (*Output, error)\n    FindAll() ([]*Output, error)\n    Update(output *Output) error\n    Delete(id string) error\n    FindAllByServiceAndProvider(provider, service string) ([]*Output, error)\n    FindAllBySourceAndProvider(provider, source string) ([]*Output, error)\n    FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*Output, error)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/","title":"schema-vault/entity","text":"<p><code>schema-vault/entity</code> is a Go library that provides structures and functions to manage and manipulate schema entities within a system. This library includes utilities for converting data between different formats, validating schema data, and generating necessary identifiers.</p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/#features","title":"Features","text":"<ul> <li>Define and manage schema entities.</li> <li>Convert between <code>map[string]interface{}</code> and entity structs.</li> <li>Validate schema data.</li> <li>Generate and handle MD5 and UUID identifiers.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/#defining-schema-entities","title":"Defining Schema Entities","text":"<p>The <code>Schema</code> struct represents a schema entity with attributes such as service, source, provider, and schema type.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n)\n\nfunc main() {\n    schemaProps := entity.SchemaProps{\n        Service:    \"exampleService\",\n        Source:     \"exampleSource\",\n        Provider:   \"exampleProvider\",\n        SchemaType: \"exampleSchemaType\",\n        JsonSchema: map[string]interface{}{\n            \"type\": \"object\",\n            \"properties\": map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": []interface{}{\"field1\"},\n        },\n    }\n\n    schema, err := entity.NewSchema(schemaProps)\n    if err != nil {\n        fmt.Println(\"Error creating schema:\", err)\n        return\n    }\n\n    fmt.Printf(\"Schema: %+v\\n\", schema)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/#converting-schema-entities-to-maps","title":"Converting Schema Entities to Maps","text":"<p>The <code>ToMap</code> method converts a <code>Schema</code> entity to a <code>map[string]interface{}</code> representation.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n)\n\nfunc main() {\n    schemaProps := entity.SchemaProps{\n        Service:    \"exampleService\",\n        Source:     \"exampleSource\",\n        Provider:   \"exampleProvider\",\n        SchemaType: \"exampleSchemaType\",\n        JsonSchema: map[string]interface{}{\n            \"type\": \"object\",\n            \"properties\": map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": []interface{}{\"field1\"},\n        },\n    }\n\n    schema, err := entity.NewSchema(schemaProps)\n    if err != nil {\n        fmt.Println(\"Error creating schema:\", err)\n        return\n    }\n\n    schemaMap, err := schema.ToMap()\n    if err != nil {\n        fmt.Println(\"Error converting schema to map:\", err)\n        return\n    }\n\n    fmt.Printf(\"Schema as map: %+v\\n\", schemaMap)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/#validating-schema-entities","title":"Validating Schema Entities","text":"<p>The <code>isValid</code> method ensures that all required fields of a <code>Schema</code> entity are set.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n)\n\nfunc main() {\n    schemaProps := entity.SchemaProps{\n        Service:    \"exampleService\",\n        Source:     \"exampleSource\",\n        Provider:   \"exampleProvider\",\n        SchemaType: \"exampleSchemaType\",\n        JsonSchema: map[string]interface{}{\n            \"type\": \"object\",\n            \"properties\": map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": []interface{}{\"field1\"},\n        },\n    }\n\n    schema, err := entity.NewSchema(schemaProps)\n    if err != nil {\n        fmt.Println(\"Error creating schema:\", err)\n        return\n    }\n\n    err = schema.isValid()\n    if err != nil {\n        fmt.Println(\"Schema is invalid:\", err)\n        return\n    }\n\n    fmt.Println(\"Schema is valid\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>entity</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-entities-schema-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/#errors","title":"Errors","text":"<ul> <li><code>ErrMissingID</code>: Returned when the ID of a <code>Schema</code> is missing.</li> <li><code>ErrMissingService</code>: Returned when the service of a <code>Schema</code> is missing.</li> <li><code>ErrMissingSource</code>: Returned when the source of a <code>Schema</code> is missing.</li> <li><code>ErrMissingProvider</code>: Returned when the provider of a <code>Schema</code> is missing.</li> <li><code>ErrMissingSchemaType</code>: Returned when the schema type of a <code>Schema</code> is missing.</li> <li><code>ErrJsonSchemaInvalid</code>: Returned when the JSON schema of a <code>Schema</code> is invalid.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#entity","title":"entity","text":"<pre><code>import \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>Variables</li> <li>type JsonSchema</li> <li>func (js JsonSchema) ToMap() (map[string]interface{}, error)</li> <li>type Schema</li> <li>func NewSchema(schemaProps SchemaProps) (*Schema, error)</li> <li>func (s *Schema) GetEntityID() string</li> <li>func (s *Schema) GetVersionIDData() map[string]interface{}</li> <li>func (s *Schema) MapToEntity(doc map[string]interface{}) (*Schema, error)</li> <li>func (s *Schema) SetCreatedAt(createdAt string)</li> <li>func (s *Schema) SetJsonSchema(jsonSchema map[string]interface{})</li> <li>func (s *Schema) SetSchemaVersionID(versionID uuid.ID)</li> <li>func (s *Schema) ToMap() (map[string]interface{}, error)</li> <li>type SchemaProps</li> <li>type SchemaRepositoryInterface</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#variables","title":"Variables","text":"<pre><code>var (\n    // ErrMissingID is returned when the ID of a Schema is missing.\n    ErrMissingID = errors.New(\"invalid ID\")\n\n    // ErrMissingService is returned when the service of a Schema is missing.\n    ErrMissingService = errors.New(\"invalid service\")\n\n    // ErrMissingSource is returned when the source of a Schema is missing.\n    ErrMissingSource = errors.New(\"invalid source\")\n\n    // ErrMissingProvider is returned when the provider of a Schema is missing.\n    ErrMissingProvider = errors.New(\"invalid provider\")\n\n    // ErrMissingSchemaType is returned when the schema type of a Schema is missing.\n    ErrMissingSchemaType = errors.New(\"invalid schema type\")\n\n    // ErrJsonSchemaInvalid is returned when the JSON schema of a Schema is invalid.\n    ErrJsonSchemaInvalid = errors.New(\"invalid JSON schema\")\n)\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#type-jsonschema","title":"type JsonSchema","text":"<pre><code>type JsonSchema struct {\n    Required   []string               `bson:\"required\"`   // Required lists the required fields in the JSON schema.\n    Properties map[string]interface{} `bson:\"properties\"` // Properties lists the properties in the JSON schema.\n    JsonType   string                 `bson:\"type\"`       // JsonType specifies the type of JSON schema.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#func-jsonschema-tomap","title":"func (JsonSchema) ToMap","text":"<pre><code>func (js JsonSchema) ToMap() (map[string]interface{}, error)\n</code></pre> <p>ToMap converts the JsonSchema to a map[string]interface{}.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#type-schema","title":"type Schema","text":"<p>Schema represents a schema entity with various attributes such as service, source, provider, and schema type.</p> <pre><code>type Schema struct {\n    ID              md5id.ID   `bson:\"_id\"`               // ID is the unique identifier of the Schema entity.\n    Service         string     `bson:\"service\"`           // Service is the service name of the Schema entity.\n    Source          string     `bson:\"source\"`            // Source is the source name of the Schema entity.\n    Provider        string     `bson:\"provider\"`          // Provider is the provider name of the Schema entity.\n    SchemaType      string     `bson:\"schema_type\"`       // SchemaType is the type of the schema entity.\n    JsonSchema      JsonSchema `bson:\"json_schema\"`       // JsonSchema is the JSON schema of the Schema entity.\n    SchemaVersionID uuid.ID    `bson:\"schema_version_id\"` // SchemaVersionID is the unique identifier of the schema version.\n    CreatedAt       string     `bson:\"created_at\"`        // CreatedAt is the timestamp when the Schema entity was created.\n    UpdatedAt       string     `bson:\"updated_at\"`        // UpdatedAt is the timestamp when the Schema entity was last updated.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#func-newschema","title":"func NewSchema","text":"<pre><code>func NewSchema(schemaProps SchemaProps) (*Schema, error)\n</code></pre> <p>NewSchema creates a new Schema entity with the provided properties.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#func-schema-getentityid","title":"func (*Schema) GetEntityID","text":"<pre><code>func (s *Schema) GetEntityID() string\n</code></pre> <p>GetEntityID returns the ID of the Schema entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#func-schema-getversioniddata","title":"func (*Schema) GetVersionIDData","text":"<pre><code>func (s *Schema) GetVersionIDData() map[string]interface{}\n</code></pre> <p>GetVersionIDData constructs a map with the service, source, provider, and schema type information.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#func-schema-maptoentity","title":"func (*Schema) MapToEntity","text":"<pre><code>func (s *Schema) MapToEntity(doc map[string]interface{}) (*Schema, error)\n</code></pre> <p>MapToEntity converts a map to a Schema entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#func-schema-setcreatedat","title":"func (*Schema) SetCreatedAt","text":"<pre><code>func (s *Schema) SetCreatedAt(createdAt string)\n</code></pre> <p>SetCreatedAt sets the created at timestamp of the Schema entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#func-schema-setjsonschema","title":"func (*Schema) SetJsonSchema","text":"<pre><code>func (s *Schema) SetJsonSchema(jsonSchema map[string]interface{})\n</code></pre> <p>SetJsonSchema sets the JSON schema of the Schema entity.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#func-schema-setschemaversionid","title":"func (*Schema) SetSchemaVersionID","text":"<pre><code>func (s *Schema) SetSchemaVersionID(versionID uuid.ID)\n</code></pre> <p>SetSchemaVersionID sets the schema version ID.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#func-schema-tomap","title":"func (*Schema) ToMap","text":"<pre><code>func (s *Schema) ToMap() (map[string]interface{}, error)\n</code></pre> <p>ToMap converts the Schema entity to a map representation.</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#type-schemaprops","title":"type SchemaProps","text":"<p>SchemaProps represents the properties needed to create a new Schema entity.</p> <pre><code>type SchemaProps struct {\n    Service    string\n    Source     string\n    Provider   string\n    SchemaType string\n    JsonSchema map[string]interface{}\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/entities/schema-vault/docs/godoc/#type-schemarepositoryinterface","title":"type SchemaRepositoryInterface","text":"<pre><code>type SchemaRepositoryInterface interface {\n    Create(schema *Schema) error\n    FindByID(id string) (*Schema, error)\n    FindAll() ([]*Schema, error)\n    Update(schema *Schema) error\n    Delete(id string) error\n    FindAllByServiceAndProvider(provider, service string) ([]*Schema, error)\n    FindAllBySourceAndProvider(provider, source string) ([]*Schema, error)\n    FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*Schema, error)\n    FindOneByServiceAndSourceAndProviderAndSchemaType(provider, service, source, schemaType string) (*Schema, error)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/","title":"events-router/repository","text":"<p><code>events-router/repository</code> is a Go library that provides a repository layer for managing <code>EventOrder</code> entities stored in a document-based database. This library includes functionalities for creating, reading, updating, and deleting <code>EventOrder</code> entities, as well as querying <code>EventOrder</code> entities based on different attributes.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/#features","title":"Features","text":"<ul> <li>Create, read, and delete <code>EventOrder</code> entities in the document-based database.</li> <li>Query <code>EventOrder</code> entities by ID.</li> <li>Handle collection and database existence checks.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/#creating-an-eventorderrepository","title":"Creating an EventOrderRepository","text":"<p>The <code>EventOrderRepository</code> struct provides methods to interact with the <code>EventOrder</code> entities stored in the document-based database.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/clients/resources/go-docdb/client\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/ddd/domain/entities/events-router/entity\"\n    \"libs/golang/ddd/domain/repositories/events-router/repository\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"test_database\")\n    client := client.NewClient(db)\n    repo := repository.NewEventOrderRepository(client, \"test_database\")\n\n    eventOrderProps := entity.EventOrderProps{\n        Service:      \"exampleService\",\n        Source:       \"exampleSource\",\n        Provider:     \"exampleProvider\",\n        ProcessingID: \"xyz789\",\n        InputID:      \"input-id\",\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n    }\n\n    eventOrder, err := entity.NewEventOrder(eventOrderProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = repo.Create(eventOrder)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"EventOrder created: %+v\\n\", eventOrder)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/#retrieving-an-eventorder-by-id","title":"Retrieving an EventOrder by ID","text":"<p>Use the <code>FindByID</code> method to retrieve an <code>EventOrder</code> by its ID.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/clients/resources/go-docdb/client\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/ddd/domain/repositories/events-router/repository\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"test_database\")\n    client := client.NewClient(db)\n    repo := repository.NewEventOrderRepository(client, \"test_database\")\n\n    eventOrder, err := repo.FindByID(\"9b97f68f63f3faa91d2d6558428f1863\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"EventOrder retrieved: %+v\\n\", eventOrder)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/#deleting-an-eventorder","title":"Deleting an EventOrder","text":"<p>Use the <code>Delete</code> method to remove an <code>EventOrder</code> by its ID.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/clients/resources/go-docdb/client\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/ddd/domain/repositories/events-router/repository\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"test_database\")\n    client := client.NewClient(db)\n    repo := repository.NewEventOrderRepository(client, \"test_database\")\n\n    err := repo.Delete(\"9b97f68f63f3faa91d2d6558428f1863\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"EventOrder deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/#retrieving-all-eventorders","title":"Retrieving All EventOrders","text":"<p>Use the <code>FindAll</code> method to retrieve all <code>EventOrder</code> entities.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/clients/resources/go-docdb/client\"\n    \"libs/golang/database/go-docdb/database\"\n    \"libs/golang/ddd/domain/repositories/events-router/repository\"\n)\n\nfunc main() {\n    db := database.NewInMemoryDocBD(\"test_database\")\n    client := client.NewClient(db)\n    repo := repository.NewEventOrderRepository(client, \"test_database\")\n\n    eventOrders, err := repo.FindAll()\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, eventOrder := range eventOrders {\n        fmt.Printf(\"EventOrder: %+v\\n\", eventOrder)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/#testing","title":"Testing","text":"<p>To run the tests for the <code>repository</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-repositories-database-in-memory-go-docdb-events-router\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/docs/godoc/#repository","title":"repository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/docs/godoc/#index","title":"Index","text":"<ul> <li>type EventOrderRepository</li> <li>func NewEventOrderRepository(client *client.Client, database string) *EventOrderRepository</li> <li>func (r *EventOrderRepository) Create(eventOrder *entity.EventOrder) error</li> <li>func (r *EventOrderRepository) Delete(id string) error</li> <li>func (r *EventOrderRepository) FindAll() ([]*entity.EventOrder, error)</li> <li>func (r *EventOrderRepository) FindByID(id string) (*entity.EventOrder, error)</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/docs/godoc/#type-eventorderrepository","title":"type EventOrderRepository","text":"<p>EventOrderRepository is a repository for EventOrder entities.</p> <pre><code>type EventOrderRepository struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/docs/godoc/#func-neweventorderrepository","title":"func NewEventOrderRepository","text":"<pre><code>func NewEventOrderRepository(client *client.Client, database string) *EventOrderRepository\n</code></pre> <p>NewEventOrderRepository creates a new instance of EventOrderRepository.</p> <p>Parameters:</p> <ul> <li>client: The client instance to interact with the document-based database.</li> <li>database: The name of the database.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the newly created EventOrderRepository instance.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/docs/godoc/#func-eventorderrepository-create","title":"func (*EventOrderRepository) Create","text":"<pre><code>func (r *EventOrderRepository) Create(eventOrder *entity.EventOrder) error\n</code></pre> <p>Create saves a new EventOrder to the repository.</p> <p>Parameters:</p> <ul> <li>eventOrder: The EventOrder entity to save.</li> </ul> <p>Returns:</p> <ul> <li>An error if the EventOrder already exists or cannot be saved.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/docs/godoc/#func-eventorderrepository-delete","title":"func (*EventOrderRepository) Delete","text":"<pre><code>func (r *EventOrderRepository) Delete(id string) error\n</code></pre> <p>Delete removes an EventOrder by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the EventOrder to delete.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document cannot be found or deleted.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/docs/godoc/#func-eventorderrepository-findall","title":"func (*EventOrderRepository) FindAll","text":"<pre><code>func (r *EventOrderRepository) FindAll() ([]*entity.EventOrder, error)\n</code></pre> <p>FindAll retrieves all EventOrders from the repository.</p> <p>Returns:</p> <ul> <li>A slice of pointers to EventOrder entities.</li> <li>An error if the documents cannot be retrieved or mapped to EventOrder entities.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/in-memory/go-docdb/events-router/docs/godoc/#func-eventorderrepository-findbyid","title":"func (*EventOrderRepository) FindByID","text":"<pre><code>func (r *EventOrderRepository) FindByID(id string) (*entity.EventOrder, error)\n</code></pre> <p>FindByID retrieves an EventOrder by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the EventOrder to retrieve.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the EventOrder if found, otherwise nil.</li> <li>An error if the document is not found or cannot be mapped to an EventOrder entity.</li> </ul> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/","title":"config-vault/mockrepository","text":"<p><code>config-vault/mockrepository</code> is a Go library that provides mock implementations of the repository interfaces used in the <code>config-vault</code> domain. This library is primarily used for testing purposes, allowing you to simulate repository behaviors without needing a real database.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/#features","title":"Features","text":"<ul> <li>Mock implementation of <code>ConfigRepositoryInterface</code>.</li> <li>Support for creating, finding, updating, and deleting configuration entities.</li> <li>Support for querying configurations based on various attributes.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/#mocking-a-config-repository","title":"Mocking a Config Repository","text":"<p>The <code>ConfigRepositoryMock</code> struct provides methods to simulate interactions with configuration entities.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"testing\"\n\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/mock/config-vault/repository\"\n    \"github.com/stretchr/testify/mock\"\n)\n\nfunc main() {\n    repoMock := new(mockrepository.ConfigRepositoryMock)\n\n    configProps := entity.ConfigProps{\n        Active:    true,\n        Service:   \"exampleService\",\n        Source:    \"exampleSource\",\n        Provider:  \"exampleProvider\",\n        DependsOn: []map[string]interface{}{\n            {\"service\": \"dependencyService\", \"source\": \"dependencySource\"},\n        },\n    }\n\n    config, err := entity.NewConfig(configProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repoMock.On(\"Create\", config).Return(nil)\n\n    err = repoMock.Create(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Mocked config creation: %+v\\n\", config)\n    repoMock.AssertExpectations(&amp;testing.T{})\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#mockrepository","title":"mockrepository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/mock/config-vault/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type ConfigRepositoryMock</li> <li>func (m *ConfigRepositoryMock) Create(config *entity.Config) error</li> <li>func (m *ConfigRepositoryMock) Delete(id string) error</li> <li>func (m *ConfigRepositoryMock) FindAll() ([]*entity.Config, error)</li> <li>func (m *ConfigRepositoryMock) FindAllByProviderAndDependsOn(provider, service, source string) ([]*entity.Config, error)</li> <li>func (m *ConfigRepositoryMock) FindAllByServiceAndProvider(provider, service string) ([]*entity.Config, error)</li> <li>func (m *ConfigRepositoryMock) FindAllByServiceAndProviderAndActive(service, provider string, active bool) ([]*entity.Config, error)</li> <li>func (m *ConfigRepositoryMock) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Config, error)</li> <li>func (m *ConfigRepositoryMock) FindAllBySourceAndProvider(provider, source string) ([]*entity.Config, error)</li> <li>func (m *ConfigRepositoryMock) FindByID(id string) (*entity.Config, error)</li> <li>func (m *ConfigRepositoryMock) Update(config *entity.Config) error</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#type-configrepositorymock","title":"type ConfigRepositoryMock","text":"<p>ConfigRepositoryMock is a mock implementation of ConfigRepositoryInterface</p> <pre><code>type ConfigRepositoryMock struct {\n    mock.Mock\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-create","title":"func (*ConfigRepositoryMock) Create","text":"<pre><code>func (m *ConfigRepositoryMock) Create(config *entity.Config) error\n</code></pre> <p>Create is a mock implementation of ConfigRepositoryInterface's Create method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-delete","title":"func (*ConfigRepositoryMock) Delete","text":"<pre><code>func (m *ConfigRepositoryMock) Delete(id string) error\n</code></pre> <p>Delete is a mock implementation of ConfigRepositoryInterface's Delete method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-findall","title":"func (*ConfigRepositoryMock) FindAll","text":"<pre><code>func (m *ConfigRepositoryMock) FindAll() ([]*entity.Config, error)\n</code></pre> <p>FindAll is a mock implementation of ConfigRepositoryInterface's FindAll method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-findallbyprovideranddependson","title":"func (*ConfigRepositoryMock) FindAllByProviderAndDependsOn","text":"<pre><code>func (m *ConfigRepositoryMock) FindAllByProviderAndDependsOn(provider, service, source string) ([]*entity.Config, error)\n</code></pre> <p>FindAllByProviderAndDependsOn is a mock implementation of ConfigRepositoryInterface's FindAllByProviderAndDependsOn method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-findallbyserviceandprovider","title":"func (*ConfigRepositoryMock) FindAllByServiceAndProvider","text":"<pre><code>func (m *ConfigRepositoryMock) FindAllByServiceAndProvider(provider, service string) ([]*entity.Config, error)\n</code></pre> <p>FindAllByServiceAndProvider is a mock implementation of ConfigRepositoryInterface's FindAllByServiceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-findallbyserviceandproviderandactive","title":"func (*ConfigRepositoryMock) FindAllByServiceAndProviderAndActive","text":"<pre><code>func (m *ConfigRepositoryMock) FindAllByServiceAndProviderAndActive(service, provider string, active bool) ([]*entity.Config, error)\n</code></pre> <p>FindAllByServiceAndProviderAndActive is a mock implementation of ConfigRepositoryInterface's FindAllByServiceAndProviderAndActive method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-findallbyserviceandsourceandprovider","title":"func (*ConfigRepositoryMock) FindAllByServiceAndSourceAndProvider","text":"<pre><code>func (m *ConfigRepositoryMock) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Config, error)\n</code></pre> <p>FindAllByServiceAndSourceAndProvider is a mock implementation of ConfigRepositoryInterface's FindAllByServiceAndSourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-findallbysourceandprovider","title":"func (*ConfigRepositoryMock) FindAllBySourceAndProvider","text":"<pre><code>func (m *ConfigRepositoryMock) FindAllBySourceAndProvider(provider, source string) ([]*entity.Config, error)\n</code></pre> <p>FindAllBySourceAndProvider is a mock implementation of ConfigRepositoryInterface's FindAllBySourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-findbyid","title":"func (*ConfigRepositoryMock) FindByID","text":"<pre><code>func (m *ConfigRepositoryMock) FindByID(id string) (*entity.Config, error)\n</code></pre> <p>FindByID is a mock implementation of ConfigRepositoryInterface's FindByID method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/config-vault/docs/godoc/#func-configrepositorymock-update","title":"func (*ConfigRepositoryMock) Update","text":"<pre><code>func (m *ConfigRepositoryMock) Update(config *entity.Config) error\n</code></pre> <p>Update is a mock implementation of ConfigRepositoryInterface's Update method</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/","title":"events-router/mockrepository","text":"<p><code>events-router/mockrepository</code> is a Go library that provides mock implementations of the repository interfaces used in the <code>events-router</code> domain. This library is primarily used for testing purposes, allowing you to simulate repository behaviors without needing a real database.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/#features","title":"Features","text":"<ul> <li>Mock implementation of <code>EventOrderRepositoryInterface</code>.</li> <li>Support for creating, finding, updating, and deleting event order entities.</li> <li>Support for querying event orders based on various attributes.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/#mocking-an-event-order-repository","title":"Mocking an Event Order Repository","text":"<p>The <code>EventOrderRepositoryMock</code> struct provides methods to simulate interactions with event order entities.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"testing\"\n\n    \"libs/golang/ddd/domain/entities/events-router/entity\"\n    \"libs/golang/ddd/domain/repositories/mock/events-router/repository\"\n    \"github.com/stretchr/testify/mock\"\n)\n\nfunc main() {\n    repoMock := new(mockrepository.EventOrderRepositoryMock)\n\n    eventOrderProps := entity.EventOrderProps{\n        Service:      \"test_service\",\n        Source:       \"test_source\",\n        Provider:     \"test_provider\",\n        ProcessingID: \"processing_id\",\n        InputID:      \"input-id\",\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n    }\n\n    eventOrder, err := entity.NewEventOrder(eventOrderProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repoMock.On(\"Create\", eventOrder).Return(nil)\n\n    err = repoMock.Create(eventOrder)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Mocked event order creation: %+v\\n\", eventOrder)\n    repoMock.AssertExpectations(&amp;testing.T{})\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/#mock-implementation-details","title":"Mock Implementation Details","text":"<p>The <code>EventOrderRepositoryMock</code> struct provides mock implementations for the following methods:</p> <ul> <li><code>Create</code>: Simulates the creation of an event order entity.</li> <li><code>FindByID</code>: Simulates finding an event order entity by its ID.</li> <li><code>FindAll</code>: Simulates finding all event order entities.</li> <li><code>Delete</code>: Simulates deleting an event order entity by its ID.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/#example-test-using-the-mock","title":"Example Test Using the Mock","text":"<p>Here is an example of how to use the <code>EventOrderRepositoryMock</code> in a test:</p> <pre><code>package main\n\nimport (\n    \"testing\"\n\n    \"libs/golang/ddd/domain/entities/events-router/entity\"\n    \"libs/golang/ddd/domain/repositories/mock/events-router/repository\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestEventOrderRepositoryMock(t *testing.T) {\n    repoMock := new(mockrepository.EventOrderRepositoryMock)\n\n    eventOrderProps := entity.EventOrderProps{\n        Service:      \"test_service\",\n        Source:       \"test_source\",\n        Provider:     \"test_provider\",\n        ProcessingID: \"processing_id\",\n        InputID:      \"input-id\",\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n    }\n\n    eventOrder, err := entity.NewEventOrder(eventOrderProps)\n    assert.NoError(t, err)\n\n    repoMock.On(\"Create\", eventOrder).Return(nil)\n\n    err = repoMock.Create(eventOrder)\n    assert.NoError(t, err)\n\n    repoMock.AssertExpectations(t)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/docs/godoc/#mockrepository","title":"mockrepository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/mock/events-router/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/docs/godoc/#index","title":"Index","text":"<ul> <li>type EventOrderRepositoryMock</li> <li>func (m *EventOrderRepositoryMock) Create(event *entity.EventOrder) error</li> <li>func (m *EventOrderRepositoryMock) Delete(id string) error</li> <li>func (m *EventOrderRepositoryMock) FindAll() ([]*entity.EventOrder, error)</li> <li>func (m *EventOrderRepositoryMock) FindByID(id string) (*entity.EventOrder, error)</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/docs/godoc/#type-eventorderrepositorymock","title":"type EventOrderRepositoryMock","text":"<pre><code>type EventOrderRepositoryMock struct {\n    mock.Mock\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/docs/godoc/#func-eventorderrepositorymock-create","title":"func (*EventOrderRepositoryMock) Create","text":"<pre><code>func (m *EventOrderRepositoryMock) Create(event *entity.EventOrder) error\n</code></pre> <p>Create is a mock implementation of EventOrderRepositoryInterface's Create method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/docs/godoc/#func-eventorderrepositorymock-delete","title":"func (*EventOrderRepositoryMock) Delete","text":"<pre><code>func (m *EventOrderRepositoryMock) Delete(id string) error\n</code></pre> <p>Update is a mock implementation of EventOrderRepositoryInterface's Update method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/docs/godoc/#func-eventorderrepositorymock-findall","title":"func (*EventOrderRepositoryMock) FindAll","text":"<pre><code>func (m *EventOrderRepositoryMock) FindAll() ([]*entity.EventOrder, error)\n</code></pre> <p>FindAll is a mock implementation of EventOrderRepositoryInterface's FindAll method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/events-router/docs/godoc/#func-eventorderrepositorymock-findbyid","title":"func (*EventOrderRepositoryMock) FindByID","text":"<pre><code>func (m *EventOrderRepositoryMock) FindByID(id string) (*entity.EventOrder, error)\n</code></pre> <p>FindByID is a mock implementation of EventOrderRepositoryInterface's FindByID method</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/","title":"input-broker/mockrepository","text":"<p><code>input-broker/mockrepository</code> is a Go library that provides mock implementations of the repository interfaces used in the <code>input-broker</code> domain. This library is primarily used for testing purposes, allowing you to simulate repository behaviors without needing a real database.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/#features","title":"Features","text":"<ul> <li>Mock implementation of <code>InputRepositoryInterface</code>.</li> <li>Support for creating, finding, updating, and deleting input entities.</li> <li>Support for querying inputs based on various attributes.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/#mocking-an-input-repository","title":"Mocking an Input Repository","text":"<p>The <code>InputRepositoryMock</code> struct provides methods to simulate interactions with input entities.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"testing\"\n\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    \"libs/golang/ddd/domain/repositories/mock/input-broker/repository\"\n    \"github.com/stretchr/testify/mock\"\n)\n\nfunc main() {\n    repoMock := new(mockrepository.InputRepositoryMock)\n\n    inputProps := entity.InputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n    }\n\n    input, err := entity.NewInput(inputProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repoMock.On(\"Create\", input).Return(nil)\n\n    err = repoMock.Create(input)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Mocked input creation: %+v\\n\", input)\n    repoMock.AssertExpectations(&amp;testing.T{})\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/#mock-implementation-details","title":"Mock Implementation Details","text":"<p>The <code>InputRepositoryMock</code> struct provides mock implementations for the following methods:</p> <ul> <li><code>Create</code>: Simulates the creation of an input entity.</li> <li><code>FindByID</code>: Simulates finding an input entity by its ID.</li> <li><code>FindAll</code>: Simulates finding all input entities.</li> <li><code>Update</code>: Simulates updating an input entity.</li> <li><code>Delete</code>: Simulates deleting an input entity.</li> <li><code>FindAllByServiceAndProvider</code>: Simulates finding all input entities by service and provider.</li> <li><code>FindAllBySourceAndProvider</code>: Simulates finding all input entities by source and provider.</li> <li><code>FindAllByServiceAndSourceAndProvider</code>: Simulates finding all input entities by service, source, and provider.</li> <li><code>FindAllByStatusAndProvider</code>: Simulates finding all input entities by status and provider.</li> <li><code>FindAllByStatusAndServiceAndProvider</code>: Simulates finding all input entities by status, service, and provider.</li> <li><code>FindAllByStatusAndSourceAndProvider</code>: Simulates finding all input entities by status, source, and provider.</li> <li><code>FindAllByStatusAndServiceAndSourceAndProvider</code>: Simulates finding all input entities by status, service, source, and provider.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/#example-test-using-the-mock","title":"Example Test Using the Mock","text":"<p>Here is an example of how to use the <code>InputRepositoryMock</code> in a test:</p> <pre><code>package main\n\nimport (\n    \"testing\"\n\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    \"libs/golang/ddd/domain/repositories/mock/input-broker/repository\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestInputRepositoryMock(t *testing.T) {\n    repoMock := new(mockrepository.InputRepositoryMock)\n\n    inputProps := entity.InputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n    }\n\n    input, err := entity.NewInput(inputProps)\n    assert.NoError(t, err)\n\n    repoMock.On(\"Create\", input).Return(nil)\n\n    err = repoMock.Create(input)\n    assert.NoError(t, err)\n\n    repoMock.AssertExpectations(t)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#mockrepository","title":"mockrepository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/mock/input-broker/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>type InputRepositoryMock</li> <li>func (m *InputRepositoryMock) Create(input *entity.Input) error</li> <li>func (m *InputRepositoryMock) Delete(id string) error</li> <li>func (m *InputRepositoryMock) FindAll() ([]*entity.Input, error)</li> <li>func (m *InputRepositoryMock) FindAllByServiceAndProvider(provider, service string) ([]*entity.Input, error)</li> <li>func (m *InputRepositoryMock) FindAllByServiceAndSourceAndProvider(provider, service, source string) ([]*entity.Input, error)</li> <li>func (m *InputRepositoryMock) FindAllBySourceAndProvider(provider, source string) ([]*entity.Input, error)</li> <li>func (m *InputRepositoryMock) FindAllByStatusAndProvider(provider string, status int) ([]*entity.Input, error)</li> <li>func (m *InputRepositoryMock) FindAllByStatusAndServiceAndProvider(provider, service string, status int) ([]*entity.Input, error)</li> <li>func (m *InputRepositoryMock) FindAllByStatusAndServiceAndSourceAndProvider(provider, service, source string, status int) ([]*entity.Input, error)</li> <li>func (m *InputRepositoryMock) FindAllByStatusAndSourceAndProvider(provider, source string, status int) ([]*entity.Input, error)</li> <li>func (m *InputRepositoryMock) FindByID(id string) (*entity.Input, error)</li> <li>func (m *InputRepositoryMock) Update(input *entity.Input) error</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#type-inputrepositorymock","title":"type InputRepositoryMock","text":"<p>InputRepositoryMock is a mock implementation of InputRepositoryInterface</p> <pre><code>type InputRepositoryMock struct {\n    mock.Mock\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-create","title":"func (*InputRepositoryMock) Create","text":"<pre><code>func (m *InputRepositoryMock) Create(input *entity.Input) error\n</code></pre> <p>Create is a mock implementation of InputRepositoryInterface's Create method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-delete","title":"func (*InputRepositoryMock) Delete","text":"<pre><code>func (m *InputRepositoryMock) Delete(id string) error\n</code></pre> <p>Delete is a mock implementation of InputRepositoryInterface's Delete method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-findall","title":"func (*InputRepositoryMock) FindAll","text":"<pre><code>func (m *InputRepositoryMock) FindAll() ([]*entity.Input, error)\n</code></pre> <p>FindAll is a mock implementation of InputRepositoryInterface's FindAll method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-findallbyserviceandprovider","title":"func (*InputRepositoryMock) FindAllByServiceAndProvider","text":"<pre><code>func (m *InputRepositoryMock) FindAllByServiceAndProvider(provider, service string) ([]*entity.Input, error)\n</code></pre> <p>FindAllByServiceAndProvider is a mock implementation of InputRepositoryInterface's FindAllByServiceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-findallbyserviceandsourceandprovider","title":"func (*InputRepositoryMock) FindAllByServiceAndSourceAndProvider","text":"<pre><code>func (m *InputRepositoryMock) FindAllByServiceAndSourceAndProvider(provider, service, source string) ([]*entity.Input, error)\n</code></pre> <p>FindAllByServiceAndSourceAndProvider is a mock implementation of InputRepositoryInterface's FindAllByServiceAndSourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-findallbysourceandprovider","title":"func (*InputRepositoryMock) FindAllBySourceAndProvider","text":"<pre><code>func (m *InputRepositoryMock) FindAllBySourceAndProvider(provider, source string) ([]*entity.Input, error)\n</code></pre> <p>FindAllBySourceAndProvider is a mock implementation of InputRepositoryInterface's FindAllBySourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-findallbystatusandprovider","title":"func (*InputRepositoryMock) FindAllByStatusAndProvider","text":"<pre><code>func (m *InputRepositoryMock) FindAllByStatusAndProvider(provider string, status int) ([]*entity.Input, error)\n</code></pre> <p>FindAllByStatusAndProvider is a mock implementation of InputRepositoryInterface's FindAllByStatusAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-findallbystatusandserviceandprovider","title":"func (*InputRepositoryMock) FindAllByStatusAndServiceAndProvider","text":"<pre><code>func (m *InputRepositoryMock) FindAllByStatusAndServiceAndProvider(provider, service string, status int) ([]*entity.Input, error)\n</code></pre> <p>FindAllByStatusAndServiceAndProvider is a mock implementation of InputRepositoryInterface's FindAllByStatusAndServiceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-findallbystatusandserviceandsourceandprovider","title":"func (*InputRepositoryMock) FindAllByStatusAndServiceAndSourceAndProvider","text":"<pre><code>func (m *InputRepositoryMock) FindAllByStatusAndServiceAndSourceAndProvider(provider, service, source string, status int) ([]*entity.Input, error)\n</code></pre> <p>FindAllByStatusAndServiceAndSourceAndProvider is a mock implementation of InputRepositoryInterface's FindAllByStatusAndServiceAndSourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-findallbystatusandsourceandprovider","title":"func (*InputRepositoryMock) FindAllByStatusAndSourceAndProvider","text":"<pre><code>func (m *InputRepositoryMock) FindAllByStatusAndSourceAndProvider(provider, source string, status int) ([]*entity.Input, error)\n</code></pre> <p>FindAllByStatusAndSourceAndProvider is a mock implementation of InputRepositoryInterface's FindAllByStatusAndSourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-findbyid","title":"func (*InputRepositoryMock) FindByID","text":"<pre><code>func (m *InputRepositoryMock) FindByID(id string) (*entity.Input, error)\n</code></pre> <p>FindByID is a mock implementation of InputRepositoryInterface's FindByID method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/input-broker/docs/godoc/#func-inputrepositorymock-update","title":"func (*InputRepositoryMock) Update","text":"<pre><code>func (m *InputRepositoryMock) Update(input *entity.Input) error\n</code></pre> <p>Update is a mock implementation of InputRepositoryInterface's Update method</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/","title":"output-vault/mockrepository","text":"<p><code>output-vault/mockrepository</code> is a Go library that provides mock implementations of the repository interfaces used in the <code>output-vault</code> domain. This library is primarily used for testing purposes, allowing you to simulate repository behaviors without needing a real database.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/#features","title":"Features","text":"<ul> <li>Mock implementation of <code>OutputRepositoryInterface</code>.</li> <li>Support for creating, finding, updating, and deleting output entities.</li> <li>Support for querying outputs based on various attributes.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/#mocking-an-output-repository","title":"Mocking an Output Repository","text":"<p>The <code>OutputRepositoryMock</code> struct provides methods to simulate interactions with output entities.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"testing\"\n\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/mock/output-vault/repository\"\n    \"github.com/stretchr/testify/mock\"\n)\n\nfunc main() {\n    repoMock := new(mockrepository.OutputRepositoryMock)\n\n    outputProps := entity.OutputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n        Metadata: map[string]interface{}{\n            \"input_id\": \"input_id\",\n            \"input\": map[string]interface{}{\n                \"data\": map[string]interface{}{\n                    \"input1\": \"value1\",\n                },\n                \"processing_id\":        \"processing_id\",\n                \"processing_timestamp\": \"2023-06-01 00:00:00\",\n            },\n        },\n    }\n\n    output, err := entity.NewOutput(outputProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repoMock.On(\"Create\", output).Return(nil)\n\n    err = repoMock.Create(output)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Mocked output creation: %+v\\n\", output)\n    repoMock.AssertExpectations(&amp;testing.T{})\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/#mock-implementation-details","title":"Mock Implementation Details","text":"<p>The <code>OutputRepositoryMock</code> struct provides mock implementations for the following methods:</p> <ul> <li><code>Create</code>: Simulates the creation of an output entity.</li> <li><code>FindByID</code>: Simulates finding an output entity by its ID.</li> <li><code>FindAll</code>: Simulates finding all output entities.</li> <li><code>Update</code>: Simulates updating an output entity.</li> <li><code>Delete</code>: Simulates deleting an output entity.</li> <li><code>FindAllByServiceAndProvider</code>: Simulates finding all output entities by service and provider.</li> <li><code>FindAllBySourceAndProvider</code>: Simulates finding all output entities by source and provider.</li> <li><code>FindAllByServiceAndSourceAndProvider</code>: Simulates finding all output entities by service, source, and provider.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/#example-test-using-the-mock","title":"Example Test Using the Mock","text":"<p>Here is an example of how to use the <code>OutputRepositoryMock</code> in a test:</p> <pre><code>package main\n\nimport (\n    \"testing\"\n\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/mock/output-vault/repository\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestOutputRepositoryMock(t *testing.T) {\n    repoMock := new(mockrepository.OutputRepositoryMock)\n\n    outputProps := entity.OutputProps{\n        Data: map[string]interface{}{\n            \"field1\": \"value1\",\n            \"field2\": \"value2\",\n        },\n        Service:  \"test_service\",\n        Source:   \"test_source\",\n        Provider: \"test_provider\",\n        Metadata: map[string]interface{}{\n            \"input_id\": \"input_id\",\n            \"input\": map[string]interface{}{\n                \"data\": map[string]interface{}{\n                    \"input1\": \"value1\",\n                },\n                \"processing_id\":        \"processing_id\",\n                \"processing_timestamp\": \"2023-06-01 00:00:00\",\n            },\n        },\n    }\n\n    output, err := entity.NewOutput(outputProps)\n    assert.NoError(t, err)\n\n    repoMock.On(\"Create\", output).Return(nil)\n\n    err = repoMock.Create(output)\n    assert.NoError(t, err)\n\n    repoMock.AssertExpectations(t)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#mockrepository","title":"mockrepository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/mock/output-vault/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type OutputRepositoryMock</li> <li>func (m *OutputRepositoryMock) Create(output *entity.Output) error</li> <li>func (m *OutputRepositoryMock) Delete(id string) error</li> <li>func (m *OutputRepositoryMock) FindAll() ([]*entity.Output, error)</li> <li>func (m *OutputRepositoryMock) FindAllByServiceAndProvider(provider, service string) ([]*entity.Output, error)</li> <li>func (m *OutputRepositoryMock) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Output, error)</li> <li>func (m *OutputRepositoryMock) FindAllBySourceAndProvider(provider, source string) ([]*entity.Output, error)</li> <li>func (m *OutputRepositoryMock) FindByID(id string) (*entity.Output, error)</li> <li>func (m *OutputRepositoryMock) Update(output *entity.Output) error</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#type-outputrepositorymock","title":"type OutputRepositoryMock","text":"<p>OutputRepositoryMock is a mock implementation of OutputRepositoryInterface</p> <pre><code>type OutputRepositoryMock struct {\n    mock.Mock\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#func-outputrepositorymock-create","title":"func (*OutputRepositoryMock) Create","text":"<pre><code>func (m *OutputRepositoryMock) Create(output *entity.Output) error\n</code></pre> <p>Create is a mock implementation of OutputRepositoryInterface's Create method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#func-outputrepositorymock-delete","title":"func (*OutputRepositoryMock) Delete","text":"<pre><code>func (m *OutputRepositoryMock) Delete(id string) error\n</code></pre> <p>Delete is a mock implementation of OutputRepositoryInterface's Delete method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#func-outputrepositorymock-findall","title":"func (*OutputRepositoryMock) FindAll","text":"<pre><code>func (m *OutputRepositoryMock) FindAll() ([]*entity.Output, error)\n</code></pre> <p>FindAll is a mock implementation of OutputRepositoryInterface's FindAll method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#func-outputrepositorymock-findallbyserviceandprovider","title":"func (*OutputRepositoryMock) FindAllByServiceAndProvider","text":"<pre><code>func (m *OutputRepositoryMock) FindAllByServiceAndProvider(provider, service string) ([]*entity.Output, error)\n</code></pre> <p>FindAllByServiceAndProvider is a mock implementation of OutputRepositoryInterface's FindAllByServiceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#func-outputrepositorymock-findallbyserviceandsourceandprovider","title":"func (*OutputRepositoryMock) FindAllByServiceAndSourceAndProvider","text":"<pre><code>func (m *OutputRepositoryMock) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Output, error)\n</code></pre> <p>FindAllByServiceAndSourceAndProvider is a mock implementation of OutputRepositoryInterface's FindAllByServiceAndSourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#func-outputrepositorymock-findallbysourceandprovider","title":"func (*OutputRepositoryMock) FindAllBySourceAndProvider","text":"<pre><code>func (m *OutputRepositoryMock) FindAllBySourceAndProvider(provider, source string) ([]*entity.Output, error)\n</code></pre> <p>FindAllBySourceAndProvider is a mock implementation of OutputRepositoryInterface's FindAllBySourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#func-outputrepositorymock-findbyid","title":"func (*OutputRepositoryMock) FindByID","text":"<pre><code>func (m *OutputRepositoryMock) FindByID(id string) (*entity.Output, error)\n</code></pre> <p>FindByID is a mock implementation of OutputRepositoryInterface's FindByID method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/output-vault/docs/godoc/#func-outputrepositorymock-update","title":"func (*OutputRepositoryMock) Update","text":"<pre><code>func (m *OutputRepositoryMock) Update(output *entity.Output) error\n</code></pre> <p>Update is a mock implementation of OutputRepositoryInterface's Update method</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/","title":"schema-vault/mockrepository","text":"<p><code>schema-vault/mockrepository</code> is a Go library that provides mock implementations of the repository interfaces used in the <code>schema-vault</code> domain. This library is primarily used for testing purposes, allowing you to simulate repository behaviors without needing a real database.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/#features","title":"Features","text":"<ul> <li>Mock implementation of <code>SchemaRepositoryInterface</code>.</li> <li>Support for creating, finding, updating, and deleting schema entities.</li> <li>Support for querying schemas based on various attributes.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/#mocking-a-schema-repository","title":"Mocking a Schema Repository","text":"<p>The <code>SchemaRepositoryMock</code> struct provides methods to simulate interactions with schema entities.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"testing\"\n\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/mock/schema-vault/repository\"\n    \"github.com/stretchr/testify/mock\"\n)\n\nfunc main() {\n    repoMock := new(mockrepository.SchemaRepositoryMock)\n\n    schemaProps := entity.SchemaProps{\n        Service:    \"exampleService\",\n        Source:     \"exampleSource\",\n        Provider:   \"exampleProvider\",\n        SchemaType: \"exampleSchemaType\",\n        JsonSchema: map[string]interface{}{\n            \"type\": \"object\",\n            \"properties\": map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": []string{\n                \"field1\",\n            },\n        },\n    }\n\n    schema, err := entity.NewSchema(schemaProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repoMock.On(\"Create\", schema).Return(nil)\n\n    err = repoMock.Create(schema)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Mocked schema creation: %+v\\n\", schema)\n    repoMock.AssertExpectations(&amp;testing.T{})\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/#mock-implementation-details","title":"Mock Implementation Details","text":"<p>The <code>SchemaRepositoryMock</code> struct provides mock implementations for the following methods:</p> <ul> <li><code>Create</code>: Simulates the creation of a schema entity.</li> <li><code>FindByID</code>: Simulates finding a schema entity by its ID.</li> <li><code>FindAll</code>: Simulates finding all schema entities.</li> <li><code>Update</code>: Simulates updating a schema entity.</li> <li><code>Delete</code>: Simulates deleting a schema entity.</li> <li><code>FindAllByServiceAndProvider</code>: Simulates finding all schema entities by service and provider.</li> <li><code>FindAllBySourceAndProvider</code>: Simulates finding all schema entities by source and provider.</li> <li><code>FindAllByServiceAndSourceAndProvider</code>: Simulates finding all schema entities by service, source, and provider.</li> <li><code>FindOneByServiceAndSourceAndProviderAndSchemaType</code>: Simulates finding one schema entitiy by service, source, provider and schema type.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/#example-test-using-the-mock","title":"Example Test Using the Mock","text":"<p>Here is an example of how to use the <code>SchemaRepositoryMock</code> in a test:</p> <pre><code>package main\n\nimport (\n    \"testing\"\n\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/mock/schema-vault/repository\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestSchemaRepositoryMock(t *testing.T) {\n    repoMock := new(mockrepository.SchemaRepositoryMock)\n\n    schemaProps := entity.SchemaProps{\n        Service:    \"exampleService\",\n        Source:     \"exampleSource\",\n        Provider:   \"exampleProvider\",\n        SchemaType: \"exampleSchemaType\",\n        JsonSchema: map[string]interface{}{\n            \"type\": \"object\",\n            \"properties\": map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": []string{\n                \"field1\",\n            },\n        },\n    }\n\n    schema, err := entity.NewSchema(schemaProps)\n    assert.NoError(t, err)\n\n    repoMock.On(\"Create\", schema).Return(nil)\n\n    err = repoMock.Create(schema)\n    assert.NoError(t, err)\n\n    repoMock.AssertExpectations(t)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#mockrepository","title":"mockrepository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/mock/schema-vault/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type SchemaRepositoryMock</li> <li>func (m *SchemaRepositoryMock) Create(config *entity.Schema) error</li> <li>func (m *SchemaRepositoryMock) Delete(id string) error</li> <li>func (m *SchemaRepositoryMock) FindAll() ([]*entity.Schema, error)</li> <li>func (m *SchemaRepositoryMock) FindAllByServiceAndProvider(provider, service string) ([]*entity.Schema, error)</li> <li>func (m *SchemaRepositoryMock) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Schema, error)</li> <li>func (m *SchemaRepositoryMock) FindAllBySourceAndProvider(provider, source string) ([]*entity.Schema, error)</li> <li>func (m *SchemaRepositoryMock) FindByID(id string) (*entity.Schema, error)</li> <li>func (m *SchemaRepositoryMock) FindOneByServiceAndSourceAndProviderAndSchemaType(provider, service, source, schemaType string) (*entity.Schema, error)</li> <li>func (m *SchemaRepositoryMock) Update(config *entity.Schema) error</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#type-schemarepositorymock","title":"type SchemaRepositoryMock","text":"<p>SchemaRepositoryMock is a mock implementation of SchemaRepositoryInterface</p> <pre><code>type SchemaRepositoryMock struct {\n    mock.Mock\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#func-schemarepositorymock-create","title":"func (*SchemaRepositoryMock) Create","text":"<pre><code>func (m *SchemaRepositoryMock) Create(config *entity.Schema) error\n</code></pre> <p>Create is a mock implementation of SchemaRepositoryInterface's Create method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#func-schemarepositorymock-delete","title":"func (*SchemaRepositoryMock) Delete","text":"<pre><code>func (m *SchemaRepositoryMock) Delete(id string) error\n</code></pre> <p>Delete is a mock implementation of SchemaRepositoryInterface's Delete method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#func-schemarepositorymock-findall","title":"func (*SchemaRepositoryMock) FindAll","text":"<pre><code>func (m *SchemaRepositoryMock) FindAll() ([]*entity.Schema, error)\n</code></pre> <p>FindAll is a mock implementation of SchemaRepositoryInterface's FindAll method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#func-schemarepositorymock-findallbyserviceandprovider","title":"func (*SchemaRepositoryMock) FindAllByServiceAndProvider","text":"<pre><code>func (m *SchemaRepositoryMock) FindAllByServiceAndProvider(provider, service string) ([]*entity.Schema, error)\n</code></pre> <p>FindAllByServiceAndProvider is a mock implementation of SchemaRepositoryInterface's FindAllByServiceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#func-schemarepositorymock-findallbyserviceandsourceandprovider","title":"func (*SchemaRepositoryMock) FindAllByServiceAndSourceAndProvider","text":"<pre><code>func (m *SchemaRepositoryMock) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Schema, error)\n</code></pre> <p>FindAllByServiceAndSourceAndProvider is a mock implementation of SchemaRepositoryInterface's FindAllByServiceAndSourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#func-schemarepositorymock-findallbysourceandprovider","title":"func (*SchemaRepositoryMock) FindAllBySourceAndProvider","text":"<pre><code>func (m *SchemaRepositoryMock) FindAllBySourceAndProvider(provider, source string) ([]*entity.Schema, error)\n</code></pre> <p>FindAllBySourceAndProvider is a mock implementation of SchemaRepositoryInterface's FindAllBySourceAndProvider method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#func-schemarepositorymock-findbyid","title":"func (*SchemaRepositoryMock) FindByID","text":"<pre><code>func (m *SchemaRepositoryMock) FindByID(id string) (*entity.Schema, error)\n</code></pre> <p>FindByID is a mock implementation of SchemaRepositoryInterface's FindByID method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#func-schemarepositorymock-findonebyserviceandsourceandproviderandschematype","title":"func (*SchemaRepositoryMock) FindOneByServiceAndSourceAndProviderAndSchemaType","text":"<pre><code>func (m *SchemaRepositoryMock) FindOneByServiceAndSourceAndProviderAndSchemaType(provider, service, source, schemaType string) (*entity.Schema, error)\n</code></pre> <p>FindOneByServiceAndSourceAndProviderAndSchemaType is a mock implementation of SchemaRepositoryInterface's FindOneByServiceAndSourceAndProviderAndSchemaType method</p> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mock/schema-vault/docs/godoc/#func-schemarepositorymock-update","title":"func (*SchemaRepositoryMock) Update","text":"<pre><code>func (m *SchemaRepositoryMock) Update(config *entity.Schema) error\n</code></pre> <p>Update is a mock implementation of SchemaRepositoryInterface's Update method</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/","title":"config-vault/repository","text":"<p><code>config-vault/repository</code> is a Go library that provides a repository layer for managing configuration entities stored in MongoDB. This library includes functionalities for creating, reading, updating, and deleting configuration entities, as well as querying configurations based on different attributes.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete configuration entities in MongoDB.</li> <li>Query configurations by service, source, provider, and other attributes.</li> <li>Handle collection and database existence checks.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/#creating-a-configrepository","title":"Creating a ConfigRepository","text":"<p>The <code>ConfigRepository</code> struct provides methods to interact with the configuration entities stored in MongoDB.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    configProps := entity.ConfigProps{\n        Active:   true,\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Provider: \"exampleProvider\",\n        JobParameters: map[string]interface{}{\n            \"parser_module\": \"test_parser_module\",\n        },\n        DependsOn: []map[string]interface{}{\n            {\"service\": \"dependencyService\", \"source\": \"dependencySource\"},\n        },\n    }\n\n    config, err := entity.NewConfig(configProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = repo.Create(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Config created: %+v\\n\", config)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/#retrieving-a-config-by-id","title":"Retrieving a Config by ID","text":"<p>Use the <code>FindByID</code> method to retrieve a configuration by its ID.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    config, err := repo.FindByID(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Config retrieved: %+v\\n\", config)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/#updating-a-config","title":"Updating a Config","text":"<p>Use the <code>Update</code> method to update an existing configuration.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    config, err := repo.FindByID(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    config.SetActive(false)\n    err = repo.Update(config)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Config updated successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/#deleting-a-config","title":"Deleting a Config","text":"<p>Use the <code>Delete</code> method to remove a configuration by its ID.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    err = repo.Delete(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Config deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/#querying-configurations","title":"Querying Configurations","text":"<p>Use the various query methods to retrieve configurations based on different attributes.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    configs, err := repo.FindAllByServiceAndProvider(\"exampleProvider\", \"exampleService\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, config := range configs {\n        fmt.Printf(\"Config: %+v\\n\", config)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>repository</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-repositories-database-mongodb-config-vault-repository\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#repository","title":"repository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type ConfigRepository</li> <li>func NewConfigRepository(client *mongo.Client, database string) *ConfigRepository</li> <li>func (r *ConfigRepository) Create(config *entity.Config) error</li> <li>func (r *ConfigRepository) Delete(id string) error</li> <li>func (r *ConfigRepository) FindAll() ([]*entity.Config, error)</li> <li>func (r *ConfigRepository) FindAllByProviderAndDependsOn(provider, service, source string) ([]*entity.Config, error)</li> <li>func (r *ConfigRepository) FindAllByServiceAndProvider(provider, service string) ([]*entity.Config, error)</li> <li>func (r *ConfigRepository) FindAllByServiceAndProviderAndActive(service, provider string, active bool) ([]*entity.Config, error)</li> <li>func (r *ConfigRepository) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Config, error)</li> <li>func (r *ConfigRepository) FindAllBySourceAndProvider(provider, source string) ([]*entity.Config, error)</li> <li>func (r *ConfigRepository) FindByID(id string) (*entity.Config, error)</li> <li>func (r *ConfigRepository) Update(config *entity.Config) error</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#type-configrepository","title":"type ConfigRepository","text":"<p>ConfigRepository manages the operations on the configs collection in MongoDB.</p> <pre><code>type ConfigRepository struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-newconfigrepository","title":"func NewConfigRepository","text":"<pre><code>func NewConfigRepository(client *mongo.Client, database string) *ConfigRepository\n</code></pre> <p>NewConfigRepository creates a new ConfigRepository instance. It initializes the collection for the specified database.</p> <p>Parameters:</p> <ul> <li>client: The MongoDB client.</li> <li>database: The name of the database.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to a ConfigRepository instance.</li> </ul> <p>Example:</p> <pre><code>client := mongo.Connect(context.Background(), options.Client().ApplyURI(\"mongodb://localhost:27017\"))\nrepository := NewConfigRepository(client, \"testdb\")\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-create","title":"func (*ConfigRepository) Create","text":"<pre><code>func (r *ConfigRepository) Create(config *entity.Config) error\n</code></pre> <p>Create inserts a new Config document into the collection.</p> <p>Parameters:</p> <ul> <li>config: The Config entity to be inserted.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document already exists or cannot be inserted.</li> </ul> <p>Example:</p> <pre><code>err := repository.Create(newConfig)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-delete","title":"func (*ConfigRepository) Delete","text":"<pre><code>func (r *ConfigRepository) Delete(id string) error\n</code></pre> <p>Delete removes a Config document from the collection by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the Config document to be deleted.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document is not found or cannot be deleted.</li> </ul> <p>Example:</p> <pre><code>err := repository.Delete(\"60d5ec49e17e8e304c8f5310\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-findall","title":"func (*ConfigRepository) FindAll","text":"<pre><code>func (r *ConfigRepository) FindAll() ([]*entity.Config, error)\n</code></pre> <p>FindAll retrieves all Config documents in the collection.</p> <p>Returns:</p> <ul> <li>A slice of pointers to Config entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>configs, err := repository.FindAll()\nif err != nil {\n    log.Fatal(err)\n}\nfor _, config := range configs {\n    fmt.Printf(\"Config: %+v\\n\", config)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-findallbyprovideranddependson","title":"func (*ConfigRepository) FindAllByProviderAndDependsOn","text":"<pre><code>func (r *ConfigRepository) FindAllByProviderAndDependsOn(provider, service, source string) ([]*entity.Config, error)\n</code></pre> <p>FindAllByProviderAndDependsOn retrieves all Config documents that have dependencies matching the given service and source.</p> <p>Parameters:</p> <ul> <li>service: The service name to match in dependencies.</li> <li>source: The source name to match in dependencies.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Config entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>configs, err := repository.FindAllByProviderAndDependsOn(\"provider\", \"dep_service\", \"dep_source\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, config := range configs {\n    fmt.Printf(\"Config: %+v\\n\", config)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-findallbyserviceandprovider","title":"func (*ConfigRepository) FindAllByServiceAndProvider","text":"<pre><code>func (r *ConfigRepository) FindAllByServiceAndProvider(provider, service string) ([]*entity.Config, error)\n</code></pre> <p>FindAllByServiceAndProvider retrieves all Config documents that match the given provider and service.</p> <p>Parameters:</p> <ul> <li>service: The service name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Config entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>configs, err := repository.FindAllByServiceAndProvider(\"myprovider\", \"myservice\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, config := range configs {\n    fmt.Printf(\"Config: %+v\\n\", config)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-findallbyserviceandproviderandactive","title":"func (*ConfigRepository) FindAllByServiceAndProviderAndActive","text":"<pre><code>func (r *ConfigRepository) FindAllByServiceAndProviderAndActive(service, provider string, active bool) ([]*entity.Config, error)\n</code></pre> <p>FindAllByServiceAndProviderAndActive retrieves all Config documents that match the given service, provider, and active status.</p> <p>Parameters:</p> <ul> <li>service: The service name to match.</li> <li>provider: The provider name to match.</li> <li>active: The active status to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Config entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>configs, err := repository.FindAllByServiceAndProviderAndActive(\"myservice\", \"myprovider\", true)\nif err != nil {\n    log.Fatal(err)\n}\nfor _, config := range configs {\n    fmt.Printf(\"Config: %+v\\n\", config)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-findallbyserviceandsourceandprovider","title":"func (*ConfigRepository) FindAllByServiceAndSourceAndProvider","text":"<pre><code>func (r *ConfigRepository) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Config, error)\n</code></pre> <p>FindAllByServiceAndSourceAndProvider retrieves all Config documents that match the given service, source, and provider.</p> <p>Parameters:</p> <ul> <li>service: The service name to match.</li> <li>source: The source name to match.</li> <li>provider: The provider name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Config entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>configs, err := repository.FindAllByServiceAndSourceAndProvider(\"myservice\", \"mysource\", \"myprovider\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, config := range configs {\n    fmt.Printf(\"Config: %+v\\n\", config)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-findallbysourceandprovider","title":"func (*ConfigRepository) FindAllBySourceAndProvider","text":"<pre><code>func (r *ConfigRepository) FindAllBySourceAndProvider(provider, source string) ([]*entity.Config, error)\n</code></pre> <p>FindAllBySourceAndProvider retrieves all Config documents that match the given provider and source.</p> <p>Parameters:</p> <ul> <li>source: The source name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Config entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>configs, err := repository.FindAllBySourceAndProvider(\"myprovider\", \"mysource\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, config := range configs {\n    fmt.Printf(\"Config: %+v\\n\", config)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-findbyid","title":"func (*ConfigRepository) FindByID","text":"<pre><code>func (r *ConfigRepository) FindByID(id string) (*entity.Config, error)\n</code></pre> <p>FindByID retrieves a single Config document by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the Config document.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the Config entity.</li> <li>An error if the document is not found or cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>config, err := repository.FindByID(\"60d5ec49e17e8e304c8f5310\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/config-vault/docs/godoc/#func-configrepository-update","title":"func (*ConfigRepository) Update","text":"<pre><code>func (r *ConfigRepository) Update(config *entity.Config) error\n</code></pre> <p>Update modifies an existing Config document in the collection.</p> <p>Parameters:</p> <ul> <li>config: The Config entity with updated data.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document is not found or cannot be updated.</li> </ul> <p>Example:</p> <pre><code>err := repository.Update(updatedConfig)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/","title":"input-broker/repository","text":"<p><code>input-broker/repository</code> is a Go library that provides a repository layer for managing input entities stored in MongoDB. This library includes functionalities for creating, reading, updating, and deleting input entities, as well as querying inputs based on different attributes.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete input entities in MongoDB.</li> <li>Query inputs by service, source, provider, and other attributes.</li> <li>Handle collection and database existence checks.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/#creating-an-inputrepository","title":"Creating an InputRepository","text":"<p>The <code>InputRepository</code> struct provides methods to interact with the input entities stored in MongoDB.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewInputRepository(client, \"testdb\")\n    inputProps := entity.InputProps{\n        Active:   true,\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Provider: \"exampleProvider\",\n        DependsOn: []map[string]interface{}{\n            {\"service\": \"dependencyService\", \"source\": \"dependencySource\"},\n        },\n    }\n\n    input, err := entity.NewInput(inputProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = repo.Create(input)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Input created: %+v\\n\", input)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/#retrieving-an-input-by-id","title":"Retrieving an Input by ID","text":"<p>Use the <code>FindByID</code> method to retrieve an input by its ID.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewInputRepository(client, \"testdb\")\n    input, err := repo.FindByID(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Input retrieved: %+v\\n\", input)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/#updating-an-input","title":"Updating an Input","text":"<p>Use the <code>Update</code> method to update an existing input.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewInputRepository(client, \"testdb\")\n    input, err := repo.FindByID(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    input.SetActive(false)\n    err = repo.Update(input)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Input updated successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/#deleting-an-input","title":"Deleting an Input","text":"<p>Use the <code>Delete</code> method to remove an input by its ID.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewInputRepository(client, \"testdb\")\n    err = repo.Delete(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Input deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/#querying-inputs","title":"Querying Inputs","text":"<p>Use the various query methods to retrieve inputs based on different attributes.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewInputRepository(client, \"testdb\")\n    inputs, err := repo.FindAllByServiceAndProvider(\"exampleProvider\", \"exampleService\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, input := range inputs {\n        fmt.Printf(\"Input: %+v\\n\", input)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/#testing","title":"Testing","text":"<p>To run the tests for the <code>repository</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-repositories-database-mongodb-input-broker-repository\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#repository","title":"repository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>type InputRepository</li> <li>func NewInputRepository(client *mongo.Client, database string) *InputRepository</li> <li>func (r *InputRepository) Create(input *entity.Input) error</li> <li>func (r *InputRepository) Delete(id string) error</li> <li>func (r *InputRepository) FindAll() ([]*entity.Input, error)</li> <li>func (r *InputRepository) FindAllByServiceAndProvider(provider, service string) ([]*entity.Input, error)</li> <li>func (r *InputRepository) FindAllByServiceAndSourceAndProvider(provider, service, source string) ([]*entity.Input, error)</li> <li>func (r *InputRepository) FindAllBySourceAndProvider(provider, service string) ([]*entity.Input, error)</li> <li>func (r *InputRepository) FindAllByStatusAndProvider(provider string, status int) ([]*entity.Input, error)</li> <li>func (r *InputRepository) FindAllByStatusAndServiceAndProvider(provider, service string, status int) ([]*entity.Input, error)</li> <li>func (r *InputRepository) FindAllByStatusAndServiceAndSourceAndProvider(provider, service, source string, status int) ([]*entity.Input, error)</li> <li>func (r *InputRepository) FindAllByStatusAndSourceAndProvider(provider, source string, status int) ([]*entity.Input, error)</li> <li>func (r *InputRepository) FindByID(id string) (*entity.Input, error)</li> <li>func (r *InputRepository) Update(input *entity.Input) error</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#type-inputrepository","title":"type InputRepository","text":"<p>InputRepository manages the operations on the inputs collection in MongoDB</p> <pre><code>type InputRepository struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-newinputrepository","title":"func NewInputRepository","text":"<pre><code>func NewInputRepository(client *mongo.Client, database string) *InputRepository\n</code></pre> <p>NewInputRepository creates a new InputRepository instance. It initializes the collection for the specified database.</p> <p>Parameters:</p> <ul> <li>client: The MongoDB client.</li> <li>database: The name of the database.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to a InputRepository instance.</li> </ul> <p>Example:</p> <pre><code>client := mongo.Connect(context.Background(), options.Client().ApplyURI(\"mongodb://localhost:27017\"))\nrepository := NewInputRepository(client, \"testdb\")\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-create","title":"func (*InputRepository) Create","text":"<pre><code>func (r *InputRepository) Create(input *entity.Input) error\n</code></pre> <p>Create inserts a new Input document into the collection.</p> <p>Parameters:</p> <ul> <li>input: The Input entity to insert.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document already exists or cannot be inserted.</li> </ul> <p>Example:</p> <pre><code>err := repository.Create(newInput)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-delete","title":"func (*InputRepository) Delete","text":"<pre><code>func (r *InputRepository) Delete(id string) error\n</code></pre> <p>Delete removes an existing Input document from the collection by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the Input document.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document does not exist or cannot be deleted.</li> </ul> <p>Example:</p> <pre><code>err := repository.Delete(\"5f7b3b3b7b3b3b3b3b3b3b3b\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-findall","title":"func (*InputRepository) FindAll","text":"<pre><code>func (r *InputRepository) FindAll() ([]*entity.Input, error)\n</code></pre> <p>FindAll retrieves all Input documents from the collection.</p> <p>Returns:</p> <ul> <li>A slice of Input entities.</li> <li>An error if the documents cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>inputs, err := repository.FindAll()\nif err != nil {\n    log.Fatal(err)\n}\nfor _, input := range inputs {\n    fmt.Println(input)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-findallbyserviceandprovider","title":"func (*InputRepository) FindAllByServiceAndProvider","text":"<pre><code>func (r *InputRepository) FindAllByServiceAndProvider(provider, service string) ([]*entity.Input, error)\n</code></pre> <p>FindAllByServiceAndProvider retrieves all Input documents that match the given provider and service.</p> <p>Parameters:</p> <ul> <li>provider: The provider name to match.</li> <li>service: The service name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of Input entities.</li> <li>An error if the documents cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>inputs, err := repository.FindAllByServiceAndProvider(\"myprovider\", \"myservice\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, input := range inputs {\n    fmt.Println(input)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-findallbyserviceandsourceandprovider","title":"func (*InputRepository) FindAllByServiceAndSourceAndProvider","text":"<pre><code>func (r *InputRepository) FindAllByServiceAndSourceAndProvider(provider, service, source string) ([]*entity.Input, error)\n</code></pre> <p>FindAllByServiceAndSourceAndProvider retrieves all Input documents that match the given provider, service and source.</p> <p>Parameters:</p> <ul> <li>provider: The provider name to match.</li> <li>service: The service name to match.</li> <li>source: The source name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of Input entities.</li> <li>An error if the documents cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>inputs, err := repository.FindAllByServiceAndSourceAndProvider(\"myprovider\", \"myservice\", \"mysource\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, input := range inputs {\n    fmt.Println(input)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-findallbysourceandprovider","title":"func (*InputRepository) FindAllBySourceAndProvider","text":"<pre><code>func (r *InputRepository) FindAllBySourceAndProvider(provider, service string) ([]*entity.Input, error)\n</code></pre> <p>FindAllBySourceAndProvider retrieves all Input documents that match the given provider and source.</p> <p>Parameters:</p> <ul> <li>provider: The provider name to match.</li> <li>source: The source name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of Input entities.</li> <li>An error if the documents cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>inputs, err := repository.FindAllBySourceAndProvider(\"myprovider\", \"mysource\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, input := range inputs {\n    fmt.Println(input)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-findallbystatusandprovider","title":"func (*InputRepository) FindAllByStatusAndProvider","text":"<pre><code>func (r *InputRepository) FindAllByStatusAndProvider(provider string, status int) ([]*entity.Input, error)\n</code></pre> <p>FindAllByStatusAndProvider retrieves all Input documents from the collection with the specified status.</p> <p>Parameters:</p> <ul> <li>status: The status code.</li> </ul> <p>Returns:</p> <ul> <li>A slice of Input entities.</li> <li>An error if the documents cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>inputs, err := repository.FindAllByStatusAndProvider(\"myprovider\", 0)\nif err != nil {\n    log.Fatal(err)\n}\nfor _, input := range inputs {\n    fmt.Println(input)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-findallbystatusandserviceandprovider","title":"func (*InputRepository) FindAllByStatusAndServiceAndProvider","text":"<pre><code>func (r *InputRepository) FindAllByStatusAndServiceAndProvider(provider, service string, status int) ([]*entity.Input, error)\n</code></pre> <p>FindAllByStatusAndServiceAndProvider retrieves all Input documents that match the given provider, service and status.</p> <p>Parameters:</p> <ul> <li>provider: The provider name to match.</li> <li>service: The service name to match.</li> <li>status: The status code.</li> </ul> <p>Returns:</p> <ul> <li>A slice of Input entities.</li> <li>An error if the documents cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>inputs, err := repository.FindAllByStatusAndServiceAndProvider(\"myprovider\", \"myservice\", 0)\nif err != nil {\n    log.Fatal(err)\n}\nfor _, input := range inputs {\n    fmt.Println(input)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-findallbystatusandserviceandsourceandprovider","title":"func (*InputRepository) FindAllByStatusAndServiceAndSourceAndProvider","text":"<pre><code>func (r *InputRepository) FindAllByStatusAndServiceAndSourceAndProvider(provider, service, source string, status int) ([]*entity.Input, error)\n</code></pre> <p>FindAllByStatusAndServiceAndSourceAndProvider retrieves all Input documents that match the given provider, service, source and status.</p> <p>Parameters:</p> <ul> <li>provider: The provider name to match.</li> <li>service: The service name to match.</li> <li>source: The source name to match.</li> <li>status: The status code.</li> </ul> <p>Returns:</p> <ul> <li>A slice of Input entities.</li> <li>An error if the documents cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>inputs, err := repository.FindAllByStatusAndServiceAndSourceAndProvider(\"myprovider\", \"myservice\", \"mysource\", 0)\nif err != nil {\n    log.Fatal(err)\n}\nfor _, input := range inputs {\n    fmt.Println(input)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-findallbystatusandsourceandprovider","title":"func (*InputRepository) FindAllByStatusAndSourceAndProvider","text":"<pre><code>func (r *InputRepository) FindAllByStatusAndSourceAndProvider(provider, source string, status int) ([]*entity.Input, error)\n</code></pre> <p>FindAllByStatusAndSourceAndProvider retrieves all Input documents that match the given provider, source and status.</p> <p>Parameters:</p> <ul> <li>provider: The provider name to match.</li> <li>source: The source name to match.</li> <li>status: The status code.</li> </ul> <p>Returns:</p> <ul> <li>A slice of Input entities.</li> <li>An error if the documents cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>inputs, err := repository.FindAllByStatusAndSourceAndProvider(\"myprovider\", \"mysource\", 0)\nif err != nil {\n    log.Fatal(err)\n}\nfor _, input := range inputs {\n    fmt.Println(input)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-findbyid","title":"func (*InputRepository) FindByID","text":"<pre><code>func (r *InputRepository) FindByID(id string) (*entity.Input, error)\n</code></pre> <p>FindByID retrieves a single Input document by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the Input document.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the Input entity.</li> <li>An error if the document is not found or cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>inputs, err := repository.FindByID()\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Printf(\"Input: %+v\\n\", input)\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/input-broker/docs/godoc/#func-inputrepository-update","title":"func (*InputRepository) Update","text":"<pre><code>func (r *InputRepository) Update(input *entity.Input) error\n</code></pre> <p>Update modifies an existing Input document in the collection.</p> <p>Parameters:</p> <ul> <li>input: The Input entity to update.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document does not exist or cannot be updated.</li> </ul> <p>Example:</p> <pre><code>err := repository.Update(updatedInput)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/","title":"output-vault/repository","text":"<p><code>output-vault/repository</code> is a Go library that provides a repository layer for managing output entities stored in MongoDB. This library includes functionalities for creating, reading, updating, and deleting output entities, as well as querying outputs based on different attributes.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete output entities in MongoDB.</li> <li>Query outputs by service, source, provider, and other attributes.</li> <li>Handle collection and database existence checks.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/#creating-an-outputrepository","title":"Creating an OutputRepository","text":"<p>The <code>OutputRepository</code> struct provides methods to interact with the output entities stored in MongoDB.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewOutputRepository(client, \"testdb\")\n    outputProps := entity.OutputProps{\n        Active:   true,\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Provider: \"exampleProvider\",\n        DependsOn: []map[string]interface{}{\n            {\"service\": \"dependencyService\", \"source\": \"dependencySource\"},\n        },\n    }\n\n    output, err := entity.NewOutput(outputProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = repo.Create(output)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Output created: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/#retrieving-an-output-by-id","title":"Retrieving an Output by ID","text":"<p>Use the <code>FindByID</code> method to retrieve an output by its ID.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewOutputRepository(client, \"testdb\")\n    output, err := repo.FindByID(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Output retrieved: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/#updating-an-output","title":"Updating an Output","text":"<p>Use the <code>Update</code> method to update an existing output.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewOutputRepository(client, \"testdb\")\n    output, err := repo.FindByID(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    output.SetActive(false)\n    err = repo.Update(output)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Output updated successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/#deleting-an-output","title":"Deleting an Output","text":"<p>Use the <code>Delete</code> method to remove an output by its ID.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewOutputRepository(client, \"testdb\")\n    err = repo.Delete(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Output deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/#querying-outputs","title":"Querying Outputs","text":"<p>Use the various query methods to retrieve outputs based on different attributes.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewOutputRepository(client, \"testdb\")\n    outputs, err := repo.FindAllByServiceAndProvider(\"exampleProvider\", \"exampleService\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, output := range outputs {\n        fmt.Printf(\"Output: %+v\\n\", output)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>repository</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-repositories-database-mongodb-output-vault-repository\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#repository","title":"repository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type OutputRepository</li> <li>func NewOutputRepository(client *mongo.Client, database string) *OutputRepository</li> <li>func (r *OutputRepository) Create(output *entity.Output) error</li> <li>func (r *OutputRepository) Delete(id string) error</li> <li>func (r *OutputRepository) FindAll() ([]*entity.Output, error)</li> <li>func (r *OutputRepository) FindAllByServiceAndProvider(provider, service string) ([]*entity.Output, error)</li> <li>func (r *OutputRepository) FindAllByServiceAndSourceAndProvider(provider, service, source string) ([]*entity.Output, error)</li> <li>func (r *OutputRepository) FindAllBySourceAndProvider(provider, source string) ([]*entity.Output, error)</li> <li>func (r *OutputRepository) FindByID(id string) (*entity.Output, error)</li> <li>func (r *OutputRepository) Update(output *entity.Output) error</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#type-outputrepository","title":"type OutputRepository","text":"<p>OutputRepository manages the operations on the outputs collection in MongoDB</p> <pre><code>type OutputRepository struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#func-newoutputrepository","title":"func NewOutputRepository","text":"<pre><code>func NewOutputRepository(client *mongo.Client, database string) *OutputRepository\n</code></pre> <p>NewOutputRepository creates a new OutputRepository instance. It initializes the collection for the specified database.</p> <p>Parameters:</p> <ul> <li>client: The MongoDB client.</li> <li>database: The name of the database.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to a OutputRepository instance.</li> </ul> <p>Example:</p> <pre><code>client := mongo.Connect(context.Background(), options.Client().ApplyURI(\"mongodb://localhost:27017\"))\nrepository := NewOutputRepository(client, \"testdb\")\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#func-outputrepository-create","title":"func (*OutputRepository) Create","text":"<pre><code>func (r *OutputRepository) Create(output *entity.Output) error\n</code></pre> <p>Create inserts a new Output document into the collection.</p> <p>Parameters:</p> <ul> <li>output: The Output entity to insert.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document already exists or cannot be inserted.</li> </ul> <p>Example:</p> <pre><code>err := repository.Create(newOutput)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#func-outputrepository-delete","title":"func (*OutputRepository) Delete","text":"<pre><code>func (r *OutputRepository) Delete(id string) error\n</code></pre> <p>Delete removes a Output document from the collection by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the Output document.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document does not exist or cannot be removed.</li> </ul> <p>Example:</p> <pre><code>err := repository.Delete(\"5f7b3b3b7b3b3b3b3b3b3b3b\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#func-outputrepository-findall","title":"func (*OutputRepository) FindAll","text":"<pre><code>func (r *OutputRepository) FindAll() ([]*entity.Output, error)\n</code></pre> <p>FindAll retrieves all Output documents from the collection.</p> <p>Returns:</p> <ul> <li>A slice of Output entities.</li> <li>An error if the documents cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>outputs, err := repository.FindAll()\nif err != nil {\n    log.Fatal(err)\n}\nfor _, output := range outputs {\n    fmt.Println(output)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#func-outputrepository-findallbyserviceandprovider","title":"func (*OutputRepository) FindAllByServiceAndProvider","text":"<pre><code>func (r *OutputRepository) FindAllByServiceAndProvider(provider, service string) ([]*entity.Output, error)\n</code></pre> <p>FindAllByServiceAndProvider retrieves all Outputs documents that match the given provider and service.</p> <p>Parameters:</p> <ul> <li>service: The service name to match.</li> <li>provider: The provider name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Output entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>outputs, err := repository.FindAllByServiceAndProvider(\"myprovider\", \"myservice\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, output := range outputs {\n    fmt.Println(output)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#func-outputrepository-findallbyserviceandsourceandprovider","title":"func (*OutputRepository) FindAllByServiceAndSourceAndProvider","text":"<pre><code>func (r *OutputRepository) FindAllByServiceAndSourceAndProvider(provider, service, source string) ([]*entity.Output, error)\n</code></pre> <p>FindAllByServiceAndSourceAndProvider retrieves all Outputs documents that match the given provider, service and source.</p> <p>Parameters:</p> <ul> <li>service: The service name to match.</li> <li>source: The source name to match.</li> <li>provider: The provider name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Output entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>outputs, err := repository.FindAllByServiceAndSourceAndProvider(\"myprovider\", \"myservice\", \"mysource\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, output := range outputs {\n    fmt.Println(output)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#func-outputrepository-findallbysourceandprovider","title":"func (*OutputRepository) FindAllBySourceAndProvider","text":"<pre><code>func (r *OutputRepository) FindAllBySourceAndProvider(provider, source string) ([]*entity.Output, error)\n</code></pre> <p>FindAllBySourceAndProvider retrieves all Outputs documents that match the given provider and source.</p> <p>Parameters:</p> <ul> <li>source: The source name to match.</li> <li>provider: The provider name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Output entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>outputs, err := repository.FindAllBySourceAndProvider(\"myprovider\", \"mysource\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, output := range outputs {\n    fmt.Println(output)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#func-outputrepository-findbyid","title":"func (*OutputRepository) FindByID","text":"<pre><code>func (r *OutputRepository) FindByID(id string) (*entity.Output, error)\n</code></pre> <p>FindByID retrieves a single Output document by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the Output document.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the Output entity.</li> <li>An error if the document is not found or cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>output, err := repository.FindByID(\"5f7b3b3b7b3b3b3b3b3b3b3b\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(output)\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/output-vault/docs/godoc/#func-outputrepository-update","title":"func (*OutputRepository) Update","text":"<pre><code>func (r *OutputRepository) Update(output *entity.Output) error\n</code></pre> <p>Update modifies an existing Output document in the collection.</p> <p>Parameters:</p> <ul> <li>output: The Output entity to update.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document does not exist or cannot be updated.</li> </ul> <p>Example:</p> <pre><code>err := repository.Update(updatedOutput)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/","title":"schema-vault/repository","text":"<p><code>schema-vault/repository</code> is a Go library that provides a repository layer for managing schemas entities stored in MongoDB. This library includes functionalities for creating, reading, updating, and deleting schemas entities, as well as querying schemas based on different attributes.</p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/#features","title":"Features","text":"<ul> <li>Create, read, update, and delete schemas entities in MongoDB.</li> <li>Query schema by service, source, provider, and other attributes.</li> <li>Handle collection and database existence checks.</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/#creating-a-schemarepository","title":"Creating a SchemaRepository","text":"<p>The <code>SchemaRepository</code> struct provides methods to interact with the schemas entities stored in MongoDB.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewSchemaRepository(client, \"testdb\")\n    schemaProps := entity.ConfigProps{\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Provider: \"exampleProvider\",\n        SchemaType: \"source\",\n        JsonSchema: map[string]interface{}{\n            \"type\": \"object\",\n            \"properties\": map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": []interface{}{\n                \"field1\",\n            },\n        },\n    }\n\n    schema, err := entity.NewSchema(schemaProps)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = repo.Create(schema)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Schema created: %+v\\n\", schema)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/#retrieving-a-schema-by-id","title":"Retrieving a Schema by ID","text":"<p>Use the <code>FindByID</code> method to retrieve a schema by its ID.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewSchemaRepository(client, \"testdb\")\n    schema, err := repo.FindByID(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"Schema retrieved: %+v\\n\", schema)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/#updating-a-schema","title":"Updating a Schema","text":"<p>Use the <code>Update</code> method to update an existing schema.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewSchemaRepository(client, \"testdb\")\n    schema, err := repo.FindByID(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    JsonSchema := map[string]interface{}{\n        \"type\": \"object\",\n        \"properties\": map[string]interface{}{\n            \"field1\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n            \"field2\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n        },\n        \"required\": []interface{}{\n            \"field1\",\n        },\n    }\n\n    schema.SetJsonSchema(JsonSchema)\n    err = repo.Update(schema)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Schema updated successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/#deleting-a-schema","title":"Deleting a Schema","text":"<p>Use the <code>Delete</code> method to remove a schema by its ID.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    err = repo.Delete(\"60d5ec49e17e8e304c8f5310\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Schema deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/#querying-schemas","title":"Querying Schemas","text":"<p>Use the various query methods to retrieve schemas based on different attributes.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewSchemaRepository(client, \"testdb\")\n    schemas, err := repo.FindAllByServiceAndProvider(\"exampleProvider\", \"exampleService\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, schema := range schemas {\n        fmt.Printf(\"Schema: %+v\\n\", schema)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>repository</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-domain-repositories-database-mongodb-schema-vault-repository\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#repository","title":"repository","text":"<pre><code>import \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type SchemaRepository</li> <li>func NewSchemaRepository(client *mongo.Client, database string) *SchemaRepository</li> <li>func (r *SchemaRepository) Create(schema *entity.Schema) error</li> <li>func (r *SchemaRepository) Delete(id string) error</li> <li>func (r *SchemaRepository) FindAll() ([]*entity.Schema, error)</li> <li>func (r *SchemaRepository) FindAllByServiceAndProvider(provider, service string) ([]*entity.Schema, error)</li> <li>func (r *SchemaRepository) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Schema, error)</li> <li>func (r *SchemaRepository) FindAllBySourceAndProvider(provider, source string) ([]*entity.Schema, error)</li> <li>func (r *SchemaRepository) FindByID(id string) (*entity.Schema, error)</li> <li>func (r *SchemaRepository) FindOneByServiceAndSourceAndProviderAndSchemaType(service, source, provider, schemaType string) (*entity.Schema, error)</li> <li>func (r *SchemaRepository) Update(schema *entity.Schema) error</li> </ul>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#type-schemarepository","title":"type SchemaRepository","text":"<p>SchemaRepository manages the operations on the schemas collection in MongoDB</p> <pre><code>type SchemaRepository struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-newschemarepository","title":"func NewSchemaRepository","text":"<pre><code>func NewSchemaRepository(client *mongo.Client, database string) *SchemaRepository\n</code></pre> <p>NewSchemaRepository creates a new SchemaRepository instance. It initializes the collection for the specified database.</p> <p>Parameters:</p> <ul> <li>client: The MongoDB client.</li> <li>database: The name of the database.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to a ConfigRepository instance.</li> </ul> <p>Example:</p> <pre><code>client := mongo.Connect(context.Background(), options.Client().ApplyURI(\"mongodb://localhost:27017\"))\nrepository := NewConfigRepository(client, \"testdb\")\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-schemarepository-create","title":"func (*SchemaRepository) Create","text":"<pre><code>func (r *SchemaRepository) Create(schema *entity.Schema) error\n</code></pre> <p>Create inserts a new Schema document into the collection.</p> <p>Parameters:</p> <ul> <li>schema: The Schema entity to be inserted.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document already exists or cannot be inserted.</li> </ul> <p>Example:</p> <pre><code>err := repository.Create(newSchema)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-schemarepository-delete","title":"func (*SchemaRepository) Delete","text":"<pre><code>func (r *SchemaRepository) Delete(id string) error\n</code></pre> <p>Delete removes a Schema document from the collection by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the Schema document to be deleted.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document is not found or cannot be deleted.</li> </ul> <p>Example:</p> <pre><code>err := repository.Delete(\"60d5ec49e17e8e304c8f5310\")\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-schemarepository-findall","title":"func (*SchemaRepository) FindAll","text":"<pre><code>func (r *SchemaRepository) FindAll() ([]*entity.Schema, error)\n</code></pre> <p>FindAll retrieves all Schema documents in the collection.</p> <p>Returns:</p> <ul> <li>A slice of pointers to Schema entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>schemas, err := repository.FindAll()\nif err != nil {\n    log.Fatal(err)\n}\nfor _, schema := range schemas {\n    fmt.Printf(\"Schema: %+v\\n\", schema)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-schemarepository-findallbyserviceandprovider","title":"func (*SchemaRepository) FindAllByServiceAndProvider","text":"<pre><code>func (r *SchemaRepository) FindAllByServiceAndProvider(provider, service string) ([]*entity.Schema, error)\n</code></pre> <p>FindAllByServiceAndProvider retrieves all Schema documents that match the given provider and service.</p> <p>Parameters:</p> <ul> <li>service: The service name to match.</li> <li>provider: The provider name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Schema entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>schemas, err := repository.FindAllByServiceAndProvider(\"myprovider\", \"myservice\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, schema := range schemas {\n    fmt.Printf(\"Schema: %+v\\n\", schema)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-schemarepository-findallbyserviceandsourceandprovider","title":"func (*SchemaRepository) FindAllByServiceAndSourceAndProvider","text":"<pre><code>func (r *SchemaRepository) FindAllByServiceAndSourceAndProvider(service, source, provider string) ([]*entity.Schema, error)\n</code></pre> <p>FindAllByServiceAndSourceAndProvider retrieves all Schema documents that match the given service, source, and provider.</p> <p>Parameters:</p> <ul> <li>service: The service name to match.</li> <li>source: The source name to match.</li> <li>provider: The provider name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Schema entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>schemas, err := repository.FindAllByServiceAndSourceAndProvider(\"myservice\", \"mysource\", \"myprovider\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, schema := range schemas {\n    fmt.Printf(\"Schema: %+v\\n\", schema)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-schemarepository-findallbysourceandprovider","title":"func (*SchemaRepository) FindAllBySourceAndProvider","text":"<pre><code>func (r *SchemaRepository) FindAllBySourceAndProvider(provider, source string) ([]*entity.Schema, error)\n</code></pre> <p>FindAllBySourceAndProvider retrieves all Schema documents that match the given provider and source.</p> <p>Parameters:</p> <ul> <li>source: The source name to match.</li> </ul> <p>Returns:</p> <ul> <li>A slice of pointers to Schema entities.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>schemas, err := repository.FindAllBySourceAndProvider(\"myprovider\", \"mysource\")\nif err != nil {\n    log.Fatal(err)\n}\nfor _, schema := range schemas {\n    fmt.Printf(\"Schema: %+v\\n\", schema)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-schemarepository-findbyid","title":"func (*SchemaRepository) FindByID","text":"<pre><code>func (r *SchemaRepository) FindByID(id string) (*entity.Schema, error)\n</code></pre> <p>FindByID retrieves a single Schema document by its ID.</p> <p>Parameters:</p> <ul> <li>id: The ID of the Schema document.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the Schema entity.</li> <li>An error if the document is not found or cannot be decoded.</li> </ul> <p>Example:</p> <pre><code>schema, err := repository.FindByID(\"60d5ec49e17e8e304c8f5310\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(schema)\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-schemarepository-findonebyserviceandsourceandproviderandschematype","title":"func (*SchemaRepository) FindOneByServiceAndSourceAndProviderAndSchemaType","text":"<pre><code>func (r *SchemaRepository) FindOneByServiceAndSourceAndProviderAndSchemaType(service, source, provider, schemaType string) (*entity.Schema, error)\n</code></pre> <p>FindAllByServiceAndSourceAndProviderAndSchemaType retrieves one Schema document that matches the given service, source, provider, and schema type.</p> <p>Parameters:</p> <ul> <li>service: The service name to match.</li> <li>source: The source name to match.</li> <li>provider: The provider name to match.</li> <li>schemaType: The schema type to match.</li> </ul> <p>Returns:</p> <ul> <li>A pointer to the Schema entity.</li> <li>An error if the query fails.</li> </ul> <p>Example:</p> <pre><code>schema, err := repository.FindOneByServiceAndSourceAndProviderAndSchemaType(\"myservice\", \"mysource\", \"myprovider\", \"myschematype\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(schema)\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/docs/godoc/#func-schemarepository-update","title":"func (*SchemaRepository) Update","text":"<pre><code>func (r *SchemaRepository) Update(schema *entity.Schema) error\n</code></pre> <p>Update modifies an existing Schema document in the collection.</p> <p>Parameters:</p> <ul> <li>schema: The Schema entity with updated data.</li> </ul> <p>Returns:</p> <ul> <li>An error if the document is not found or cannot be updated.</li> </ul> <p>Example:</p> <pre><code>err := repository.Update(updatedSchema)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/","title":"config-vault/dto","text":"<p><code>config-vault/dto</code> is a Go library that provides data transfer objects (DTOs) for managing configuration data within a system. This library includes structures for input and output DTOs, facilitating the transfer and validation of configuration data.</p>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/#features","title":"Features","text":"<ul> <li>Define DTOs for configuration input and output.</li> <li>Facilitate data transfer between different components of the system.</li> <li>Ensure consistency and validation of configuration data.</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/dtos/config-vault/#defining-configuration-dtos","title":"Defining Configuration DTOs","text":"<p>The <code>ConfigDTO</code> struct represents a configuration data transfer object with attributes such as service, source, provider, and dependencies.</p>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/#output-dto","title":"Output DTO","text":"<p>The <code>outputdto.ConfigDTO</code> struct is used to represent configuration data for output purposes.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/dtos/config-vault/outputdto\"\n    shareddto \"libs/golang/ddd/dtos/config-vault/shared\"\n)\n\nfunc main() {\n    config := outputdto.ConfigDTO{\n        ID:              \"12345\",\n        Active:          true,\n        Service:         \"exampleService\",\n        Source:          \"exampleSource\",\n        Provider:        \"exampleProvider\",\n        DependsOn:       []shareddto.JobDependenciesDTO{\n            {Service: \"dependencyService\", Source: \"dependencySource\"},\n        },\n        ConfigVersionID: \"v1\",\n        CreatedAt:       \"2023-06-08 12:00:00\",\n        UpdatedAt:       \"2023-06-09 12:00:00\",\n    }\n\n    fmt.Printf(\"Output ConfigDTO: %+v\\n\", config)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/#input-dto","title":"Input DTO","text":"<p>The <code>inputdto.ConfigDTO</code> struct is used to represent configuration data for input purposes.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/dtos/config-vault/inputdto\"\n    shareddto \"libs/golang/ddd/dtos/config-vault/shared\"\n)\n\nfunc main() {\n    config := inputdto.ConfigDTO{\n        Active:    true,\n        Service:   \"exampleService\",\n        Source:    \"exampleSource\",\n        Provider:  \"exampleProvider\",\n        DependsOn: []shareddto.JobDependenciesDTO{\n            {Service: \"dependencyService\", Source: \"dependencySource\"},\n        },\n    }\n\n    fmt.Printf(\"Input ConfigDTO: %+v\\n\", config)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/#shared-dto","title":"Shared DTO","text":"<p>The <code>shareddto.JobDependenciesDTO</code> struct is used to represent dependencies between services.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    shareddto \"libs/golang/ddd/dtos/config-vault/shared\"\n)\n\nfunc main() {\n    dependency := shareddto.JobDependenciesDTO{\n        Service: \"exampleService\",\n        Source:  \"exampleSource\",\n    }\n\n    fmt.Printf(\"JobDependenciesDTO: %+v\\n\", dependency)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#inputdto","title":"inputdto","text":"<pre><code>import \"libs/golang/ddd/dtos/config-vault/input\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type ConfigDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#type-configdto","title":"type ConfigDTO","text":"<p>ConfigDTO represents the data transfer object for configuration input. It includes the necessary details required for creating or updating a configuration, such as service details, source, provider, and dependencies.</p> <pre><code>type ConfigDTO struct {\n    Active        bool                           `json:\"active\"`         // Active indicates whether the configuration should be activated.\n    Service       string                         `json:\"service\"`        // Service represents the name of the service for which the configuration is created.\n    Source        string                         `json:\"source\"`         // Source indicates the origin or source of the configuration.\n    Provider      string                         `json:\"provider\"`       // Provider specifies the provider of the configuration.\n    DependsOn     []shareddto.JobDependenciesDTO `json:\"depends_on\"`     // DependsOn lists the dependencies required for the configuration, represented by JobDependenciesDTO.\n    JobParameters shareddto.JobParametersDTO     `json:\"job_parameters\"` // JobParameters contains the parameters needed for the configuration, represented by JobParametersDTO.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#outputdto","title":"outputdto","text":"<pre><code>import \"libs/golang/ddd/dtos/config-vault/output\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#index_1","title":"Index","text":"<ul> <li>type ConfigDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#type-configdto_1","title":"type ConfigDTO","text":"<p>ConfigDTO represents the data transfer object for configuration output. It contains detailed information about the configuration, including its status, service details, dependencies, and timestamps for creation and updates.</p> <pre><code>type ConfigDTO struct {\n    ID              string                         `json:\"_id\"`               // ID is the unique identifier of the configuration.\n    Active          bool                           `json:\"active\"`            // Active indicates whether the configuration is currently active.\n    Service         string                         `json:\"service\"`           // Service represents the name of the service associated with the configuration.\n    Source          string                         `json:\"source\"`            // Source indicates the origin or source of the configuration.\n    Provider        string                         `json:\"provider\"`          // Provider specifies the provider of the configuration.\n    DependsOn       []shareddto.JobDependenciesDTO `json:\"depends_on\"`        // DependsOn lists the dependencies of the configuration, represented by JobDependenciesDTO.\n    JobParameters   shareddto.JobParametersDTO     `json:\"job_parameters\"`    // JobParameteres contains the parameters of the configuration, represented by JobParameteresDTO.\n    ConfigVersionID string                         `json:\"config_version_id\"` // ConfigVersionID is the identifier of the configuration version.\n    CreatedAt       string                         `json:\"created_at\"`        // CreatedAt is the timestamp when the configuration was created.\n    UpdatedAt       string                         `json:\"updated_at\"`        // UpdatedAt is the timestamp when the configuration was last updated.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#shareddto","title":"shareddto","text":"<pre><code>import \"libs/golang/ddd/dtos/config-vault/shared\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#index_2","title":"Index","text":"<ul> <li>type JobDependenciesDTO</li> <li>type JobParametersDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#type-jobdependenciesdto","title":"type JobDependenciesDTO","text":"<p>JobDependenciesDTO represents the data transfer object for job dependencies. It includes the service and source details that are dependent on each other.</p> <pre><code>type JobDependenciesDTO struct {\n    Service string `json:\"service\"` // Service represents the name of the dependent service.\n    Source  string `json:\"source\"`  // Source indicates the origin or source of the dependency.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/dtos/config-vault/docs/godoc/#type-jobparametersdto","title":"type JobParametersDTO","text":"<p>JobParametersDTO represents the data transfer object for job parameters. It includes the parser module that is used to parse the configuration.</p> <pre><code>type JobParametersDTO struct {\n    ParserModule string `json:\"parser_module\"` // ParserModule specifies the module used for parsing the configuration.\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/dtos/events-router/","title":"input-broker/dto","text":"<p><code>input-broker/dto</code> is a Go library that provides data transfer objects (DTOs) for managing input data within a system. This library includes structures for various DTOs, facilitating the transfer and validation of input data.</p>"},{"location":"reference/libs/golang/ddd/dtos/events-router/#features","title":"Features","text":"<ul> <li>Define DTOs for input entities.</li> <li>Facilitate data transfer between different components of the system.</li> <li>Ensure consistency and validation of input data.</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/events-router/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/dtos/events-router/#defining-input-dtos","title":"Defining Input DTOs","text":"<p>The <code>InputDTO</code> struct represents an input data transfer object with attributes such as ID, processing ID, service, source, provider, stage, and data.</p>"},{"location":"reference/libs/golang/ddd/dtos/events-router/#errmsgdto","title":"ErrMsgDTO","text":"<p>The <code>ErrMsgDTO</code> struct is used to represent error messages with attributes such as error, listener tag, and message.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    outputdto \"libs/golang/ddd/dtos/events-router/output\"\n)\n\nfunc main() {\n    errMsg := outputdto.ErrMsgDTO{\n        Err:         fmt.Errorf(\"an error occurred\"),\n        ListenerTag: \"listener_1\",\n        Msg:         []byte(\"error message\"),\n    }\n\n    fmt.Printf(\"ErrMsgDTO: %+v\\n\", errMsg)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/events-router/#processorderdto","title":"ProcessOrderDTO","text":"<p>The <code>ProcessOrderDTO</code> struct is used to represent order processing data with attributes such as ID, processing ID, service, source, provider, stage, and data.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    outputdto \"libs/golang/ddd/dtos/events-router/output\"\n)\n\nfunc main() {\n    order := outputdto.ProcessOrderDTO{\n        ID:           \"order_123\",\n        ProcessingID: \"proc_456\",\n        Service:      \"exampleService\",\n        Source:       \"exampleSource\",\n        Provider:     \"exampleProvider\",\n        Stage:        \"initial\",\n        Data:         map[string]interface{}{\"key1\": \"value1\", \"key2\": \"value2\"},\n    }\n\n    fmt.Printf(\"ProcessOrderDTO: %+v\\n\", order)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/events-router/#testing","title":"Testing","text":"<p>To run the tests for the <code>dto</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-dtos-events-router\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/events-router/#error-handling","title":"Error Handling","text":"<p>The DTOs include attributes and methods for managing error scenarios, such as:</p> <ul> <li>Representing error messages with detailed information.</li> <li>Ensuring data consistency and validation during order processing.</li> </ul> <p>These DTOs help in responding to various errors with appropriate messages and data structures.</p>"},{"location":"reference/libs/golang/ddd/dtos/events-router/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/dtos/events-router/docs/godoc/#outputdto","title":"outputdto","text":"<pre><code>import \"libs/golang/ddd/dtos/events-router/output\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/events-router/docs/godoc/#index","title":"Index","text":"<ul> <li>type ErrMsgDTO</li> <li>type ProcessOrderDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/events-router/docs/godoc/#type-errmsgdto","title":"type ErrMsgDTO","text":"<p>ErrMsgDTO represents the error message data transfer object.</p> <pre><code>type ErrMsgDTO struct {\n    Err         error  `json:\"error\"`\n    ListenerTag string `json:\"listener_tag\"`\n    Msg         []byte `json:\"msg\"`\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/dtos/events-router/docs/godoc/#type-processorderdto","title":"type ProcessOrderDTO","text":"<p>ProcessOrderDTO represents the data transfer object for processing orders. It includes the necessary details required for processing an order, such as the processing ID, service, source, provider, stage, and data.</p> <pre><code>type ProcessOrderDTO struct {\n    ID           string                 `json:\"_id\"`           // ID represents the unique identifier of the order.\n    ProcessingID string                 `json:\"processing_id\"` // ProcessingID represents the unique identifier of the order processing.\n    Service      string                 `json:\"service\"`       // Service represents the name of the service for which the order is processed.\n    Source       string                 `json:\"source\"`        // Source indicates the origin or source of the order.\n    Provider     string                 `json:\"provider\"`      // Provider specifies the provider of the order.\n    Stage        string                 `json:\"stage\"`         // Stage represents the current stage of the order processing.\n    InputID      string                 `json:\"input_id\"`      // InputID represents the unique identifier of the input data.\n    Data         map[string]interface{} `json:\"data\"`          // Data represents the order data.\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/","title":"input-broker/dto","text":"<p><code>input-broker/dto</code> is a Go library that provides data transfer objects (DTOs) for managing input and output data within a system. This library includes structures for input, output, and shared DTOs, facilitating the transfer and validation of input data.</p>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/#features","title":"Features","text":"<ul> <li>Define DTOs for input and output data.</li> <li>Facilitate data transfer between different components of the system.</li> <li>Ensure consistency and validation of input data.</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/dtos/input-broker/#defining-input-dtos","title":"Defining Input DTOs","text":"<p>The <code>InputDTO</code> struct represents an input data transfer object with attributes such as provider, service, source, and data.</p>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/#input-dto","title":"Input DTO","text":"<p>The <code>inputdto.InputDTO</code> struct is used to represent input data for various services.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/dtos/input-broker/inputdto\"\n)\n\nfunc main() {\n    input := inputdto.InputDTO{\n        Provider: \"exampleProvider\",\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Data: map[string]interface{}{\n            \"key1\": \"value1\",\n            \"key2\": \"value2\",\n        },\n    }\n\n    fmt.Printf(\"InputDTO: %+v\\n\", input)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/#defining-output-dtos","title":"Defining Output DTOs","text":"<p>The <code>OutputDTO</code> struct represents an output data transfer object with attributes such as ID, data, metadata, status, created at, and updated at.</p>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/#output-dto","title":"Output DTO","text":"<p>The <code>outputdto.OutputDTO</code> struct is used to represent output data, including metadata and status information.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/dtos/input-broker/outputdto\"\n    shareddto \"libs/golang/ddd/dtos/input-broker/shared\"\n)\n\nfunc main() {\n    output := outputdto.OutputDTO{\n        ID:   \"12345\",\n        Data: map[string]interface{}{\n            \"key1\": \"value1\",\n            \"key2\": \"value2\",\n        },\n        Metadata: shareddto.MetadataDTO{\n            Provider:            \"exampleProvider\",\n            Service:             \"exampleService\",\n            Source:              \"exampleSource\",\n            ProcessingID:        \"process123\",\n            ProcessingTimestamp: \"2023-06-08 12:00:00\",\n        },\n        Status: shareddto.StatusDTO{\n            Code:   200,\n            Detail: \"Success\",\n        },\n        CreatedAt: \"2023-06-08 12:00:00\",\n        UpdatedAt: \"2023-06-09 12:00:00\",\n    }\n\n    fmt.Printf(\"OutputDTO: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/#shared-dto","title":"Shared DTO","text":"<p>The <code>shareddto</code> package includes shared DTOs such as <code>MetadataDTO</code> and <code>StatusDTO</code>, which are used by both input and output DTOs.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    shareddto \"libs/golang/ddd/dtos/input-broker/shared\"\n)\n\nfunc main() {\n    metadata := shareddto.MetadataDTO{\n        Provider:            \"exampleProvider\",\n        Service:             \"exampleService\",\n        Source:              \"exampleSource\",\n        ProcessingID:        \"process123\",\n        ProcessingTimestamp: \"2023-06-08 12:00:00\",\n    }\n\n    status := shareddto.StatusDTO{\n        Code:   200,\n        Detail: \"Success\",\n    }\n\n    fmt.Printf(\"MetadataDTO: %+v\\n\", metadata)\n    fmt.Printf(\"StatusDTO: %+v\\n\", status)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#inputdto","title":"inputdto","text":"<pre><code>import \"libs/golang/ddd/dtos/input-broker/input\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>type InputDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#type-inputdto","title":"type InputDTO","text":"<p>InputDTO represents the input data transfer object.</p> <pre><code>type InputDTO struct {\n    Provider string                 `json:\"provider\"` // Provider represents the provider of the input data.\n    Service  string                 `json:\"service\"`  // Service represents the service of the input data.\n    Source   string                 `json:\"source\"`   // Source represents the source of the input data.\n    Data     map[string]interface{} `json:\"data\"`     // Data represents the input data.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#outputdto","title":"outputdto","text":"<pre><code>import \"libs/golang/ddd/dtos/input-broker/output\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#index_1","title":"Index","text":"<ul> <li>type InputDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#type-inputdto_1","title":"type InputDTO","text":"<p>InputDTO represents the input data transfer object.</p> <pre><code>type InputDTO struct {\n    ID        string                 `json:\"_id\"`        // ID represents the unique identifier of the input data.\n    Data      map[string]interface{} `json:\"data\"`       // Data represents the input data.\n    Metadata  shareddto.MetadataDTO  `json:\"metadata\"`   // Metadata represents the metadata of the input data.\n    Status    shareddto.StatusDTO    `json:\"status\"`     // Status represents the status of the input data.\n    CreatedAt string                 `json:\"created_at\"` // CreatedAt represents the timestamp when the input data was created.\n    UpdatedAt string                 `json:\"updated_at\"` // UpdatedAt represents the timestamp when the input data was last updated.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#shareddto","title":"shareddto","text":"<pre><code>import \"libs/golang/ddd/dtos/input-broker/shared\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#index_2","title":"Index","text":"<ul> <li>type MetadataDTO</li> <li>type StatusDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#type-metadatadto","title":"type MetadataDTO","text":"<p>MetadataDTO represents the metadata data transfer object.</p> <pre><code>type MetadataDTO struct {\n    Provider            string `json:\"provider\"`             // Provider represents the provider of the input data.\n    Service             string `json:\"service\"`              // Service represents the service of the input data.\n    Source              string `json:\"source\"`               // Source represents the source of the input data.\n    ProcessingID        string `json:\"processing_id\"`        // ProcessingID represents the unique identifier of the processing job.\n    ProcessingTimestamp string `json:\"processing_timestamp\"` // ProcessingTimestamp represents the timestamp when the processing job was executed.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/dtos/input-broker/docs/godoc/#type-statusdto","title":"type StatusDTO","text":"<p>StatusDTO represents the status data transfer object.</p> <pre><code>type StatusDTO struct {\n    Code   int    `json:\"code\"`   // Code represents the status code.\n    Detail string `json:\"detail\"` // Detail represents the status detail.\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/","title":"output-vault/dto","text":"<p><code>output-vault/dto</code> is a Go library that provides data transfer objects (DTOs) for managing output data within a system. This library includes structures for input and output DTOs, facilitating the transfer and validation of output data.</p>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/#features","title":"Features","text":"<ul> <li>Define DTOs for output input and output.</li> <li>Facilitate data transfer between different components of the system.</li> <li>Ensure consistency and validation of output data.</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/dtos/output-vault/#defining-output-dtos","title":"Defining Output DTOs","text":"<p>The <code>OutputDTO</code> struct represents an output data transfer object with attributes such as service, source, provider, and metadata.</p>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/#output-dto","title":"Output DTO","text":"<p>The <code>OutputDTO</code> struct is used to represent output data for output purposes.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    outputdto \"libs/golang/ddd/dtos/output-vault/output\"\n    shareddto \"libs/golang/ddd/dtos/output-vault/shared\"\n)\n\nfunc main() {\n    output := outputdto.OutputDTO{\n        ID:        \"12345\",\n        Data:      map[string]interface{}{\"field1\": \"value1\", \"field2\": \"value2\"},\n        Service:   \"exampleService\",\n        Source:    \"exampleSource\",\n        Provider:  \"exampleProvider\",\n        Metadata:  shareddto.MetadataDTO{\n            InputID: \"input_id\",\n            Input: shareddto.InputDTO{\n                Data:                map[string]interface{}{\"input1\": \"value1\"},\n                ProcessingID:        \"processing_id\",\n                ProcessingTimestamp: \"2023-06-01 00:00:00\",\n            },\n        },\n        CreatedAt: \"2023-06-08 12:00:00\",\n        UpdatedAt: \"2023-06-09 12:00:00\",\n    }\n\n    fmt.Printf(\"Output OutputDTO: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/#input-dto","title":"Input DTO","text":"<p>The <code>OutputDTO</code> struct is used to represent output data for input purposes.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    inputdto \"libs/golang/ddd/dtos/output-vault/input\"\n    shareddto \"libs/golang/ddd/dtos/output-vault/shared\"\n)\n\nfunc main() {\n    output := inputdto.OutputDTO{\n        Data:      map[string]interface{}{\"field1\": \"value1\", \"field2\": \"value2\"},\n        Service:   \"exampleService\",\n        Source:    \"exampleSource\",\n        Provider:  \"exampleProvider\",\n        Metadata:  shareddto.MetadataDTO{\n            InputID: \"input_id\",\n            Input: shareddto.InputDTO{\n                Data:                map[string]interface{}{\"input1\": \"value1\"},\n                ProcessingID:        \"processing_id\",\n                ProcessingTimestamp: \"2023-06-01 00:00:00\",\n            },\n        },\n    }\n\n    fmt.Printf(\"Input OutputDTO: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/#shared-dto","title":"Shared DTO","text":"<p>The <code>MetadataDTO</code> struct is used to represent metadata for both input and output DTOs.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    shareddto \"libs/golang/ddd/dtos/output-vault/shared\"\n)\n\nfunc main() {\n    metadata := shareddto.MetadataDTO{\n        InputID: \"input_id\",\n        Input: shareddto.InputDTO{\n            Data:                map[string]interface{}{\"input1\": \"value1\"},\n            ProcessingID:        \"processing_id\",\n            ProcessingTimestamp: \"2023-06-01 00:00:00\",\n        },\n    }\n\n    fmt.Printf(\"MetadataDTO: %+v\\n\", metadata)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#inputdto","title":"inputdto","text":"<pre><code>import \"libs/golang/ddd/dtos/output-vault/input\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type OutputDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#type-outputdto","title":"type OutputDTO","text":"<p>OutputDTO represents the data transfer object for output input. It includes the necessary details required for creating or updating a configuration, such as service details, source, provider and metadata.</p> <pre><code>type OutputDTO struct {\n    Data     map[string]interface{} `json:\"data\"`     // Data represents the output data.\n    Service  string                 `json:\"service\"`  // Service represents the name of the service for which the output is created.\n    Source   string                 `json:\"source\"`   // Source indicates the origin or source of the output.\n    Provider string                 `json:\"provider\"` // Provider specifies the provider of the output.\n    Metadata shareddto.MetadataDTO  `json:\"metadata\"` // Metadata represents the metadata of the output.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#outputdto","title":"outputdto","text":"<pre><code>import \"libs/golang/ddd/dtos/output-vault/output\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#index_1","title":"Index","text":"<ul> <li>type OutputDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#type-outputdto_1","title":"type OutputDTO","text":"<p>OutputDTO represents the data transfer object for output output. It includes the necessary details required for creating or updating or listing an output, such as service details, source, provider and metadata.</p> <pre><code>type OutputDTO struct {\n    ID        string                 `json:\"_id\"`        // ID is the unique identifier of the output.\n    Data      map[string]interface{} `json:\"data\"`       // Data represents the output data.\n    Service   string                 `json:\"service\"`    // Service represents the name of the service for which the output is created.\n    Source    string                 `json:\"source\"`     // Source indicates the origin or source of the output.\n    Provider  string                 `json:\"provider\"`   // Provider specifies the provider of the output.\n    Metadata  shareddto.MetadataDTO  `json:\"metadata\"`   // Metadata represents the metadata of the output.\n    CreatedAt string                 `json:\"created_at\"` // CreatedAt is the timestamp when the output was created.\n    UpdatedAt string                 `json:\"updated_at\"` // UpdatedAt is the timestamp when the output was last updated.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#shareddto","title":"shareddto","text":"<pre><code>import \"libs/golang/ddd/dtos/output-vault/shared\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#index_2","title":"Index","text":"<ul> <li>type InputDTO</li> <li>type MetadataDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#type-inputdto","title":"type InputDTO","text":"<p>InputDTO represents the data transfer object for input metadata for both input and output dto.</p> <pre><code>type InputDTO struct {\n    Data                map[string]interface{} `json:\"data\"`                 // Data represents the input data.\n    ProcessingID        string                 `json:\"processing_id\"`        // ProcessingID is the unique identifier of the processing job.\n    ProcessingTimestamp string                 `json:\"processing_timestamp\"` // ProcessingTimestamp is the timestamp when the processing job was executed.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/dtos/output-vault/docs/godoc/#type-metadatadto","title":"type MetadataDTO","text":"<p>MetadataDTO represents the data transfer object for metadata for both input and output dto.</p> <pre><code>type MetadataDTO struct {\n    InputID string   `json:\"input_id\"` // InputID is the unique identifier of the input data.\n    Input   InputDTO `json:\"input\"`    // Input represents the input data of the Output entity.\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/","title":"schema-vault/dtos","text":"<p><code>schema-vault/dtos</code> is a Go library that provides data transfer objects (DTOs) for the schema vault domain. These DTOs facilitate the communication between different layers of the application by providing a structured way to transfer schema-related data.</p>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/#features","title":"Features","text":"<ul> <li>Define DTOs for schema input.</li> <li>Define DTOs for schema output.</li> <li>Shared DTOs for common JSON schema representation.</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/dtos/schema-vault/#input-dto","title":"Input DTO","text":"<p>The <code>SchemaDTO</code> in the <code>inputdto</code> package represents the data transfer object for schema input. It includes the necessary details required for creating or updating a schema, such as service details, source, provider, and JSON schema.</p>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/dtos/schema-vault/inputdto\"\n    shareddto \"libs/golang/ddd/dtos/schema-vault/shared\"\n)\n\nfunc main() {\n    schemaInput := inputdto.SchemaDTO{\n        Service:    \"exampleService\",\n        Source:     \"exampleSource\",\n        Provider:   \"exampleProvider\",\n        SchemaType: \"exampleSchemaType\",\n        JsonSchema: shareddto.JsonSchema{\n            Required: []string{\"field1\"},\n            Properties: map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            JsonType: \"object\",\n        },\n    }\n\n    fmt.Printf(\"Schema Input DTO: %+v\\n\", schemaInput)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/#output-dto","title":"Output DTO","text":"<p>The <code>SchemaDTO</code> in the <code>outputdto</code> package represents the data transfer object for schema output. It includes the necessary details required for fetching or displaying a schema, such as service details, source, provider, and JSON schema, along with additional metadata like ID, version ID, and timestamps.</p>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/#example_1","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/dtos/schema-vault/outputdto\"\n    shareddto \"libs/golang/ddd/dtos/schema-vault/shared\"\n)\n\nfunc main() {\n    schemaOutput := outputdto.SchemaDTO{\n        ID:          \"exampleID\",\n        Service:     \"exampleService\",\n        Source:      \"exampleSource\",\n        Provider:    \"exampleProvider\",\n        SchemaType:  \"exampleSchemaType\",\n        JsonSchema: shareddto.JsonSchema{\n            Required: []string{\"field1\"},\n            Properties: map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            JsonType: \"object\",\n        },\n        SchemaVersionID: \"exampleVersionID\",\n        CreatedAt:       \"2023-01-01T00:00:00Z\",\n        UpdatedAt:       \"2023-01-02T00:00:00Z\",\n    }\n\n    fmt.Printf(\"Schema Output DTO: %+v\\n\", schemaOutput)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/#shared-dto","title":"Shared DTO","text":"<p>The <code>JsonSchema</code> in the <code>shareddto</code> package represents a common JSON schema. It includes the required fields, properties, and type of the JSON schema.</p>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/#example_2","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    shareddto \"libs/golang/ddd/dtos/schema-vault/shared\"\n)\n\nfunc main() {\n    jsonSchema := shareddto.JsonSchema{\n        Required: []string{\"field1\"},\n        Properties: map[string]interface{}{\n            \"field1\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n            \"field2\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n        },\n        JsonType: \"object\",\n    }\n\n    fmt.Printf(\"JSON Schema DTO: %+v\\n\", jsonSchema)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#inputdto","title":"inputdto","text":"<pre><code>import \"libs/golang/ddd/dtos/schema-vault/input\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type SchemaDTO</li> <li>type SchemaDataDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#type-schemadto","title":"type SchemaDTO","text":"<p>SchemaDTO represents the data transfer object for schema input. It includes the necessary details required for creating or updating a schema, such as service details, source, provider, and JSON schema.</p> <pre><code>type SchemaDTO struct {\n    Service    string                  `json:\"service\"`     // Service represents the name of the service for which the configuration is created.\n    Source     string                  `json:\"source\"`      // Source indicates the origin or source of the configuration.\n    Provider   string                  `json:\"provider\"`    // Provider specifies the provider of the configuration.\n    SchemaType string                  `json:\"schema_type\"` // SchemaType specifies the type of schema.\n    JsonSchema shareddto.JsonSchemaDTO `json:\"json_schema\"` // JsonSchemaDTO represents the JSON schema of the configuration.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#type-schemadatadto","title":"type SchemaDataDTO","text":"<pre><code>type SchemaDataDTO struct {\n    Service    string                 `json:\"service\"`     // Service represents the name of the service for which the configuration is created.\n    Source     string                 `json:\"source\"`      // Source indicates the origin or source of the configuration.\n    Provider   string                 `json:\"provider\"`    // Provider specifies the provider of the configuration.\n    SchemaType string                 `json:\"schema_type\"` // SchemaType specifies the type of schema.\n    Data       map[string]interface{} `json:\"data\"`        // Data represents the data of the respective schema type.\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#outputdto","title":"outputdto","text":"<pre><code>import \"libs/golang/ddd/dtos/schema-vault/output\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#index_1","title":"Index","text":"<ul> <li>type SchemaDTO</li> <li>type SchemaValidationDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#type-schemadto_1","title":"type SchemaDTO","text":"<p>SchemaDTO represents the data transfer object for schema output. It includes the necessary details required for fetching or displaying a schema, such as service details, source, provider, and JSON schema.</p> <pre><code>type SchemaDTO struct {\n    ID              string                  `json:\"_id\"`               // ID is the unique identifier of the Schema entity.\n    Service         string                  `json:\"service\"`           // Service represents the name of the service for which the configuration is created.\n    Source          string                  `json:\"source\"`            // Source indicates the origin or source of the configuration.\n    Provider        string                  `json:\"provider\"`          // Provider specifies the provider of the configuration.\n    SchemaType      string                  `json:\"schema_type\"`       // SchemaType specifies the type of schema.\n    JsonSchema      shareddto.JsonSchemaDTO `json:\"json_schema\"`       // JsonSchemaDTO represents the JSON schema of the configuration.\n    SchemaVersionID string                  `json:\"schema_version_id\"` // SchemaVersionID is the unique identifier of the schema version.\n    CreatedAt       string                  `json:\"created_at\"`        // CreatedAt is the timestamp when the Schema entity was created.\n    UpdatedAt       string                  `json:\"updated_at\"`        // UpdatedAt is the timestamp when the Schema entity was last updated.\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#type-schemavalidationdto","title":"type SchemaValidationDTO","text":"<pre><code>type SchemaValidationDTO struct {\n    Valid bool `json:\"valid\"`\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#shareddto","title":"shareddto","text":"<pre><code>import \"libs/golang/ddd/dtos/schema-vault/shared\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#index_2","title":"Index","text":"<ul> <li>type JsonSchemaDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/dtos/schema-vault/docs/godoc/#type-jsonschemadto","title":"type JsonSchemaDTO","text":"<p>JsonSchemaDTO is a DTO that represents a JSON schema. It includes the required fields, properties, and type of the JSON schema.</p> <pre><code>type JsonSchemaDTO struct {\n    Required   []string               `json:\"required\"`   // Required lists the required fields in the JSON schema.\n    Properties map[string]interface{} `json:\"properties\"` // Properties lists the properties in the JSON schema.\n    JsonType   string                 `json:\"type\"`       // JsonType specifies the type of JSON schema.\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/events/event-mock/","title":"event-mock","text":"<p>The <code>event-mock</code> library provides mock implementations of the <code>EventInterface</code> and <code>EventDispatcherInterface</code> from the <code>go-events</code> package. These mocks are useful for testing purposes, allowing you to simulate and verify the behavior of event handling in your applications.</p>"},{"location":"reference/libs/golang/ddd/events/event-mock/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/events/event-mock/#mockevent","title":"MockEvent","text":"<p><code>MockEvent</code> is a mock implementation of the <code>EventInterface</code>. It can be used to simulate events in your tests.</p>"},{"location":"reference/libs/golang/ddd/events/event-mock/#methods","title":"Methods","text":"<ul> <li><code>GetName() string</code>: Returns the name of the mock event.</li> <li><code>GetDateTime() time.Time</code>: Returns the date and time of the mock event.</li> <li><code>GetPayload() interface{}</code>: Returns the payload of the mock event.</li> <li><code>SetPayload(payload interface{})</code>: Sets the payload of the mock event.</li> </ul>"},{"location":"reference/libs/golang/ddd/events/event-mock/#mockeventdispatcher","title":"MockEventDispatcher","text":"<p><code>MockEventDispatcher</code> is a mock implementation of the <code>EventDispatcherInterface</code>. It can be used to simulate event dispatching in your tests.</p>"},{"location":"reference/libs/golang/ddd/events/event-mock/#methods_1","title":"Methods","text":"<ul> <li><code>Register(eventName string, handler events.EventHandlerInterface) error</code>: Registers an event handler for a specific event name.</li> <li><code>Dispatch(event events.EventInterface, exchangeName string, routingKey string) error</code>: Dispatches an event.</li> <li><code>Remove(eventName string, handler events.EventHandlerInterface) error</code>: Removes an event handler for a specific event name.</li> <li><code>Has(eventName string, handler events.EventHandlerInterface) bool</code>: Checks if a specific event handler is registered for an event name.</li> <li><code>Clear()</code>: Clears all event handlers.</li> </ul>"},{"location":"reference/libs/golang/ddd/events/event-mock/#example","title":"Example","text":"<p>Here is an example of how to use the <code>event-mock</code> library in your tests:</p> <pre><code>package yourpackage\n\nimport (\n    \"testing\"\n    \"time\"\n\n    \"github.com/stretchr/testify/mock\"\n    \"github.com/stretchr/testify/suite\"\n    \"libs/golang/ddd/events/event-mock/mock\"\n    events \"libs/golang/shared/go-events/amqp_events\"\n)\n\ntype YourTestSuite struct {\n    suite.Suite\n    eventMock        *eventmock.MockEvent\n    dispatcherMock   *eventmock.MockEventDispatcher\n}\n\nfunc (suite *YourTestSuite) SetupTest() {\n    suite.eventMock = new(eventmock.MockEvent)\n    suite.dispatcherMock = new(eventmock.MockEventDispatcher)\n}\n\nfunc (suite *YourTestSuite) TestYourFunction() {\n    // Arrange\n    suite.eventMock.On(\"GetName\").Return(\"TestEvent\")\n    suite.eventMock.On(\"GetDateTime\").Return(time.Now())\n    suite.eventMock.On(\"GetPayload\").Return(\"payload\")\n    suite.eventMock.On(\"SetPayload\", mock.Anything).Return()\n\n    suite.dispatcherMock.On(\"Dispatch\", suite.eventMock, \"exchange\", \"routingKey\").Return(nil)\n\n    // Act\n    // Call your function that uses the event and dispatcher mocks\n\n    // Assert\n    suite.eventMock.AssertExpectations(suite.T())\n    suite.dispatcherMock.AssertExpectations(suite.T())\n}\n\nfunc TestYourTestSuite(t *testing.T) {\n    suite.Run(t, new(YourTestSuite))\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#eventmock","title":"eventmock","text":"<pre><code>import \"libs/golang/ddd/events/event-mock/mock\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#index","title":"Index","text":"<ul> <li>type MockEvent</li> <li>func (m *MockEvent) GetDateTime() time.Time</li> <li>func (m *MockEvent) GetName() string</li> <li>func (m *MockEvent) GetPayload() interface{}</li> <li>func (m *MockEvent) SetPayload(payload interface{})</li> <li>type MockEventDispatcher</li> <li>func (m *MockEventDispatcher) Clear()</li> <li>func (m *MockEventDispatcher) Dispatch(event events.EventInterface, routingKey string) error</li> <li>func (m *MockEventDispatcher) Has(eventName string, handler events.EventHandlerInterface) bool</li> <li>func (m *MockEventDispatcher) Register(eventName string, handler events.EventHandlerInterface) error</li> <li>func (m *MockEventDispatcher) Remove(eventName string, handler events.EventHandlerInterface) error</li> </ul>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#type-mockevent","title":"type MockEvent","text":"<p>MockEvent is a mock implementation of EventInterface used for testing purposes.</p> <pre><code>type MockEvent struct {\n    mock.Mock\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#func-mockevent-getdatetime","title":"func (*MockEvent) GetDateTime","text":"<pre><code>func (m *MockEvent) GetDateTime() time.Time\n</code></pre> <p>GetDateTime returns the date and time of the mock event.</p> <p>Returns:</p> <ul> <li>A time.Time value representing the date and time of the event.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#func-mockevent-getname","title":"func (*MockEvent) GetName","text":"<pre><code>func (m *MockEvent) GetName() string\n</code></pre> <p>GetName returns the name of the mock event.</p> <p>Returns:</p> <ul> <li>A string representing the name of the event.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#func-mockevent-getpayload","title":"func (*MockEvent) GetPayload","text":"<pre><code>func (m *MockEvent) GetPayload() interface{}\n</code></pre> <p>GetPayload returns the payload of the mock event.</p> <p>Returns:</p> <ul> <li>An interface{} representing the payload of the event.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#func-mockevent-setpayload","title":"func (*MockEvent) SetPayload","text":"<pre><code>func (m *MockEvent) SetPayload(payload interface{})\n</code></pre> <p>SetPayload sets the payload of the mock event.</p> <p>Parameters:</p> <ul> <li>payload: An interface{} representing the payload to be set.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#type-mockeventdispatcher","title":"type MockEventDispatcher","text":"<p>MockEventDispatcher is a mock implementation of EventDispatcherInterface used for testing purposes.</p> <pre><code>type MockEventDispatcher struct {\n    mock.Mock\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#func-mockeventdispatcher-clear","title":"func (*MockEventDispatcher) Clear","text":"<pre><code>func (m *MockEventDispatcher) Clear()\n</code></pre> <p>Clear clears all event handlers in the mock dispatcher.</p> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#func-mockeventdispatcher-dispatch","title":"func (*MockEventDispatcher) Dispatch","text":"<pre><code>func (m *MockEventDispatcher) Dispatch(event events.EventInterface, routingKey string) error\n</code></pre> <p>Dispatch dispatches an event using the mock dispatcher.</p> <p>Parameters:</p> <ul> <li>event: An instance of EventInterface representing the event to be dispatched.</li> <li>routingKey: A string representing the routing key for the event.</li> </ul> <p>Returns:</p> <ul> <li>An error if dispatching fails, or nil if successful.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#func-mockeventdispatcher-has","title":"func (*MockEventDispatcher) Has","text":"<pre><code>func (m *MockEventDispatcher) Has(eventName string, handler events.EventHandlerInterface) bool\n</code></pre> <p>Has checks if a specific event handler is registered for an event name in the mock dispatcher.</p> <p>Parameters:</p> <ul> <li>eventName: A string representing the name of the event.</li> <li>handler: An instance of EventHandlerInterface to check for registration.</li> </ul> <p>Returns:</p> <ul> <li>A boolean indicating whether the handler is registered.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#func-mockeventdispatcher-register","title":"func (*MockEventDispatcher) Register","text":"<pre><code>func (m *MockEventDispatcher) Register(eventName string, handler events.EventHandlerInterface) error\n</code></pre> <p>Register registers an event handler for a specific event name in the mock dispatcher.</p> <p>Parameters:</p> <ul> <li>eventName: A string representing the name of the event.</li> <li>handler: An instance of EventHandlerInterface to handle the event.</li> </ul> <p>Returns:</p> <ul> <li>An error if registration fails, or nil if successful.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/events/event-mock/docs/godoc/#func-mockeventdispatcher-remove","title":"func (*MockEventDispatcher) Remove","text":"<pre><code>func (m *MockEventDispatcher) Remove(eventName string, handler events.EventHandlerInterface) error\n</code></pre> <p>Remove removes an event handler for a specific event name in the mock dispatcher.</p> <p>Parameters:</p> <ul> <li>eventName: A string representing the name of the event.</li> <li>handler: An instance of EventHandlerInterface to be removed.</li> </ul> <p>Returns:</p> <ul> <li>An error if removal fails, or nil if successful.</li> </ul> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/events/events-router/","title":"events-router/event","text":"<p><code>events-router/event</code> is a Go library designed for handling and dispatching events related to event order operations within the <code>events-router</code> domain. This library provides mechanisms for creating, registering, and processing events, with a focus on AMQP-based event handling.</p>"},{"location":"reference/libs/golang/ddd/events/events-router/#features","title":"Features","text":"<ul> <li>Create and manage <code>ErrorCreated</code> and <code>OrderedProcess</code> events.</li> <li>Register event handlers for specific events.</li> <li>Dispatch events to registered handlers concurrently.</li> <li>Notify systems of event occurrences.</li> </ul>"},{"location":"reference/libs/golang/ddd/events/events-router/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/events/events-router/#creating-an-errorcreated-event","title":"Creating an ErrorCreated Event","text":"<p>The <code>ErrorCreated</code> struct represents an event when an error is created. Use the <code>NewErrorCreated</code> function to create a new instance of this event.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/events/events-router/event\"\n)\n\nfunc main() {\n    errorCreatedEvent := event.NewErrorCreated()\n    errorCreatedEvent.SetPayload(map[string]interface{}{\n        \"errorID\":   \"12345\",\n        \"errorCode\": \"500\",\n    })\n    fmt.Println(\"Event created:\", errorCreatedEvent)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/#handling-the-errorcreated-event","title":"Handling the ErrorCreated Event","text":"<p>The <code>ErrorCreatedHandler</code> struct handles events of type <code>ErrorCreated</code>. Implement the <code>NotifierInterface</code> to define how notifications should be sent when the event is handled.</p> <pre><code>package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"sync\"\n    \"libs/golang/ddd/events/events-router/event\"\n    \"libs/golang/ddd/events/events-router/handler\"\n)\n\ntype Notifier struct{}\n\nfunc (n *Notifier) Notify(message []byte, routingKey string) error {\n    fmt.Println(\"Notification sent:\", string(message))\n    return nil\n}\n\nfunc main() {\n    notifier := &amp;Notifier{}\n    handler := handler.NewErrorCreatedHandler(notifier)\n\n    event := event.NewErrorCreated()\n    event.SetPayload(map[string]interface{}{\n        \"errorID\":   \"12345\",\n        \"errorCode\": \"500\",\n    })\n\n    wg := &amp;sync.WaitGroup{}\n    wg.Add(1)\n    go handler.Handle(event, wg, \"exchangeName\", \"routingKey\")\n    wg.Wait()\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/#creating-an-orderedprocess-event","title":"Creating an OrderedProcess Event","text":"<p>The <code>OrderedProcess</code> struct represents an event when an order is processed. Use the <code>NewOrderedProcess</code> function to create a new instance of this event.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/events/events-router/event\"\n)\n\nfunc main() {\n    orderedProcessEvent := event.NewOrderedProcess()\n    orderedProcessEvent.SetPayload(map[string]interface{}{\n        \"orderID\": \"54321\",\n        \"status\":  \"processed\",\n    })\n    fmt.Println(\"Event created:\", orderedProcessEvent)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/#handling-the-orderedprocess-event","title":"Handling the OrderedProcess Event","text":"<p>The <code>OrderedProcessHandler</code> struct handles events of type <code>OrderedProcess</code>. Implement the <code>NotifierInterface</code> to define how notifications should be sent when the event is handled.</p> <pre><code>package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"sync\"\n    \"libs/golang/ddd/events/events-router/event\"\n    \"libs/golang/ddd/events/events-router/handler\"\n)\n\ntype Notifier struct{}\n\nfunc (n *Notifier) Notify(message []byte, routingKey string) error {\n    fmt.Println(\"Notification sent:\", string(message))\n    return nil\n}\n\nfunc main() {\n    notifier := &amp;Notifier{}\n    handler := handler.NewOrderedProcessHandler(notifier)\n\n    event := event.NewOrderedProcess()\n    event.SetPayload(map[string]interface{}{\n        \"orderID\": \"54321\",\n        \"status\":  \"processed\",\n    })\n\n    wg := &amp;sync.WaitGroup{}\n    wg.Add(1)\n    go handler.Handle(event, wg, \"exchangeName\", \"routingKey\")\n    wg.Wait()\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/#registering-event-handlers","title":"Registering Event Handlers","text":"<p>Register event handlers to handle specific events using the <code>go-events</code> library.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/events/events-router/event\"\n    \"libs/golang/ddd/events/events-router/handler\"\n    events \"libs/golang/shared/go-events/amqp_events\"\n)\n\nfunc main() {\n    dispatcher := events.NewEventDispatcher()\n    notifier := &amp;Notifier{}\n    errorHandler := handler.NewErrorCreatedHandler(notifier)\n    orderedHandler := handler.NewOrderedProcessHandler(notifier)\n\n    err := dispatcher.Register(\"ErrorCreated\", errorHandler)\n    if err != nil {\n        fmt.Println(\"Error registering error handler:\", err)\n    }\n\n    err = dispatcher.Register(\"OrderedProcess\", orderedHandler)\n    if err != nil {\n        fmt.Println(\"Error registering ordered handler:\", err)\n    }\n\n    errorEvent := event.NewErrorCreated()\n    errorEvent.SetPayload(map[string]interface{}{\n        \"errorID\":   \"12345\",\n        \"errorCode\": \"500\",\n    })\n\n    orderedEvent := event.NewOrderedProcess()\n    orderedEvent.SetPayload(map[string]interface{}{\n        \"orderID\": \"54321\",\n        \"status\":  \"processed\",\n    })\n\n    err = dispatcher.Dispatch(errorEvent, \"exchangeName\", \"routingKey\")\n    if err != nil {\n        fmt.Println(\"Error dispatching error event:\", err)\n    }\n\n    err = dispatcher.Dispatch(orderedEvent, \"exchangeName\", \"routingKey\")\n    if err != nil {\n        fmt.Println(\"Error dispatching ordered event:\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/#interfaces","title":"Interfaces","text":""},{"location":"reference/libs/golang/ddd/events/events-router/#eventinterface","title":"EventInterface","text":"<p>Defines the methods that an event should implement.</p> <pre><code>type EventInterface interface {\n    GetName() string\n    GetDateTime() time.Time\n    GetPayload() interface{}\n    SetPayload(payload interface{})\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/#eventhandlerinterface","title":"EventHandlerInterface","text":"<p>Defines the method that an event handler should implement.</p> <pre><code>type EventHandlerInterface interface {\n    Handle(event EventInterface, wg *sync.WaitGroup, exchangeName string, routingKey string)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/#notifierinterface","title":"NotifierInterface","text":"<p>Defines the methods that a notifier should implement.</p> <pre><code>type NotifierInterface interface {\n    Notify(message []byte, routingKey string) error\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/#testing","title":"Testing","text":"<p>To run the tests for the <code>event</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-events-events-router\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#event","title":"event","text":"<pre><code>import \"libs/golang/ddd/events/events-router/event\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#index","title":"Index","text":"<ul> <li>type ErrorCreated</li> <li>func NewErrorCreated() *ErrorCreated</li> <li>func (e *ErrorCreated) GetDateTime() time.Time</li> <li>func (e *ErrorCreated) GetName() string</li> <li>func (e *ErrorCreated) GetPayload() interface{}</li> <li>func (e *ErrorCreated) SetPayload(payload interface{})</li> <li>type OrderedProcess</li> <li>func NewOrderedProcess() *OrderedProcess</li> <li>func (e *OrderedProcess) GetDateTime() time.Time</li> <li>func (e *OrderedProcess) GetName() string</li> <li>func (e *OrderedProcess) GetPayload() interface{}</li> <li>func (e *OrderedProcess) SetPayload(payload interface{})</li> </ul>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#type-errorcreated","title":"type ErrorCreated","text":"<pre><code>type ErrorCreated struct {\n    Name    string\n    Payload interface{}\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-newerrorcreated","title":"func NewErrorCreated","text":"<pre><code>func NewErrorCreated() *ErrorCreated\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-errorcreated-getdatetime","title":"func (*ErrorCreated) GetDateTime","text":"<pre><code>func (e *ErrorCreated) GetDateTime() time.Time\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-errorcreated-getname","title":"func (*ErrorCreated) GetName","text":"<pre><code>func (e *ErrorCreated) GetName() string\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-errorcreated-getpayload","title":"func (*ErrorCreated) GetPayload","text":"<pre><code>func (e *ErrorCreated) GetPayload() interface{}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-errorcreated-setpayload","title":"func (*ErrorCreated) SetPayload","text":"<pre><code>func (e *ErrorCreated) SetPayload(payload interface{})\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#type-orderedprocess","title":"type OrderedProcess","text":"<pre><code>type OrderedProcess struct {\n    Name    string\n    Payload interface{}\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-neworderedprocess","title":"func NewOrderedProcess","text":"<pre><code>func NewOrderedProcess() *OrderedProcess\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-orderedprocess-getdatetime","title":"func (*OrderedProcess) GetDateTime","text":"<pre><code>func (e *OrderedProcess) GetDateTime() time.Time\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-orderedprocess-getname","title":"func (*OrderedProcess) GetName","text":"<pre><code>func (e *OrderedProcess) GetName() string\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-orderedprocess-getpayload","title":"func (*OrderedProcess) GetPayload","text":"<pre><code>func (e *OrderedProcess) GetPayload() interface{}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-orderedprocess-setpayload","title":"func (*OrderedProcess) SetPayload","text":"<pre><code>func (e *OrderedProcess) SetPayload(payload interface{})\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#handler","title":"handler","text":"<pre><code>import \"libs/golang/ddd/events/events-router/handlers\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#index_1","title":"Index","text":"<ul> <li>type ErrorCreatedHandler</li> <li>func NewErrorCreatedHandler(notifier NotifierInterface) *ErrorCreatedHandler</li> <li>func (si *ErrorCreatedHandler) Handle(event events.EventInterface, wg *sync.WaitGroup, routingKey string)</li> <li>type MockRabbitMQNotifier</li> <li>func (m *MockRabbitMQNotifier) Notify(message []byte, routingKey string) error</li> <li>type NotifierInterface</li> <li>type OrderedProcessHandler</li> <li>func NewOrderedProcessHandler(notifier NotifierInterface) *OrderedProcessHandler</li> <li>func (si *OrderedProcessHandler) Handle(event events.EventInterface, wg *sync.WaitGroup, routingKey string)</li> </ul>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#type-errorcreatedhandler","title":"type ErrorCreatedHandler","text":"<p>ErrorCreatedHandler handles events of type ErrorCreated.</p> <pre><code>type ErrorCreatedHandler struct {\n    Notifier NotifierInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-newerrorcreatedhandler","title":"func NewErrorCreatedHandler","text":"<pre><code>func NewErrorCreatedHandler(notifier NotifierInterface) *ErrorCreatedHandler\n</code></pre> <p>NewErrorCreatedHandler creates a new ErrorCreatedHandler.</p> <p></p>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-errorcreatedhandler-handle","title":"func (*ErrorCreatedHandler) Handle","text":"<pre><code>func (si *ErrorCreatedHandler) Handle(event events.EventInterface, wg *sync.WaitGroup, routingKey string)\n</code></pre> <p>Handle processes the event and sends a notification.</p> <p></p>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#type-mockrabbitmqnotifier","title":"type MockRabbitMQNotifier","text":"<p>MockRabbitMQNotifier is a mock implementation of RabbitMQNotifier for testing purposes.</p> <pre><code>type MockRabbitMQNotifier struct {\n    mock.Mock\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-mockrabbitmqnotifier-notify","title":"func (*MockRabbitMQNotifier) Notify","text":"<pre><code>func (m *MockRabbitMQNotifier) Notify(message []byte, routingKey string) error\n</code></pre> <p>Notify is the mock implementation of the Notify method.</p> <p></p>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#type-notifierinterface","title":"type NotifierInterface","text":"<p>NotifierInterface defines the methods that a notifier should implement.</p> <pre><code>type NotifierInterface interface {\n    Notify(message []byte, routingKey string) error\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#type-orderedprocesshandler","title":"type OrderedProcessHandler","text":"<p>OrderedProcessHandler handles events of type OrderedProcess.</p> <pre><code>type OrderedProcessHandler struct {\n    Notifier NotifierInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-neworderedprocesshandler","title":"func NewOrderedProcessHandler","text":"<pre><code>func NewOrderedProcessHandler(notifier NotifierInterface) *OrderedProcessHandler\n</code></pre> <p>NewOrderedProcessHandler creates a new OrderedProcessHandler.</p> <p></p>"},{"location":"reference/libs/golang/ddd/events/events-router/docs/godoc/#func-orderedprocesshandler-handle","title":"func (*OrderedProcessHandler) Handle","text":"<pre><code>func (si *OrderedProcessHandler) Handle(event events.EventInterface, wg *sync.WaitGroup, routingKey string)\n</code></pre> <p>Handle processes the event and sends a notification.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/events/input-broker/","title":"input-broker/event","text":"<p><code>input-broker/event</code> is a Go library designed for handling and dispatching events related to input operations. This library provides mechanisms for creating, registering, and processing events, with a focus on AMQP-based event handling.</p>"},{"location":"reference/libs/golang/ddd/events/input-broker/#features","title":"Features","text":"<ul> <li>Create and manage <code>InputCreated</code> events.</li> <li>Register event handlers for specific events.</li> <li>Dispatch events to registered handlers concurrently.</li> <li>Notify systems of event occurrences.</li> </ul>"},{"location":"reference/libs/golang/ddd/events/input-broker/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/events/input-broker/#creating-an-inputcreated-event","title":"Creating an InputCreated Event","text":"<p>The <code>InputCreated</code> struct represents an event when a new input is created. Use the <code>NewInputCreated</code> function to create a new instance of this event.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/events/input-broker/event\"\n)\n\nfunc main() {\n    inputCreatedEvent := event.NewInputCreated()\n    inputCreatedEvent.SetPayload(map[string]interface{}{\n        \"inputID\": \"12345\",\n        \"status\":  \"created\",\n    })\n    fmt.Println(\"Event created:\", inputCreatedEvent)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/#handling-the-inputcreated-event","title":"Handling the InputCreated Event","text":"<p>The <code>InputCreatedHandler</code> struct handles events of type <code>InputCreated</code>. Implement the <code>NotifierInterface</code> to define how notifications should be sent when the event is handled.</p> <pre><code>package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"sync\"\n    \"libs/golang/ddd/events/input-broker/event\"\n    \"libs/golang/ddd/events/input-broker/handler\"\n)\n\ntype Notifier struct{}\n\nfunc (n *Notifier) Notify(message []byte, routingKey string) error {\n    fmt.Println(\"Notification sent:\", string(message))\n    return nil\n}\n\nfunc main() {\n    notifier := &amp;Notifier{}\n    handler := handler.NewInputCreatedHandler(notifier)\n\n    event := event.NewInputCreated()\n    event.SetPayload(map[string]interface{}{\n        \"inputID\": \"12345\",\n        \"status\":  \"created\",\n    })\n\n    wg := &amp;sync.WaitGroup{}\n    wg.Add(1)\n    go handler.Handle(event, wg, \"exchangeName\", \"routingKey\")\n    wg.Wait()\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/#registering-event-handlers","title":"Registering Event Handlers","text":"<p>Register event handlers to handle specific events using the <code>go-events</code> library.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/events/input-broker/event\"\n    \"libs/golang/ddd/events/input-broker/handler\"\n    events \"libs/golang/shared/go-events/amqp_events\"\n)\n\nfunc main() {\n    dispatcher := events.NewEventDispatcher()\n    notifier := &amp;Notifier{}\n    handler := handler.NewInputCreatedHandler(notifier)\n\n    err := dispatcher.Register(\"InputCreated\", handler)\n    if err != nil {\n        fmt.Println(\"Error registering handler:\", err)\n    }\n\n    event := event.NewInputCreated()\n    event.SetPayload(map[string]interface{}{\n        \"inputID\": \"12345\",\n        \"status\":  \"created\",\n    })\n\n    err = dispatcher.Dispatch(event, \"exchangeName\", \"routingKey\")\n    if err != nil {\n        fmt.Println(\"Error dispatching event:\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/#interfaces","title":"Interfaces","text":""},{"location":"reference/libs/golang/ddd/events/input-broker/#eventinterface","title":"EventInterface","text":"<p>Defines the methods that an event should implement.</p> <pre><code>type EventInterface interface {\n    GetName() string\n    GetDateTime() time.Time\n    GetPayload() interface{}\n    SetPayload(payload interface{})\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/#eventhandlerinterface","title":"EventHandlerInterface","text":"<p>Defines the method that an event handler should implement.</p> <pre><code>type EventHandlerInterface interface {\n    Handle(event EventInterface, wg *sync.WaitGroup, exchangeName string, routingKey string)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/#notifierinterface","title":"NotifierInterface","text":"<p>Defines the methods that a notifier should implement.</p> <pre><code>type NotifierInterface interface {\n    Notify(message []byte, routingKey string) error\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/#testing","title":"Testing","text":"<p>To run the tests for the <code>event</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-events-input-broker\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#event","title":"event","text":"<pre><code>import \"libs/golang/ddd/events/input-broker/event\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>type InputCreated</li> <li>func NewInputCreated() *InputCreated</li> <li>func (e *InputCreated) GetDateTime() time.Time</li> <li>func (e *InputCreated) GetName() string</li> <li>func (e *InputCreated) GetPayload() interface{}</li> <li>func (e *InputCreated) SetPayload(payload interface{})</li> </ul>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#type-inputcreated","title":"type InputCreated","text":"<pre><code>type InputCreated struct {\n    Name    string\n    Payload interface{}\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#func-newinputcreated","title":"func NewInputCreated","text":"<pre><code>func NewInputCreated() *InputCreated\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#func-inputcreated-getdatetime","title":"func (*InputCreated) GetDateTime","text":"<pre><code>func (e *InputCreated) GetDateTime() time.Time\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#func-inputcreated-getname","title":"func (*InputCreated) GetName","text":"<pre><code>func (e *InputCreated) GetName() string\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#func-inputcreated-getpayload","title":"func (*InputCreated) GetPayload","text":"<pre><code>func (e *InputCreated) GetPayload() interface{}\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#func-inputcreated-setpayload","title":"func (*InputCreated) SetPayload","text":"<pre><code>func (e *InputCreated) SetPayload(payload interface{})\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#handler","title":"handler","text":"<pre><code>import \"libs/golang/ddd/events/input-broker/handlers\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#index_1","title":"Index","text":"<ul> <li>type InputCreatedHandler</li> <li>func NewInputCreatedHandler(notifier NotifierInterface) *InputCreatedHandler</li> <li>func (si *InputCreatedHandler) Handle(event events.EventInterface, wg *sync.WaitGroup, routingKey string)</li> <li>type MockRabbitMQNotifier</li> <li>func (m *MockRabbitMQNotifier) Notify(message []byte, routingKey string) error</li> <li>type NotifierInterface</li> </ul>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#type-inputcreatedhandler","title":"type InputCreatedHandler","text":"<p>InputCreatedHandler handles events of type InputCreated.</p> <pre><code>type InputCreatedHandler struct {\n    Notifier NotifierInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#func-newinputcreatedhandler","title":"func NewInputCreatedHandler","text":"<pre><code>func NewInputCreatedHandler(notifier NotifierInterface) *InputCreatedHandler\n</code></pre> <p>NewInputCreatedHandler creates a new InputCreatedHandler.</p> <p></p>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#func-inputcreatedhandler-handle","title":"func (*InputCreatedHandler) Handle","text":"<pre><code>func (si *InputCreatedHandler) Handle(event events.EventInterface, wg *sync.WaitGroup, routingKey string)\n</code></pre> <p>Handle processes the event and sends a notification.</p> <p></p>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#type-mockrabbitmqnotifier","title":"type MockRabbitMQNotifier","text":"<p>MockRabbitMQNotifier is a mock implementation of RabbitMQNotifier for testing purposes.</p> <pre><code>type MockRabbitMQNotifier struct {\n    mock.Mock\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#func-mockrabbitmqnotifier-notify","title":"func (*MockRabbitMQNotifier) Notify","text":"<pre><code>func (m *MockRabbitMQNotifier) Notify(message []byte, routingKey string) error\n</code></pre> <p>Notify is the mock implementation of the Notify method.</p> <p></p>"},{"location":"reference/libs/golang/ddd/events/input-broker/docs/godoc/#type-notifierinterface","title":"type NotifierInterface","text":"<p>NotifierInterface defines the methods that a notifier should implement.</p> <pre><code>type NotifierInterface interface {\n    Notify(message []byte, routingKey string) error\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/","title":"config-vault/converter","text":"<p><code>config-vault/converter</code> is a Go library that provides utility functions to convert between data transfer objects (DTOs) and entities within the configuration vault domain. This library facilitates the transformation of job dependency data structures between different layers of the application.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/#features","title":"Features","text":"<ul> <li>Convert job dependencies from DTOs to entities.</li> <li>Convert job dependencies from entities to DTOs.</li> <li>Convert job dependencies from DTOs to a map.</li> </ul>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/#converting-job-dependencies-dtos-to-entities","title":"Converting Job Dependencies DTOs to Entities","text":"<p>The <code>ConvertJobDependenciesDTOToEntity</code> function converts a slice of <code>JobDependenciesDTO</code> to a slice of <code>JobDependencies</code> entities.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    \"libs/golang/ddd/dtos/config-vault/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    dtoDeps := []shareddto.JobDependenciesDTO{\n        {\n            Service: \"service1\",\n            Source:  \"source1\",\n        },\n        {\n            Service: \"service2\",\n            Source:  \"source2\",\n        },\n    }\n\n    entityDeps := converter.ConvertJobDependenciesDTOToEntity(dtoDeps)\n    fmt.Printf(\"Converted entities: %+v\\n\", entityDeps)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/#converting-job-dependencies-entities-to-dtos","title":"Converting Job Dependencies Entities to DTOs","text":"<p>The <code>ConvertJobDependenciesEntityToDTO</code> function converts a slice of <code>JobDependencies</code> entities to a slice of <code>JobDependenciesDTO</code>.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/#example_1","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    \"libs/golang/ddd/dtos/config-vault/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    entityDeps := []entity.JobDependencies{\n        {\n            Service: \"service1\",\n            Source:  \"source1\",\n        },\n        {\n            Service: \"service2\",\n            Source:  \"source2\",\n        },\n    }\n\n    dtoDeps := converter.ConvertJobDependenciesEntityToDTO(entityDeps)\n    fmt.Printf(\"Converted DTOs: %+v\\n\", dtoDeps)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/#converting-job-dependencies-dtos-to-a-map","title":"Converting Job Dependencies DTOs to a Map","text":"<p>The <code>ConvertJobDependenciesDTOToMap</code> function converts a slice of <code>JobDependenciesDTO</code> to a map of <code>JobDependencies</code> entities.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/#example_2","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    \"libs/golang/ddd/dtos/config-vault/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    dtoDeps := []shareddto.JobDependenciesDTO{\n        {\n            Service: \"service1\",\n            Source:  \"source1\",\n        },\n        {\n            Service: \"service2\",\n            Source:  \"source2\",\n        },\n    }\n\n    entityMap := converter.ConvertJobDependenciesDTOToMap(dtoDeps)\n    fmt.Printf(\"Converted entity map: %+v\\n\", entityMap)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>converter</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-shared-type-tools-custom-types-converter-config-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/docs/godoc/#converter","title":"converter","text":"<pre><code>import \"libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/converter\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>func ConvertJobDependenciesDTOToEntity(dependsOnDTO []shareddto.JobDependenciesDTO) []entity.JobDependencies</li> <li>func ConvertJobDependenciesDTOToMap(dependsOnDTO []shareddto.JobDependenciesDTO) []map[string]interface{}</li> <li>func ConvertJobDependenciesEntityToDTO(dependsOn []entity.JobDependencies) []shareddto.JobDependenciesDTO</li> <li>func ConvertJobParametersDTOToEntity(params shareddto.JobParametersDTO) entity.JobParameters</li> <li>func ConvertJobParametersDTOToMap(params shareddto.JobParametersDTO) map[string]interface{}</li> <li>func ConvertJobParametersEntityToDTO(jobParams entity.JobParameters) shareddto.JobParametersDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/docs/godoc/#func-convertjobdependenciesdtotoentity","title":"func ConvertJobDependenciesDTOToEntity","text":"<pre><code>func ConvertJobDependenciesDTOToEntity(dependsOnDTO []shareddto.JobDependenciesDTO) []entity.JobDependencies\n</code></pre> <p>ConvertJobDependenciesDTOToEntity converts a slice of JobDependenciesDTO to a slice of JobDependencies entities. This function iterates over each JobDependenciesDTO and maps its fields to the corresponding JobDependencies entity fields.</p> <p>Parameters:</p> <pre><code>dependsOnDTO: A slice of shareddto.JobDependenciesDTO to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A slice of entity.JobDependencies containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/docs/godoc/#func-convertjobdependenciesdtotomap","title":"func ConvertJobDependenciesDTOToMap","text":"<pre><code>func ConvertJobDependenciesDTOToMap(dependsOnDTO []shareddto.JobDependenciesDTO) []map[string]interface{}\n</code></pre> <p>ConvertJobDependenciesDTOToMap converts a slice of JobDependenciesDTO to a map of JobDependencies entities. This function iterates over each JobDependenciesDTO and maps its fields to the corresponding JobDependencies entity fields.</p> <p>Parameters:</p> <pre><code>dependsOnDTO: A slice of shareddto.JobDependenciesDTO to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A map of entity.JobDependencies containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/docs/godoc/#func-convertjobdependenciesentitytodto","title":"func ConvertJobDependenciesEntityToDTO","text":"<pre><code>func ConvertJobDependenciesEntityToDTO(dependsOn []entity.JobDependencies) []shareddto.JobDependenciesDTO\n</code></pre> <p>ConvertJobDependenciesEntityToDTO converts a slice of JobDependencies entities to a slice of JobDependenciesDTO. This function iterates over each JobDependencies entity and maps its fields to the corresponding JobDependenciesDTO fields.</p> <p>Parameters:</p> <pre><code>dependsOn: A slice of entity.JobDependencies to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A slice of shareddto.JobDependenciesDTO containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/docs/godoc/#func-convertjobparametersdtotoentity","title":"func ConvertJobParametersDTOToEntity","text":"<pre><code>func ConvertJobParametersDTOToEntity(params shareddto.JobParametersDTO) entity.JobParameters\n</code></pre> <p>ConvertJobParametersDTOToEntity converts a JobParametersDTO to a JobParameters entity. This function maps the fields of the JobParametersDTO to the corresponding fields of the JobParameters entity.</p> <p>Parameters:</p> <pre><code>parmas: A shareddto.JobParametersDTO to be converted.\n</code></pre> <p>Returns:</p> <pre><code>An entity.JobParameters containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/docs/godoc/#func-convertjobparametersdtotomap","title":"func ConvertJobParametersDTOToMap","text":"<pre><code>func ConvertJobParametersDTOToMap(params shareddto.JobParametersDTO) map[string]interface{}\n</code></pre> <p>ConvertJobParametersDTOToMap converts a JobParametersDTO to a map of JobParameters entities. This function maps the fields of the JobParametersDTO to the corresponding fields of the JobParameters entity.</p> <p>Parameters:</p> <pre><code>parmas: A shareddto.JobParametersDTO to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A map of entity.JobParameters containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/config-vault/docs/godoc/#func-convertjobparametersentitytodto","title":"func ConvertJobParametersEntityToDTO","text":"<pre><code>func ConvertJobParametersEntityToDTO(jobParams entity.JobParameters) shareddto.JobParametersDTO\n</code></pre> <p>ConvertJobParametersEntityToDTO converts a JobParameters entity to a JobParametersDTO. This function maps the fields of the JobParameters entity to the corresponding fields of the JobParametersDTO.</p> <p>Parameters:</p> <p>jobParams: An entity.JobParameters to be converted.</p> <p>Returns:</p> <pre><code>A shareddto.JobParametersDTO containing the converted data.\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/","title":"input-broker/converter","text":"<p><code>input-broker/converter</code> is a Go library that provides utility functions to convert between data transfer objects (DTOs) and entities within the input-broker domain. This library facilitates the transformation of metadata and status data structures between different layers of the application.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#features","title":"Features","text":"<ul> <li>Convert metadata from DTOs to entities.</li> <li>Convert metadata from entities to DTOs.</li> <li>Convert status from DTOs to entities.</li> <li>Convert status from entities to DTOs.</li> </ul>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#converting-metadata-dtos-to-entities","title":"Converting Metadata DTOs to Entities","text":"<p>The <code>ConvertMetadataDTOToEntity</code> function converts a <code>MetadataDTO</code> to a <code>Metadata</code> entity.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    shareddto \"libs/golang/ddd/dtos/input-broker/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    metadataDTO := shareddto.MetadataDTO{\n        Provider:            \"test_provider\",\n        Service:             \"test_service\",\n        Source:              \"test_source\",\n        ProcessingID:        \"test_processing_id\",\n        ProcessingTimestamp: \"2023-07-02T12:34:56Z\",\n    }\n\n    metadata := converter.ConvertMetadataDTOToEntity(metadataDTO)\n    fmt.Printf(\"Converted entity: %+v\\n\", metadata)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#converting-metadata-entities-to-dtos","title":"Converting Metadata Entities to DTOs","text":"<p>The <code>ConvertMetadataEntityToDTO</code> function converts a <code>Metadata</code> entity to a <code>MetadataDTO</code>.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#example_1","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    shareddto \"libs/golang/ddd/dtos/input-broker/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    metadata := entity.Metadata{\n        Provider:            \"test_provider\",\n        Service:             \"test_service\",\n        Source:              \"test_source\",\n        ProcessingID:        \"test_processing_id\",\n        ProcessingTimestamp: \"2023-07-02T12:34:56Z\",\n    }\n\n    metadataDTO := converter.ConvertMetadataEntityToDTO(metadata)\n    fmt.Printf(\"Converted DTO: %+v\\n\", metadataDTO)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#converting-status-dtos-to-entities","title":"Converting Status DTOs to Entities","text":"<p>The <code>ConvertStatusDTOToEntity</code> function converts a <code>StatusDTO</code> to a <code>Status</code> entity.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#example_2","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    shareddto \"libs/golang/ddd/dtos/input-broker/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    statusDTO := shareddto.StatusDTO{\n        Code:   \"200\",\n        Detail: \"OK\",\n    }\n\n    status := converter.ConvertStatusDTOToEntity(statusDTO)\n    fmt.Printf(\"Converted entity: %+v\\n\", status)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#converting-status-entities-to-dtos","title":"Converting Status Entities to DTOs","text":"<p>The <code>ConvertStatusEntityToDTO</code> function converts a <code>Status</code> entity to a <code>StatusDTO</code>.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#example_3","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    shareddto \"libs/golang/ddd/dtos/input-broker/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    status := entity.Status{\n        Code:   \"200\",\n        Detail: \"OK\",\n    }\n\n    statusDTO := converter.ConvertStatusEntityToDTO(status)\n    fmt.Printf(\"Converted DTO: %+v\\n\", statusDTO)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/#testing","title":"Testing","text":"<p>To run the tests for the <code>converter</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-shared-type-tools-custom-types-converter-input-broker\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/docs/godoc/#converter","title":"converter","text":"<pre><code>import \"libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/converter\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>func ConvertMetadataDTOToEntity(metadataDTO shareddto.MetadataDTO) entity.Metadata</li> <li>func ConvertMetadataEntityToDTO(metadata entity.Metadata) shareddto.MetadataDTO</li> <li>func ConvertStatusDTOToEntity(statusDTO shareddto.StatusDTO) entity.Status</li> <li>func ConvertStatusEntityToDTO(status entity.Status) shareddto.StatusDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/docs/godoc/#func-convertmetadatadtotoentity","title":"func ConvertMetadataDTOToEntity","text":"<pre><code>func ConvertMetadataDTOToEntity(metadataDTO shareddto.MetadataDTO) entity.Metadata\n</code></pre> <p>ConvertMetadataDTOToEntity converts a MetadataDTO to a Metadata entity. This function maps the MetadataDTO fields to the corresponding Metadata entity fields.</p> <p>Parameters:</p> <pre><code>metadataDTO: A shareddto.MetadataDTO to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A entity.Metadata containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/docs/godoc/#func-convertmetadataentitytodto","title":"func ConvertMetadataEntityToDTO","text":"<pre><code>func ConvertMetadataEntityToDTO(metadata entity.Metadata) shareddto.MetadataDTO\n</code></pre> <p>ConvertMetadataEntityToDTO converts a Metadata entity to a MetadataDTO. This function maps the Metadata entity fields to the corresponding MetadataDTO fields.</p> <p>Parameters:</p> <pre><code>metadata: A entity.Metadata to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A shareddto.MetadataDTO containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/docs/godoc/#func-convertstatusdtotoentity","title":"func ConvertStatusDTOToEntity","text":"<pre><code>func ConvertStatusDTOToEntity(statusDTO shareddto.StatusDTO) entity.Status\n</code></pre> <p>ConvertStatusDTOToEntity converts a StatusDTO to a Status entity. This function maps the StatusDTO fields to the corresponding Status entity fields.</p> <p>Parameters:</p> <pre><code>statusDTO: A shareddto.StatusDTO to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A entity.Status containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/input-broker/docs/godoc/#func-convertstatusentitytodto","title":"func ConvertStatusEntityToDTO","text":"<pre><code>func ConvertStatusEntityToDTO(status entity.Status) shareddto.StatusDTO\n</code></pre> <p>ConvertStatusEntityToDTO converts a Status entity to a StatusDTO. This function maps the Status entity fields to the corresponding StatusDTO fields.</p> <p>Parameters:</p> <pre><code>status: A entity.Status to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A shareddto.StatusDTO containing the converted data.\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/","title":"output-vault/converter","text":"<p><code>output-vault/converter</code> is a Go library that provides utility functions to convert between data transfer objects (DTOs) and entities within the output vault domain. This library facilitates the transformation of metadata data structures between different layers of the application.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/#features","title":"Features","text":"<ul> <li>Convert metadata from DTOs to entities.</li> <li>Convert metadata from entities to DTOs.</li> <li>Convert metadata from DTOs to a map.</li> </ul>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/#converting-metadata-dtos-to-entities","title":"Converting Metadata DTOs to Entities","text":"<p>The <code>ConvertMetadataDTOToEntity</code> function converts a <code>MetadataDTO</code> to a <code>Metadata</code> entity.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n    shareddto \"libs/golang/ddd/dtos/output-vault/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    dtoMetadata := shareddto.MetadataDTO{\n        InputID: \"input_id\",\n        Input: shareddto.InputDTO{\n            Data: map[string]interface{}{\n                \"input1\": \"value1\",\n            },\n            ProcessingID:        \"processing_id\",\n            ProcessingTimestamp: \"2023-06-01 00:00:00\",\n        },\n    }\n\n    entityMetadata := converter.ConvertMetadataDTOToEntity(dtoMetadata)\n    fmt.Printf(\"Converted entity: %+v\\n\", entityMetadata)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/#converting-metadata-entities-to-dtos","title":"Converting Metadata Entities to DTOs","text":"<p>The <code>ConvertMetadataEntityToDTO</code> function converts a <code>Metadata</code> entity to a <code>MetadataDTO</code>.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/#example_1","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n    shareddto \"libs/golang/ddd/dtos/output-vault/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    entityMetadata := entity.Metadata{\n        InputID: \"input_id\",\n        Input: entity.Input{\n            Data: map[string]interface{}{\n                \"input1\": \"value1\",\n            },\n            ProcessingID:        \"processing_id\",\n            ProcessingTimestamp: \"2023-06-01 00:00:00\",\n        },\n    }\n\n    dtoMetadata := converter.ConvertMetadataEntityToDTO(entityMetadata)\n    fmt.Printf(\"Converted DTO: %+v\\n\", dtoMetadata)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/#converting-metadata-dtos-to-a-map","title":"Converting Metadata DTOs to a Map","text":"<p>The <code>ConvertMetadataDTOToMap</code> function converts a <code>MetadataDTO</code> to a map.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/#example_2","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    shareddto \"libs/golang/ddd/dtos/output-vault/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    dtoMetadata := shareddto.MetadataDTO{\n        InputID: \"input_id\",\n        Input: shareddto.InputDTO{\n            Data: map[string]interface{}{\n                \"input1\": \"value1\",\n            },\n            ProcessingID:        \"processing_id\",\n            ProcessingTimestamp: \"2023-06-01 00:00:00\",\n        },\n    }\n\n    metadataMap := converter.ConvertMetadataDTOToMap(dtoMetadata)\n    fmt.Printf(\"Converted map: %+v\\n\", metadataMap)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>converter</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-shared-type-tools-custom-types-converter-output-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/docs/godoc/#converter","title":"converter","text":"<pre><code>import \"libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/converter\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>func ConvertMetadataDTOToEntity(metadataDTO shareddto.MetadataDTO) entity.Metadata</li> <li>func ConvertMetadataDTOToMap(metadataDTO shareddto.MetadataDTO) map[string]interface{}</li> <li>func ConvertMetadataEntityToDTO(metadata entity.Metadata) shareddto.MetadataDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/docs/godoc/#func-convertmetadatadtotoentity","title":"func ConvertMetadataDTOToEntity","text":"<pre><code>func ConvertMetadataDTOToEntity(metadataDTO shareddto.MetadataDTO) entity.Metadata\n</code></pre> <p>ConvertOutputDTOToEntity converts an OutputDTO to an Output entity. This function maps the fields of the OutputDTO to the corresponding Output entity fields.</p> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/docs/godoc/#func-convertmetadatadtotomap","title":"func ConvertMetadataDTOToMap","text":"<pre><code>func ConvertMetadataDTOToMap(metadataDTO shareddto.MetadataDTO) map[string]interface{}\n</code></pre> <p>ConvertOutputDTOToMap converts an OutputDTO to a map. This function maps the fields of the OutputDTO to the corresponding map fields.</p> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/output-vault/docs/godoc/#func-convertmetadataentitytodto","title":"func ConvertMetadataEntityToDTO","text":"<pre><code>func ConvertMetadataEntityToDTO(metadata entity.Metadata) shareddto.MetadataDTO\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/","title":"Index","text":"<p>Here is the <code>README.md</code> file for the <code>schema-vault/converter</code> library:</p> <pre><code># schema-vault/converter\n\n`schema-vault/converter` is a Go library that provides utility functions to convert between data transfer objects (DTOs) and entities within the schema vault domain. This library facilitates the transformation of JSON schema data structures between different layers of the application.\n\n## Features\n\n- Convert JSON schema from DTOs to entities.\n- Convert JSON schema from entities to DTOs.\n- Convert JSON schema from DTOs to a map.\n\n## Usage\n\n### Converting JSON Schema DTOs to Entities\n\nThe `ConvertJsonSchemaDTOToEntity` function converts a `JsonSchema` DTO to a `JsonSchema` entity.\n\n#### Example\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    \"libs/golang/ddd/dtos/schema-vault/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    dtoSchema := shareddto.JsonSchema{\n        Required: []string{\"field1\"},\n        Properties: map[string]interface{}{\n            \"field1\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n            \"field2\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n        },\n        JsonType: \"object\",\n    }\n\n    entitySchema := converter.ConvertJsonSchemaDTOToEntity(dtoSchema)\n    fmt.Printf(\"Converted entity: %+v\\n\", entitySchema)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/#converting-json-schema-entities-to-dtos","title":"Converting JSON Schema Entities to DTOs","text":"<p>The <code>ConvertJsonSchemaEntityToDTO</code> function converts a <code>JsonSchema</code> entity to a <code>JsonSchema</code> DTO.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    \"libs/golang/ddd/dtos/schema-vault/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    entitySchema := entity.JsonSchema{\n        Required: []string{\"field1\"},\n        Properties: map[string]interface{}{\n            \"field1\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n            \"field2\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n        },\n        JsonType: \"object\",\n    }\n\n    dtoSchema := converter.ConvertJsonSchemaEntityToDTO(entitySchema)\n    fmt.Printf(\"Converted DTO: %+v\\n\", dtoSchema)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/#converting-json-schema-dtos-to-a-map","title":"Converting JSON Schema DTOs to a Map","text":"<p>The <code>ConvertJsonSchemaDTOToMap</code> function converts a <code>JsonSchema</code> DTO to a map.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/#example_1","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    \"libs/golang/ddd/dtos/schema-vault/shared\"\n    \"libs/golang/ddd/domain/converter\"\n)\n\nfunc main() {\n    dtoSchema := shareddto.JsonSchema{\n        Required: []string{\"field1\"},\n        Properties: map[string]interface{}{\n            \"field1\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n            \"field2\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n        },\n        JsonType: \"object\",\n    }\n\n    schemaMap := converter.ConvertJsonSchemaDTOToMap(dtoSchema)\n    fmt.Printf(\"Converted map: %+v\\n\", schemaMap)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>converter</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-shared-type-tools-custom-types-converter-schema-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/docs/godoc/#converter","title":"converter","text":"<pre><code>import \"libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/converter\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>func ConvertJsonSchemaDTOToEntity(jsonSchemaDTO shareddto.JsonSchemaDTO) entity.JsonSchema</li> <li>func ConvertJsonSchemaDTOToMap(jsonSchemaDTO shareddto.JsonSchemaDTO) map[string]interface{}</li> <li>func ConvertJsonSchemaEntityToDTO(jsonSchema entity.JsonSchema) shareddto.JsonSchemaDTO</li> </ul>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/docs/godoc/#func-convertjsonschemadtotoentity","title":"func ConvertJsonSchemaDTOToEntity","text":"<pre><code>func ConvertJsonSchemaDTOToEntity(jsonSchemaDTO shareddto.JsonSchemaDTO) entity.JsonSchema\n</code></pre> <p>ConvertJsonSchemaDTOToEntity converts a JsonSchemaDTO DTO to a JsonSchema entity. This function maps the fields of the JsonSchemaDTO DTO to the corresponding JsonSchema entity fields.</p> <p>Parameters:</p> <pre><code>jsonSchemaDTO: The shareddto.JsonSchemaDTO to be converted.\n</code></pre> <p>Returns:</p> <pre><code>An entity.JsonSchema containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/docs/godoc/#func-convertjsonschemadtotomap","title":"func ConvertJsonSchemaDTOToMap","text":"<pre><code>func ConvertJsonSchemaDTOToMap(jsonSchemaDTO shareddto.JsonSchemaDTO) map[string]interface{}\n</code></pre> <p>ConvertJsonSchemaDTOToMap converts a JsonSchemaDTO DTO to a map. This function maps the fields of the JsonSchemaDTO DTO to a map.</p> <p>Parameters:</p> <pre><code>jsonSchemaDTO: The shareddto.JsonSchema to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A map containing the converted data.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/custom-types-converter/schema-vault/docs/godoc/#func-convertjsonschemaentitytodto","title":"func ConvertJsonSchemaEntityToDTO","text":"<pre><code>func ConvertJsonSchemaEntityToDTO(jsonSchema entity.JsonSchema) shareddto.JsonSchemaDTO\n</code></pre> <p>ConvertJsonSchemaEntityToDTO converts a JsonSchema entity to a JsonSchema DTO. This function maps the fields of the JsonSchema entity to the corresponding JsonSchema DTO fields.</p> <p>Parameters:</p> <pre><code>jsonSchema: The entity.JsonSchema to be converted.\n</code></pre> <p>Returns:</p> <pre><code>A shareddto.JsonSchema containing the converted data.\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/","title":"regular-types-converter","text":"<p><code>regular-types-converter</code> is a Go library that provides utilities for converting built-in types to various entity types. This library is designed to be flexible and easy to use, allowing you to convert data into entity types without directly importing those types.</p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/#features","title":"Features","text":"<ul> <li>Convert <code>map[string]interface{}</code> to any struct type.</li> <li>Convert an array of <code>map[string]interface{}</code> to an array of the specified entity type.</li> <li>convert an entity type to a <code>map[string]interface{}</code></li> <li>Decouples conversion logic from entity types.</li> <li>Makes code more modular and maintainable.</li> </ul>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/#convert-mapstringinterface-to-entity","title":"Convert <code>map[string]interface{}</code> to Entity","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    \"libs/golang/ddd/shared/type-tools/regular-types-converter/conversion\"\n)\n\nfunc main() {\n    data := map[string]interface{}{\n        \"service\": \"example-service\",\n        \"source\":  \"example-source\",\n    }\n\n    entity, err := regulartypetool.ConvertFromMapStringToEntity(reflect.TypeOf(entity.JobDependencies{}), data)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n\n    jobDependencies := entity.(entity.JobDependencies)\n    fmt.Println(\"JobDependencies:\", jobDependencies)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/#convert-array-of-mapstringinterface-to-array-of-entities","title":"Convert Array of <code>map[string]interface{}</code> to Array of Entities","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"reflect\"\n\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    \"libs/golang/ddd/shared/type-tools/regular-types-converter/conversion\"\n)\n\nfunc main() {\n    dataArray := []map[string]interface{}{\n        {\n            \"service\": \"example-service-1\",\n            \"source\":  \"example-source-1\",\n        },\n        {\n            \"service\": \"example-service-2\",\n            \"source\":  \"example-source-2\",\n        },\n    }\n\n    entities, err := regulartypetool.ConvertFromArrayMapStringToEntities(reflect.TypeOf(entity.JobDependencies{}), dataArray)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n\n    for _, e := range entities {\n        entityType := e.(entity.JobDependencies)\n        fmt.Println(\"JobDependencies:\", entityType)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/#convert-entity-to-mapstringinterface","title":"Convert Entity to <code>map[string]interface{}</code>","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n\n    \"libs/golang/ddd/shared/type-tools/regular-types-converter/conversion\"\n)\n\ntype JobDependencies struct {\n    Service string `bson:\"service\"`\n    Source  string `bson:\"source\"`\n}\n\nfunc main() {\n    jobDependencies := JobDependencies{\n        Service: \"example-service\",\n        Source:  \"example-source\",\n    }\n\n    data, err := regulartypetool.ConvertFromEntityToMapString(jobDependencies)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n\n    fmt.Println(\"Data:\", data)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/#testing","title":"Testing","text":"<p>To run the tests for the <code>regular-types-converter</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-shared-type-tools-regular-types-converter\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/docs/godoc/#regulartypetool","title":"regulartypetool","text":"<pre><code>import \"libs/golang/ddd/shared/type-tools/regular-types-converter/conversion\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/docs/godoc/#index","title":"Index","text":"<ul> <li>func ConvertFromArrayMapStringToEntities(entityType reflect.Type, dataArray []map[string]interface{}) ([]interface{}, error)</li> <li>func ConvertFromEntityToMapString(entity interface{}) (map[string]interface{}, error)</li> <li>func ConvertFromMapStringToEntity(entityType reflect.Type, data map[string]interface{}) (interface{}, error)</li> </ul>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/docs/godoc/#func-convertfromarraymapstringtoentities","title":"func ConvertFromArrayMapStringToEntities","text":"<pre><code>func ConvertFromArrayMapStringToEntities(entityType reflect.Type, dataArray []map[string]interface{}) ([]interface{}, error)\n</code></pre> <p>ConvertFromArrayMapStringToEntities converts an array of map[string]interface{} to an array of the specified entity type.</p> <p></p>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/docs/godoc/#func-convertfromentitytomapstring","title":"func ConvertFromEntityToMapString","text":"<pre><code>func ConvertFromEntityToMapString(entity interface{}) (map[string]interface{}, error)\n</code></pre>"},{"location":"reference/libs/golang/ddd/shared/type-tools/regular-types-converter/docs/godoc/#func-convertfrommapstringtoentity","title":"func ConvertFromMapStringToEntity","text":"<pre><code>func ConvertFromMapStringToEntity(entityType reflect.Type, data map[string]interface{}) (interface{}, error)\n</code></pre> <p>ConvertFromMapStringToEntity converts a map[string]interface{} to the specified entity type. The entityType parameter should be the reflect.TypeOf() value of the target entity.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/","title":"config-vault/usecase","text":"<p><code>config-vault/usecase</code> is a Go library that provides various use cases for managing configuration entities within a system. This library includes functionalities for creating, updating, deleting, and querying configurations based on different attributes.</p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/#features","title":"Features","text":"<ul> <li>Create, update, delete, and list configuration entities.</li> <li>Query configurations by service, source, provider, and other attributes.</li> <li>Validate and convert configuration data between different formats.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/usecases/config-vault/#creating-a-configuration","title":"Creating a Configuration","text":"<p>The <code>CreateConfigUseCase</code> struct provides methods to create a new configuration entity and save it using the repository.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    inputdto \"libs/golang/ddd/dtos/config-vault/input\"\n    outputdto \"libs/golang/ddd/dtos/config-vault/output\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n    \"libs/golang/ddd/usecases/config-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    createUseCase := usecase.NewCreateConfigUseCase(repo)\n\n    input := inputdto.ConfigDTO{\n        Active:   true,\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Provider: \"exampleProvider\",\n        JobParameters: shareddto.JobParametersDTO{\n            ParserModule: \"parser_module1\",\n        },\n        DependsOn: []shareddto.JobDependenciesDTO{\n            {Service: \"dependencyService\", Source: \"dependencySource\"},\n        },\n    }\n\n    output, err := createUseCase.Execute(input)\n    if err != nil {\n        fmt.Println(\"Error creating config:\", err)\n        return\n    }\n\n    fmt.Printf(\"Config created: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/#updating-a-configuration","title":"Updating a Configuration","text":"<p>The <code>UpdateConfigUseCase</code> struct provides methods to update an existing configuration entity and save it using the repository.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/config-vault/entity\"\n    inputdto \"libs/golang/ddd/dtos/config-vault/input\"\n    outputdto \"libs/golang/ddd/dtos/config-vault/output\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n    \"libs/golang/ddd/usecases/config-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    updateUseCase := usecase.NewUpdateConfigUseCase(repo)\n\n    input := inputdto.ConfigDTO{\n        Active:   true,\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Provider: \"exampleProvider\",\n        JobParameters: shareddto.JobParametersDTO{\n            ParserModule: \"parser_module1\",\n        },\n        DependsOn: []shareddto.JobDependenciesDTO{\n            {Service: \"dependencyService\", Source: \"dependencySource\"},\n        },\n    }\n\n    output, err := updateUseCase.Execute(input)\n    if err != nil {\n        fmt.Println(\"Error updating config:\", err)\n        return\n    }\n\n    fmt.Printf(\"Config updated: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/#deleting-a-configuration","title":"Deleting a Configuration","text":"<p>The <code>DeleteConfigUseCase</code> struct provides methods to delete an existing configuration entity by its ID.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n    \"libs/golang/ddd/usecases/config-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    deleteUseCase := usecase.NewDeleteConfigUseCase(repo)\n\n    err = deleteUseCase.Execute(\"exampleID\")\n    if err != nil {\n        fmt.Println(\"Error deleting config:\", err)\n        return\n    }\n\n    fmt.Println(\"Config deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/#listing-configurations-by-service","title":"Listing Configurations by Service","text":"<p>The <code>ListAllByServiceConfigUseCase</code> struct provides methods to list all configurations by a specific service.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/config-vault/repository\"\n    \"libs/golang/ddd/usecases/config-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewConfigRepository(client, \"testdb\")\n    listUseCase := usecase.NewListAllByServiceConfigUseCase(repo)\n\n    configs, err := listUseCase.Execute(\"exampleService\")\n    if err != nil {\n        fmt.Println(\"Error listing configs:\", err)\n        return\n    }\n\n    for _, config := range configs {\n        fmt.Printf(\"Config: %+v\\n\", config)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>usecase</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-usecases-config-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/#use-cases","title":"Use Cases","text":"<ul> <li>CreateConfigUseCase: Create a new configuration entity.</li> <li>UpdateConfigUseCase: Update an existing configuration entity.</li> <li>DeleteConfigUseCase: Delete a configuration entity by its ID.</li> <li>ListAllByServiceConfigUseCase: List all configurations by a specific service.</li> <li>ListAllConfigUseCase: List all configurations.</li> <li>ListOneByIDConfigUseCase: Retrieve a configuration by its ID.</li> <li>ListAllByDependsOnConfigUseCase: List all configurations by their dependencies.</li> <li>ListAllByServiceAndSourceConfigUseCase: List all configurations by service and source.</li> <li>ListAllByServiceAndProviderAndActiveConfigUseCase: List all configurations by service, provider, and active status.</li> <li>ListAllByServiceAndSourceAndProviderConfigUseCase: List all configurations by service, source, and provider.</li> <li>ListAllBySourceConfigUseCase: List all configurations by source.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/#errors","title":"Errors","text":"<ul> <li><code>ErrInvalidID</code>: Returned when the ID of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidService</code>: Returned when the service of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidSource</code>: Returned when the source of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidProvider</code>: Returned when the provider of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidConfigVersionID</code>: Returned when the config version ID of a <code>Config</code> is invalid.</li> <li><code>ErrInvalidCreatedAt</code>: Returned when the created at timestamp of a <code>Config</code> is invalid.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#usecase","title":"usecase","text":"<pre><code>import \"libs/golang/ddd/usecases/config-vault/usecase\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type CreateConfigUseCase</li> <li>func NewCreateConfigUseCase(configRepository entity.ConfigRepositoryInterface) *CreateConfigUseCase</li> <li>func (uc *CreateConfigUseCase) Execute(input inputdto.ConfigDTO) (outputdto.ConfigDTO, error)</li> <li>type DeleteConfigUseCase</li> <li>func NewDeleteConfigUseCase(configRepository entity.ConfigRepositoryInterface) *DeleteConfigUseCase</li> <li>func (uc *DeleteConfigUseCase) Execute(id string) error</li> <li>type ListAllByProviderAndDependsOnConfigUseCase</li> <li>func NewListAllByProviderAndDependsOnConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllByProviderAndDependsOnConfigUseCase</li> <li>func (uc *ListAllByProviderAndDependsOnConfigUseCase) Execute(provider, service, source string) ([]outputdto.ConfigDTO, error)</li> <li>type ListAllByServiceAndProviderAndActiveConfigUseCase</li> <li>func NewListAllByServiceAndProviderAndActiveConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllByServiceAndProviderAndActiveConfigUseCase</li> <li>func (uc *ListAllByServiceAndProviderAndActiveConfigUseCase) Execute(service, provider string, active bool) ([]outputdto.ConfigDTO, error)</li> <li>type ListAllByServiceAndProviderConfigUseCase</li> <li>func NewListAllByServiceAndProviderConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllByServiceAndProviderConfigUseCase</li> <li>func (uc *ListAllByServiceAndProviderConfigUseCase) Execute(provider, service string) ([]outputdto.ConfigDTO, error)</li> <li>type ListAllByServiceAndSourceAndProviderConfigUseCase</li> <li>func NewListAllByServiceAndSourceAndProviderConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllByServiceAndSourceAndProviderConfigUseCase</li> <li>func (uc *ListAllByServiceAndSourceAndProviderConfigUseCase) Execute(service, source, provider string) ([]outputdto.ConfigDTO, error)</li> <li>type ListAllBySourceAndProviderConfigUseCase</li> <li>func NewListAllBySourceAndProviderConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllBySourceAndProviderConfigUseCase</li> <li>func (uc *ListAllBySourceAndProviderConfigUseCase) Execute(provider, source string) ([]outputdto.ConfigDTO, error)</li> <li>type ListAllConfigUseCase</li> <li>func NewListAllConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllConfigUseCase</li> <li>func (uc *ListAllConfigUseCase) Execute() ([]outputdto.ConfigDTO, error)</li> <li>type ListOneByIDConfigUseCase</li> <li>func NewListOneByIDConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListOneByIDConfigUseCase</li> <li>func (uc *ListOneByIDConfigUseCase) Execute(id string) (outputdto.ConfigDTO, error)</li> <li>type UpdateConfigUseCase</li> <li>func NewUpdateConfigUseCase(configRepository entity.ConfigRepositoryInterface) *UpdateConfigUseCase</li> <li>func (uc *UpdateConfigUseCase) Execute(input inputdto.ConfigDTO) (outputdto.ConfigDTO, error)</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-createconfigusecase","title":"type CreateConfigUseCase","text":"<p>CreateConfigUseCase is the use case for creating a new configuration.</p> <pre><code>type CreateConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newcreateconfigusecase","title":"func NewCreateConfigUseCase","text":"<pre><code>func NewCreateConfigUseCase(configRepository entity.ConfigRepositoryInterface) *CreateConfigUseCase\n</code></pre> <p>NewCreateConfigUseCase initializes a new instance of CreateConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of CreateConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-createconfigusecase-execute","title":"func (*CreateConfigUseCase) Execute","text":"<pre><code>func (uc *CreateConfigUseCase) Execute(input inputdto.ConfigDTO) (outputdto.ConfigDTO, error)\n</code></pre> <p>Execute creates a new configuration entity based on the provided input DTO and saves it using the repository. It then converts the created entity to an output DTO and returns it.</p> <p>Parameters:</p> <pre><code>input: The input DTO containing the configuration data.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the created configuration data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-deleteconfigusecase","title":"type DeleteConfigUseCase","text":"<p>DeleteConfigUseCase is the use case for deleting an existing configuration.</p> <pre><code>type DeleteConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newdeleteconfigusecase","title":"func NewDeleteConfigUseCase","text":"<pre><code>func NewDeleteConfigUseCase(configRepository entity.ConfigRepositoryInterface) *DeleteConfigUseCase\n</code></pre> <p>NewDeleteConfigUseCase initializes a new instance of DeleteConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of DeleteConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-deleteconfigusecase-execute","title":"func (*DeleteConfigUseCase) Execute","text":"<pre><code>func (uc *DeleteConfigUseCase) Execute(id string) error\n</code></pre> <p>Execute deletes an existing configuration entity based on the provided ID.</p> <p>Parameters:</p> <pre><code>id: The ID of the configuration to be deleted.\n</code></pre> <p>Returns:</p> <pre><code>An error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-listallbyprovideranddependsonconfigusecase","title":"type ListAllByProviderAndDependsOnConfigUseCase","text":"<p>ListAllByProviderAndDependsOnConfigUseCase is the use case for listing all configurations by their dependencies.</p> <pre><code>type ListAllByProviderAndDependsOnConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newlistallbyprovideranddependsonconfigusecase","title":"func NewListAllByProviderAndDependsOnConfigUseCase","text":"<pre><code>func NewListAllByProviderAndDependsOnConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllByProviderAndDependsOnConfigUseCase\n</code></pre> <p>NewListAllByProviderAndDependsOnConfigUseCase initializes a new instance of ListAllByProviderAndDependsOnConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByProviderAndDependsOnConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-listallbyprovideranddependsonconfigusecase-execute","title":"func (*ListAllByProviderAndDependsOnConfigUseCase) Execute","text":"<pre><code>func (uc *ListAllByProviderAndDependsOnConfigUseCase) Execute(provider, service, source string) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>Execute retrieves all configurations by their dependencies from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter configurations by.\nservice: The service name to filter configurations by.\nsource: The source name to filter configurations by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the configuration data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-listallbyserviceandproviderandactiveconfigusecase","title":"type ListAllByServiceAndProviderAndActiveConfigUseCase","text":"<p>ListAllByServiceAndProviderAndActiveConfigUseCase is the use case for listing all configurations by service, provider, and active status.</p> <pre><code>type ListAllByServiceAndProviderAndActiveConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newlistallbyserviceandproviderandactiveconfigusecase","title":"func NewListAllByServiceAndProviderAndActiveConfigUseCase","text":"<pre><code>func NewListAllByServiceAndProviderAndActiveConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllByServiceAndProviderAndActiveConfigUseCase\n</code></pre> <p>NewListAllByServiceAndProviderAndActiveConfigUseCase initializes a new instance of ListAllByServiceAndProviderAndActiveConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByServiceAndProviderAndActiveConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-listallbyserviceandproviderandactiveconfigusecase-execute","title":"func (*ListAllByServiceAndProviderAndActiveConfigUseCase) Execute","text":"<pre><code>func (uc *ListAllByServiceAndProviderAndActiveConfigUseCase) Execute(service, provider string, active bool) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>Execute retrieves all configurations by service, provider, and active status from the repository.</p> <p>Parameters:</p> <pre><code>service: The service name to filter configurations by.\nprovider: The provider name to filter configurations by.\nactive: The active status to filter configurations by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the configuration data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-listallbyserviceandproviderconfigusecase","title":"type ListAllByServiceAndProviderConfigUseCase","text":"<p>ListAllByServiceAndProviderConfigUseCase is the use case for listing all configurations by service.</p> <pre><code>type ListAllByServiceAndProviderConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newlistallbyserviceandproviderconfigusecase","title":"func NewListAllByServiceAndProviderConfigUseCase","text":"<pre><code>func NewListAllByServiceAndProviderConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllByServiceAndProviderConfigUseCase\n</code></pre> <p>NewListAllByServiceConfigUseCase initializes a new instance of ListAllByServiceAndProviderConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByServiceAndProviderConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-listallbyserviceandproviderconfigusecase-execute","title":"func (*ListAllByServiceAndProviderConfigUseCase) Execute","text":"<pre><code>func (uc *ListAllByServiceAndProviderConfigUseCase) Execute(provider, service string) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>Execute retrieves all configurations by service from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter configurations by.\nservice: The service name to filter configurations by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the configuration data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-listallbyserviceandsourceandproviderconfigusecase","title":"type ListAllByServiceAndSourceAndProviderConfigUseCase","text":"<p>ListAllByServiceAndSourceAndProviderConfigUseCase is the use case for listing all configurations by service, source, and provider.</p> <pre><code>type ListAllByServiceAndSourceAndProviderConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newlistallbyserviceandsourceandproviderconfigusecase","title":"func NewListAllByServiceAndSourceAndProviderConfigUseCase","text":"<pre><code>func NewListAllByServiceAndSourceAndProviderConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllByServiceAndSourceAndProviderConfigUseCase\n</code></pre> <p>NewListAllByServiceAndSourceAndProviderConfigUseCase initializes a new instance of ListAllByServiceAndSourceAndProviderConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByServiceAndSourceAndProviderConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-listallbyserviceandsourceandproviderconfigusecase-execute","title":"func (*ListAllByServiceAndSourceAndProviderConfigUseCase) Execute","text":"<pre><code>func (uc *ListAllByServiceAndSourceAndProviderConfigUseCase) Execute(service, source, provider string) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>Execute retrieves all configurations by service, source, and provider from the repository.</p> <p>Parameters:</p> <pre><code>service: The service name to filter configurations by.\nsource: The source name to filter configurations by.\nprovider: The provider name to filter configurations by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the configuration data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-listallbysourceandproviderconfigusecase","title":"type ListAllBySourceAndProviderConfigUseCase","text":"<p>ListAllBySourceAndProviderConfigUseCase is the use case for listing all configurations by source.</p> <pre><code>type ListAllBySourceAndProviderConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newlistallbysourceandproviderconfigusecase","title":"func NewListAllBySourceAndProviderConfigUseCase","text":"<pre><code>func NewListAllBySourceAndProviderConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllBySourceAndProviderConfigUseCase\n</code></pre> <p>NewListAllBySourceAndProviderConfigUseCase initializes a new instance of ListAllBySourceAndProviderConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllBySourceAndProviderConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-listallbysourceandproviderconfigusecase-execute","title":"func (*ListAllBySourceAndProviderConfigUseCase) Execute","text":"<pre><code>func (uc *ListAllBySourceAndProviderConfigUseCase) Execute(provider, source string) ([]outputdto.ConfigDTO, error)\n</code></pre> <p>Execute retrieves all configurations by source from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter configurations by.\nsource: The source name to filter configurations by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the configuration data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-listallconfigusecase","title":"type ListAllConfigUseCase","text":"<p>ListAllConfigUseCase is the use case for listing all configurations.</p> <pre><code>type ListAllConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newlistallconfigusecase","title":"func NewListAllConfigUseCase","text":"<pre><code>func NewListAllConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListAllConfigUseCase\n</code></pre> <p>NewListAllConfigUseCase initializes a new instance of ListAllConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-listallconfigusecase-execute","title":"func (*ListAllConfigUseCase) Execute","text":"<pre><code>func (uc *ListAllConfigUseCase) Execute() ([]outputdto.ConfigDTO, error)\n</code></pre> <p>Execute retrieves all configurations from the repository and converts them to output DTOs.</p> <p>Returns:</p> <pre><code>A slice of output DTOs containing the configuration data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-listonebyidconfigusecase","title":"type ListOneByIDConfigUseCase","text":"<p>ListOneByIDConfigUseCase is the use case for listing a single configuration by its ID.</p> <pre><code>type ListOneByIDConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newlistonebyidconfigusecase","title":"func NewListOneByIDConfigUseCase","text":"<pre><code>func NewListOneByIDConfigUseCase(configRepository entity.ConfigRepositoryInterface) *ListOneByIDConfigUseCase\n</code></pre> <p>NewListOneByIDConfigUseCase initializes a new instance of ListOneByIDConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListOneByIDConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-listonebyidconfigusecase-execute","title":"func (*ListOneByIDConfigUseCase) Execute","text":"<pre><code>func (uc *ListOneByIDConfigUseCase) Execute(id string) (outputdto.ConfigDTO, error)\n</code></pre> <p>Execute retrieves a configuration by its ID from the repository and converts it to an output DTO.</p> <p>Parameters:</p> <pre><code>id: The ID of the configuration to retrieve.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the configuration data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#type-updateconfigusecase","title":"type UpdateConfigUseCase","text":"<p>UpdateConfigUseCase is the use case for updating an existing configuration.</p> <pre><code>type UpdateConfigUseCase struct {\n    ConfigRepository entity.ConfigRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-newupdateconfigusecase","title":"func NewUpdateConfigUseCase","text":"<pre><code>func NewUpdateConfigUseCase(configRepository entity.ConfigRepositoryInterface) *UpdateConfigUseCase\n</code></pre> <p>NewUpdateConfigUseCase initializes a new instance of UpdateConfigUseCase with the provided ConfigRepositoryInterface.</p> <p>Parameters:</p> <pre><code>configRepository: The repository interface for managing Config entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of UpdateConfigUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/config-vault/docs/godoc/#func-updateconfigusecase-execute","title":"func (*UpdateConfigUseCase) Execute","text":"<pre><code>func (uc *UpdateConfigUseCase) Execute(input inputdto.ConfigDTO) (outputdto.ConfigDTO, error)\n</code></pre> <p>Execute updates an existing configuration entity based on the provided input DTO and saves it using the repository. It then converts the updated entity to an output DTO and returns it.</p> <p>Parameters:</p> <pre><code>input: The input DTO containing the configuration data.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the updated configuration data, and an error if any occurred during the process.\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/usecases/events-router/","title":"events-router/usecase","text":"<p><code>events-router/usecase</code> is a Go library that provides the implementation of use cases for event-driven processing. This library includes functionalities for pre-processing input messages, handling errors, and dispatching processed orders.</p>"},{"location":"reference/libs/golang/ddd/usecases/events-router/#features","title":"Features","text":"<ul> <li>Pre-process input messages.</li> <li>Handle and dispatch error events.</li> <li>Dispatch processed orders to the appropriate channels.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/events-router/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/usecases/events-router/#creating-and-configuring-the-preprocessingusecase","title":"Creating and Configuring the PreProcessingUseCase","text":"<p>The <code>NewPreProcessingUseCase</code> function creates a new <code>PreProcessingUseCase</code> instance with the specified event order repository, error event, process order event, and event dispatcher.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"libs/golang/ddd/domain/entities/events-router/entity\"\n    \"libs/golang/ddd/usecases/events-router/usecase\"\n    events \"libs/golang/shared/go-events/amqp_events\"\n)\n\nfunc main() {\n    eventOrderRepository := entity.NewEventOrderRepository()\n    errorCreated := events.NewEvent(\"ErrorCreated\")\n    processOrderCreated := events.NewEvent(\"ProcessOrderCreated\")\n    eventDispatcher := events.NewEventDispatcher()\n\n    preProcessingUseCase := usecase.NewPreProcessingUseCase(\n        eventOrderRepository,\n        errorCreated,\n        processOrderCreated,\n        eventDispatcher,\n    )\n\n    // Simulate processing a message channel\n    msgCh := make(chan []byte)\n    go func() {\n        msgCh &lt;- []byte(`{\"metadata\": {\"service\": \"exampleService\", \"source\": \"exampleSource\", \"provider\": \"exampleProvider\", \"processing_id\": \"12345\"}, \"data\": {\"key\": \"value\"}}`)\n        close(msgCh)\n    }()\n\n    preProcessingUseCase.ProcessMessageChannel(msgCh, \"example-listener\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/#processing-messages","title":"Processing Messages","text":"<p>The <code>ProcessMessageChannel</code> method processes messages from the provided channel and dispatches them for further processing.</p> <pre><code>func main() {\n    eventOrderRepository := entity.NewEventOrderRepository()\n    errorCreated := events.NewEvent(\"ErrorCreated\")\n    processOrderCreated := events.NewEvent(\"ProcessOrderCreated\")\n    eventDispatcher := events.NewEventDispatcher()\n\n    preProcessingUseCase := usecase.NewPreProcessingUseCase(\n        eventOrderRepository,\n        errorCreated,\n        processOrderCreated,\n        eventDispatcher,\n    )\n\n    // Simulate processing a message channel\n    msgCh := make(chan []byte)\n    go func() {\n        msgCh &lt;- []byte(`{\"metadata\": {\"service\": \"exampleService\", \"source\": \"exampleSource\", \"provider\": \"exampleProvider\", \"processing_id\": \"12345\"}, \"data\": {\"key\": \"value\"}}`)\n        close(msgCh)\n    }()\n\n    preProcessingUseCase.ProcessMessageChannel(msgCh, \"example-listener\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/#testing","title":"Testing","text":"<p>To run the tests for the <code>usecase</code> package, use the following command:</p> <p><code>sh npx nx test libs-golang-ddd-usecases-events-router</code>]</p>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#usecase","title":"usecase","text":"<pre><code>import \"libs/golang/ddd/usecases/events-router/usecase\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#index","title":"Index","text":"<ul> <li>type PreProcessingUseCase</li> <li>func NewPreProcessingUseCase(eventOrderRepository entity.EventOrderRepositoryInterface, errorCreated events.EventInterface, processOrderCreated events.EventInterface, eventDispatcher events.EventDispatcherInterface) *PreProcessingUseCase</li> <li>func (uc *PreProcessingUseCase) ProcessMessageChannel(msgCh \\&lt;-chan []byte, listenerTag string)</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#type-preprocessingusecase","title":"type PreProcessingUseCase","text":"<p>PreProcessingUseCase handles the pre-processing of input messages, including dispatching errors and processing orders.</p> <pre><code>type PreProcessingUseCase struct {\n    EventOrderRepository entity.EventOrderRepositoryInterface\n    ErrorCreated         events.EventInterface\n    ProcessOrderCreated  events.EventInterface\n    EventDispatcher      events.EventDispatcherInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#func-newpreprocessingusecase","title":"func NewPreProcessingUseCase","text":"<pre><code>func NewPreProcessingUseCase(eventOrderRepository entity.EventOrderRepositoryInterface, errorCreated events.EventInterface, processOrderCreated events.EventInterface, eventDispatcher events.EventDispatcherInterface) *PreProcessingUseCase\n</code></pre> <p>NewPreProcessingUseCase creates a new instance of PreProcessingUseCase.</p> <p>Parameters:</p> <ul> <li>eventOrderRepository: The repository interface for event orders.</li> <li>errorCreated: The event interface for error creation events.</li> <li>processOrderCreated: The event interface for process order creation events.</li> <li>eventDispatcher: The event dispatcher interface.</li> </ul> <p>Returns:</p> <ul> <li>A new instance of PreProcessingUseCase.</li> </ul> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#func-preprocessingusecase-processmessagechannel","title":"func (*PreProcessingUseCase) ProcessMessageChannel","text":"<pre><code>func (uc *PreProcessingUseCase) ProcessMessageChannel(msgCh &lt;-chan []byte, listenerTag string)\n</code></pre> <p>ProcessMessageChannel processes messages from the provided channel and dispatches them for further processing.</p> <p>Parameters:</p> <ul> <li>msgCh: The channel from which messages are received.</li> <li>listenerTag: The tag of the listener processing the messages.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#actions","title":"actions","text":"<pre><code>import \"libs/golang/ddd/usecases/events-router/usecase/actions\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#index_1","title":"Index","text":"<ul> <li>type ListAllByDependenciesAction</li> <li>func NewListAllByDependenciesAction() *ListAllByDependenciesAction</li> <li>func (a *ListAllByDependenciesAction) Execute(provider, service, source string) ([]outputdto.ConfigDTO, error)</li> <li>type UpdateInputStatusAction</li> <li>func NewUpdateInputStatusAction() *UpdateInputStatusAction</li> <li>func (a *UpdateInputStatusAction) Execute(inputMsg outputdto.ProcessOrderDTO, statusCode int, statusDetail string) error</li> <li>type ValidateSchemaAction</li> <li>func NewValidateSchemaAction() *ValidateSchemaAction</li> <li>func (a *ValidateSchemaAction) Execute(inputMsg outputdto.ProcessOrderDTO, schemaType string) error</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#type-listallbydependenciesaction","title":"type ListAllByDependenciesAction","text":"<pre><code>type ListAllByDependenciesAction struct {\n    // contains filtered or unexported fields\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#func-newlistallbydependenciesaction","title":"func NewListAllByDependenciesAction","text":"<pre><code>func NewListAllByDependenciesAction() *ListAllByDependenciesAction\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#func-listallbydependenciesaction-execute","title":"func (*ListAllByDependenciesAction) Execute","text":"<pre><code>func (a *ListAllByDependenciesAction) Execute(provider, service, source string) ([]outputdto.ConfigDTO, error)\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#type-updateinputstatusaction","title":"type UpdateInputStatusAction","text":"<pre><code>type UpdateInputStatusAction struct {\n    // contains filtered or unexported fields\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#func-newupdateinputstatusaction","title":"func NewUpdateInputStatusAction","text":"<pre><code>func NewUpdateInputStatusAction() *UpdateInputStatusAction\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#func-updateinputstatusaction-execute","title":"func (*UpdateInputStatusAction) Execute","text":"<pre><code>func (a *UpdateInputStatusAction) Execute(inputMsg outputdto.ProcessOrderDTO, statusCode int, statusDetail string) error\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#type-validateschemaaction","title":"type ValidateSchemaAction","text":"<pre><code>type ValidateSchemaAction struct {\n    // contains filtered or unexported fields\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#func-newvalidateschemaaction","title":"func NewValidateSchemaAction","text":"<pre><code>func NewValidateSchemaAction() *ValidateSchemaAction\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/events-router/docs/godoc/#func-validateschemaaction-execute","title":"func (*ValidateSchemaAction) Execute","text":"<pre><code>func (a *ValidateSchemaAction) Execute(inputMsg outputdto.ProcessOrderDTO, schemaType string) error\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/","title":"input-broker/usecase","text":"<p><code>input-broker/usecase</code> is a Go library that provides various use cases for managing input entities within a system. This library includes functionalities for creating, updating, deleting, and querying inputs based on different attributes.</p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/#features","title":"Features","text":"<ul> <li>Create, update, delete, and list input entities.</li> <li>Query inputs by service, source, provider, status, and other attributes.</li> <li>Convert input data between different formats.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/usecases/input-broker/#creating-an-input","title":"Creating an Input","text":"<p>The <code>CreateInputUseCase</code> struct provides methods to create a new input entity and save it using the repository.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    inputdto \"libs/golang/ddd/dtos/input-broker/input\"\n    outputdto \"libs/golang/ddd/dtos/input-broker/output\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n    \"libs/golang/ddd/usecases/input-broker/usecase\"\n    events \"libs/golang/shared/go-events/amqp_events\"\n    \"context\"\n)\n\nfunc main() {\n    inputRepo := repository.NewInputRepository(\"mongodb://localhost:27017\", \"testdb\")\n    inputCreatedEvent := events.NewEvent(\"input.created\")\n    eventDispatcher := events.NewEventDispatcher()\n\n    createUseCase := usecase.NewCreateInputUseCase(inputRepo, inputCreatedEvent, eventDispatcher)\n\n    input := inputdto.InputDTO{\n        Provider: \"exampleProvider\",\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Data:     \"exampleData\",\n    }\n\n    output, err := createUseCase.Execute(input)\n    if err != nil {\n        log.Fatalf(\"Error creating input: %v\", err)\n    }\n\n    fmt.Printf(\"Input created: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/#updating-an-input","title":"Updating an Input","text":"<p>The <code>UpdateInputUseCase</code> struct provides methods to update an existing input entity and save it using the repository.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/ddd/domain/entities/input-broker/entity\"\n    inputdto \"libs/golang/ddd/dtos/input-broker/input\"\n    outputdto \"libs/golang/ddd/dtos/input-broker/output\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n    \"libs/golang/ddd/usecases/input-broker/usecase\"\n)\n\nfunc main() {\n    inputRepo := repository.NewInputRepository(\"mongodb://localhost:27017\", \"testdb\")\n\n    updateUseCase := usecase.NewUpdateInputUseCase(inputRepo)\n\n    input := inputdto.InputDTO{\n        Provider: \"exampleProvider\",\n        Service:  \"exampleService\",\n        Source:   \"exampleSource\",\n        Data:     \"updatedData\",\n    }\n\n    output, err := updateUseCase.Execute(input)\n    if err != nil {\n        log.Fatalf(\"Error updating input: %v\", err)\n    }\n\n    fmt.Printf(\"Input updated: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/#deleting-an-input","title":"Deleting an Input","text":"<p>The <code>DeleteInputUseCase</code> struct provides methods to delete an existing input entity by its ID.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n    \"libs/golang/ddd/usecases/input-broker/usecase\"\n)\n\nfunc main() {\n    inputRepo := repository.NewInputRepository(\"mongodb://localhost:27017\", \"testdb\")\n\n    deleteUseCase := usecase.NewDeleteInputUseCase(inputRepo)\n\n    err := deleteUseCase.Execute(\"exampleID\")\n    if err != nil {\n        log.Fatalf(\"Error deleting input: %v\", err)\n    }\n\n    fmt.Println(\"Input deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/#listing-inputs-by-service-and-provider","title":"Listing Inputs by Service and Provider","text":"<p>The <code>ListAllByServiceAndProviderInputUseCase</code> struct provides methods to list all inputs by a specific service and provider.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/input-broker/repository\"\n    \"libs/golang/ddd/usecases/input-broker/usecase\"\n)\n\nfunc main() {\n    inputRepo := repository.NewInputRepository(\"mongodb://localhost:27017\", \"testdb\")\n\n    listUseCase := usecase.NewListAllByServiceAndProviderInputUseCase(inputRepo)\n\n    inputs, err := listUseCase.Execute(\"exampleProvider\", \"exampleService\")\n    if err != nil {\n        log.Fatalf(\"Error listing inputs: %v\", err)\n    }\n\n    for _, input := range inputs {\n        fmt.Printf(\"Input: %+v\\n\", input)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/#testing","title":"Testing","text":"<p>To run the tests for the <code>usecase</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-usecases-input-broker\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/#use-cases","title":"Use Cases","text":"<ul> <li>CreateInputUseCase: Create a new input entity.</li> <li>UpdateInputUseCase: Update an existing input entity.</li> <li>DeleteInputUseCase: Delete an input entity by its ID.</li> <li>ListAllByServiceAndProviderInputUseCase: List all inputs by service and provider.</li> <li>ListAllInputUseCase: List all inputs.</li> <li>ListOneByIDInputUseCase: Retrieve an input by its ID.</li> <li>ListAllByStatusAndProviderInputUseCase: List all inputs by status and provider.</li> <li>ListAllByServiceAndSourceAndProviderInputUseCase: List all inputs by service, source, and provider.</li> <li>ListAllByStatusAndSourceAndProviderInputUseCase: List all inputs by status, source, and provider.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/#errors","title":"Errors","text":"<ul> <li><code>ErrInvalidID</code>: Returned when the ID of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidService</code>: Returned when the service of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidSource</code>: Returned when the source of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidProvider</code>: Returned when the provider of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidData</code>: Returned when the data of an <code>Input</code> is invalid.</li> <li><code>ErrInvalidStatus</code>: Returned when the status of an <code>Input</code> is invalid.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#usecase","title":"usecase","text":"<pre><code>import \"libs/golang/ddd/usecases/input-broker/usecase\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>type CreateInputUseCase</li> <li>func NewCreateInputUseCase(inputRepository entity.InputRepositoryInterface, inputCreated events.EventInterface, eventDispatcher events.EventDispatcherInterface) *CreateInputUseCase</li> <li>func (uc *CreateInputUseCase) Execute(input inputdto.InputDTO) (outputdto.InputDTO, error)</li> <li>type DeleteInputUseCase</li> <li>func NewDeleteInputUseCase(inputRepository entity.InputRepositoryInterface) *DeleteInputUseCase</li> <li>func (uc *DeleteInputUseCase) Execute(id string) error</li> <li>type ListAllByServiceAndProviderInputUseCase</li> <li>func NewListAllByServiceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByServiceAndProviderInputUseCase</li> <li>func (uc *ListAllByServiceAndProviderInputUseCase) Execute(provider, service string) ([]outputdto.InputDTO, error)</li> <li>type ListAllByServiceAndSourceAndProviderInputUseCase</li> <li>func NewListAllByServiceAndSourceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByServiceAndSourceAndProviderInputUseCase</li> <li>func (uc *ListAllByServiceAndSourceAndProviderInputUseCase) Execute(provider, service, source string) ([]outputdto.InputDTO, error)</li> <li>type ListAllBySourceAndProviderInputUseCase</li> <li>func NewListAllBySourceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllBySourceAndProviderInputUseCase</li> <li>func (uc *ListAllBySourceAndProviderInputUseCase) Execute(provider, source string) ([]outputdto.InputDTO, error)</li> <li>type ListAllByStatusAndProviderInputUseCase</li> <li>func NewListAllByStatusAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByStatusAndProviderInputUseCase</li> <li>func (uc *ListAllByStatusAndProviderInputUseCase) Execute(provider string, status int) ([]outputdto.InputDTO, error)</li> <li>type ListAllByStatusAndServiceAndProviderInputUseCase</li> <li>func NewListAllByStatusAndServiceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByStatusAndServiceAndProviderInputUseCase</li> <li>func (uc *ListAllByStatusAndServiceAndProviderInputUseCase) Execute(provider, service string, status int) ([]outputdto.InputDTO, error)</li> <li>type ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite</li> <li>func NewListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite(inputRepository entity.InputRepositoryInterface) *ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite</li> <li>func (uc *ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite) Execute(provider, service, source string, status int) ([]outputdto.InputDTO, error)</li> <li>type ListAllByStatusAndSourceAndProviderInputUseCase</li> <li>func NewListAllByStatusAndSourceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByStatusAndSourceAndProviderInputUseCase</li> <li>func (uc *ListAllByStatusAndSourceAndProviderInputUseCase) Execute(provider, source string, status int) ([]outputdto.InputDTO, error)</li> <li>type ListAllInputUseCase</li> <li>func NewListAllInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllInputUseCase</li> <li>func (uc *ListAllInputUseCase) Execute() ([]outputdto.InputDTO, error)</li> <li>type ListOneByIDInputUseCase</li> <li>func NewListOneByIDInputUseCase(inputRepository entity.InputRepositoryInterface) *ListOneByIDInputUseCase</li> <li>func (uc *ListOneByIDInputUseCase) Execute(id string) (outputdto.InputDTO, error)</li> <li>type UpdateInputUseCase</li> <li>func NewUpdateInputUseCase(inputRepository entity.InputRepositoryInterface) *UpdateInputUseCase</li> <li>func (uc *UpdateInputUseCase) Execute(input inputdto.InputDTO) (outputdto.InputDTO, error)</li> <li>type UpdateStatusInputUseCase</li> <li>func NewUpdateStatusInputUseCase(inputRepository entity.InputRepositoryInterface) *UpdateStatusInputUseCase</li> <li>func (uc *UpdateStatusInputUseCase) Execute(id string, status shareddto.StatusDTO) (outputdto.InputDTO, error)</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-createinputusecase","title":"type CreateInputUseCase","text":"<p>CreateInputUseCase represents the use case for creating an input.</p> <pre><code>type CreateInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n    InputCreated    events.EventInterface\n    EventDispatcher events.EventDispatcherInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newcreateinputusecase","title":"func NewCreateInputUseCase","text":"<pre><code>func NewCreateInputUseCase(inputRepository entity.InputRepositoryInterface, inputCreated events.EventInterface, eventDispatcher events.EventDispatcherInterface) *CreateInputUseCase\n</code></pre> <p>NewCreateInputUseCase creates a new CreateInputUseCase.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\ninputCreated: The event to be dispatched when an input is created.\neventDispatcher: The event dispatcher to dispatch the input created event.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of CreateInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-createinputusecase-execute","title":"func (*CreateInputUseCase) Execute","text":"<pre><code>func (uc *CreateInputUseCase) Execute(input inputdto.InputDTO) (outputdto.InputDTO, error)\n</code></pre> <p>Execute creates a new input entity based on the provided input DTO and saves it using the repository. It then returns the created entity and an error if any occurred during the process.</p> <p>Parameters:</p> <pre><code>input: The input DTO containing the input data.\n</code></pre> <p>Returns:</p> <pre><code>An input DTO containing the created input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-deleteinputusecase","title":"type DeleteInputUseCase","text":"<p>DeleteInputUseCase is the use case for deleting an existing input.</p> <pre><code>type DeleteInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newdeleteinputusecase","title":"func NewDeleteInputUseCase","text":"<pre><code>func NewDeleteInputUseCase(inputRepository entity.InputRepositoryInterface) *DeleteInputUseCase\n</code></pre> <p>NewDeleteInputUseCase initializes a new instance of DeleteInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of DeleteInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-deleteinputusecase-execute","title":"func (*DeleteInputUseCase) Execute","text":"<pre><code>func (uc *DeleteInputUseCase) Execute(id string) error\n</code></pre> <p>Execute deletes an existing input entity based on the provided ID.</p> <p>Parameters:</p> <pre><code>id: The ID of the input to be deleted.\n</code></pre> <p>Returns:</p> <pre><code>An error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-listallbyserviceandproviderinputusecase","title":"type ListAllByServiceAndProviderInputUseCase","text":"<p>ListAllByServiceAndProviderInputUseCase is the use case for listing all inputs by service and provider.</p> <pre><code>type ListAllByServiceAndProviderInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newlistallbyserviceandproviderinputusecase","title":"func NewListAllByServiceAndProviderInputUseCase","text":"<pre><code>func NewListAllByServiceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByServiceAndProviderInputUseCase\n</code></pre> <p>NewListAllByServiceAndProviderInputUseCase initializes a new instance of ListAllByServiceAndProviderInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByServiceAndProviderInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-listallbyserviceandproviderinputusecase-execute","title":"func (*ListAllByServiceAndProviderInputUseCase) Execute","text":"<pre><code>func (uc *ListAllByServiceAndProviderInputUseCase) Execute(provider, service string) ([]outputdto.InputDTO, error)\n</code></pre> <p>Execute retrieves all inputs by service and provider from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter inputs by.\nservice: The service name to filter inputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of input DTOs containing the input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-listallbyserviceandsourceandproviderinputusecase","title":"type ListAllByServiceAndSourceAndProviderInputUseCase","text":"<p>ListAllByServiceAndSourceAndProviderInputUseCase is the use case for listing all inputs by service, source, and provider.</p> <pre><code>type ListAllByServiceAndSourceAndProviderInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newlistallbyserviceandsourceandproviderinputusecase","title":"func NewListAllByServiceAndSourceAndProviderInputUseCase","text":"<pre><code>func NewListAllByServiceAndSourceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByServiceAndSourceAndProviderInputUseCase\n</code></pre> <p>NewListAllByServiceAndSourceAndProviderInputUseCase initializes a new instance of ListAllByServiceAndSourceAndProviderInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByServiceAndSourceAndProviderInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-listallbyserviceandsourceandproviderinputusecase-execute","title":"func (*ListAllByServiceAndSourceAndProviderInputUseCase) Execute","text":"<pre><code>func (uc *ListAllByServiceAndSourceAndProviderInputUseCase) Execute(provider, service, source string) ([]outputdto.InputDTO, error)\n</code></pre> <p>Execute retrieves all inputs by service, source, and provider from the repository.</p> <p>Parameters:</p> <pre><code>service: The service name to filter inputs by.\nsource: The source name to filter inputs by.\nprovider: The provider name to filter inputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-listallbysourceandproviderinputusecase","title":"type ListAllBySourceAndProviderInputUseCase","text":"<p>ListAllBySourceAndProviderInputUseCase is the use case for listing all inputs by source.</p> <pre><code>type ListAllBySourceAndProviderInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newlistallbysourceandproviderinputusecase","title":"func NewListAllBySourceAndProviderInputUseCase","text":"<pre><code>func NewListAllBySourceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllBySourceAndProviderInputUseCase\n</code></pre> <p>NewListAllBySourceAndProviderInputUseCase initializes a new instance of ListAllBySourceAndProviderInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllBySourceAndProviderInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-listallbysourceandproviderinputusecase-execute","title":"func (*ListAllBySourceAndProviderInputUseCase) Execute","text":"<pre><code>func (uc *ListAllBySourceAndProviderInputUseCase) Execute(provider, source string) ([]outputdto.InputDTO, error)\n</code></pre> <p>Execute retrieves all inputs by source from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter inputs by.\nsource: The source name to filter inputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-listallbystatusandproviderinputusecase","title":"type ListAllByStatusAndProviderInputUseCase","text":"<p>ListAllByStatusAndProviderInputUseCase is the use case for listing all inputs.</p> <pre><code>type ListAllByStatusAndProviderInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newlistallbystatusandproviderinputusecase","title":"func NewListAllByStatusAndProviderInputUseCase","text":"<pre><code>func NewListAllByStatusAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByStatusAndProviderInputUseCase\n</code></pre> <p>NewListAllByStatusAndProviderInputUseCase initializes a new instance of ListAllByStatusAndProviderInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByStatusAndProviderInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-listallbystatusandproviderinputusecase-execute","title":"func (*ListAllByStatusAndProviderInputUseCase) Execute","text":"<pre><code>func (uc *ListAllByStatusAndProviderInputUseCase) Execute(provider string, status int) ([]outputdto.InputDTO, error)\n</code></pre> <p>Execute retrieves all inputs from the repository and converts them to output DTOs.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter inputs by.\nstatus: The status to filter inputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-listallbystatusandserviceandproviderinputusecase","title":"type ListAllByStatusAndServiceAndProviderInputUseCase","text":"<p>ListAllByStatusAndServiceAndProviderInputUseCase is the use case for listing all inputs by service and provider.</p> <pre><code>type ListAllByStatusAndServiceAndProviderInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newlistallbystatusandserviceandproviderinputusecase","title":"func NewListAllByStatusAndServiceAndProviderInputUseCase","text":"<pre><code>func NewListAllByStatusAndServiceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByStatusAndServiceAndProviderInputUseCase\n</code></pre> <p>NewListAllByStatusAndServiceAndProviderInputUseCase initializes a new instance of ListAllByStatusAndServiceAndProviderInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByStatusAndServiceAndProviderInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-listallbystatusandserviceandproviderinputusecase-execute","title":"func (*ListAllByStatusAndServiceAndProviderInputUseCase) Execute","text":"<pre><code>func (uc *ListAllByStatusAndServiceAndProviderInputUseCase) Execute(provider, service string, status int) ([]outputdto.InputDTO, error)\n</code></pre> <p>Execute retrieves all inputs by service and provider from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter inputs by.\nservice: The service name to filter inputs by.\nstatus: The status to filter inputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of input DTOs containing the input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-listallbystatusandserviceandsourceandproviderinputusecasesuite","title":"type ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite","text":"<p>ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite is the use case for listing all inputs by service and provider.</p> <pre><code>type ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newlistallbystatusandserviceandsourceandproviderinputusecasesuite","title":"func NewListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite","text":"<pre><code>func NewListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite(inputRepository entity.InputRepositoryInterface) *ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite\n</code></pre> <p>NewListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite initializes a new instance of ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-listallbystatusandserviceandsourceandproviderinputusecasesuite-execute","title":"func (*ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite) Execute","text":"<pre><code>func (uc *ListAllByStatusAndServiceAndSourceAndProviderInputUseCaseSuite) Execute(provider, service, source string, status int) ([]outputdto.InputDTO, error)\n</code></pre> <p>Execute retrieves all inputs by service and provider from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter inputs by.\n    service: The service name to filter inputs by.\n source: The source name to filter inputs by.\n    status: The status to filter inputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of input DTOs containing the input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-listallbystatusandsourceandproviderinputusecase","title":"type ListAllByStatusAndSourceAndProviderInputUseCase","text":"<p>ListAllByStatusAndSourceAndProviderInputUseCase is the use case for listing all inputs by source.</p> <pre><code>type ListAllByStatusAndSourceAndProviderInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newlistallbystatusandsourceandproviderinputusecase","title":"func NewListAllByStatusAndSourceAndProviderInputUseCase","text":"<pre><code>func NewListAllByStatusAndSourceAndProviderInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllByStatusAndSourceAndProviderInputUseCase\n</code></pre> <p>NewListAllByStatusAndSourceAndProviderInputUseCase initializes a new instance of ListAllByStatusAndSourceAndProviderInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByStatusAndSourceAndProviderInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-listallbystatusandsourceandproviderinputusecase-execute","title":"func (*ListAllByStatusAndSourceAndProviderInputUseCase) Execute","text":"<pre><code>func (uc *ListAllByStatusAndSourceAndProviderInputUseCase) Execute(provider, source string, status int) ([]outputdto.InputDTO, error)\n</code></pre> <p>Execute retrieves all inputs by source from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter inputs by.\nsource: The source name to filter inputs by.\nstatus: The status code to filter inputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-listallinputusecase","title":"type ListAllInputUseCase","text":"<p>ListAllInputUseCase is the use case for listing all inputs.</p> <pre><code>type ListAllInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newlistallinputusecase","title":"func NewListAllInputUseCase","text":"<pre><code>func NewListAllInputUseCase(inputRepository entity.InputRepositoryInterface) *ListAllInputUseCase\n</code></pre> <p>NewListAllInputUseCase initializes a new instance of ListAllInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-listallinputusecase-execute","title":"func (*ListAllInputUseCase) Execute","text":"<pre><code>func (uc *ListAllInputUseCase) Execute() ([]outputdto.InputDTO, error)\n</code></pre> <p>Execute retrieves all inputs from the repository and converts them to output DTOs.</p> <p>Returns:</p> <pre><code>A slice of output DTOs containing the input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-listonebyidinputusecase","title":"type ListOneByIDInputUseCase","text":"<p>ListOneByIDInputUseCase is the use case for listing a single input by its ID.</p> <pre><code>type ListOneByIDInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newlistonebyidinputusecase","title":"func NewListOneByIDInputUseCase","text":"<pre><code>func NewListOneByIDInputUseCase(inputRepository entity.InputRepositoryInterface) *ListOneByIDInputUseCase\n</code></pre> <p>NewListOneByIDInputUseCase initializes a new instance of ListOneByIDInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListOneByIDInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-listonebyidinputusecase-execute","title":"func (*ListOneByIDInputUseCase) Execute","text":"<pre><code>func (uc *ListOneByIDInputUseCase) Execute(id string) (outputdto.InputDTO, error)\n</code></pre> <p>Execute retrieves a input by its ID from the repository and converts it to an output DTO.</p> <p>Parameters:</p> <pre><code>id: The ID of the inputuration to retrieve.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-updateinputusecase","title":"type UpdateInputUseCase","text":"<p>UpdateInputUseCase is the use case for updating an existing input.</p> <pre><code>type UpdateInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newupdateinputusecase","title":"func NewUpdateInputUseCase","text":"<pre><code>func NewUpdateInputUseCase(inputRepository entity.InputRepositoryInterface) *UpdateInputUseCase\n</code></pre> <p>NewUpdateInputUseCase initializes a new instance of UpdateInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of UpdateInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-updateinputusecase-execute","title":"func (*UpdateInputUseCase) Execute","text":"<pre><code>func (uc *UpdateInputUseCase) Execute(input inputdto.InputDTO) (outputdto.InputDTO, error)\n</code></pre> <p>Execute updates an existing input entity based on the provided input DTO and saves it using the repository. It then converts the updated entity to an output DTO and returns it.</p> <p>Parameters:</p> <pre><code>input: The input DTO containing the input data.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the updated input data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#type-updatestatusinputusecase","title":"type UpdateStatusInputUseCase","text":"<p>UpdateStatusInputUseCase is the use case for updating status of an existing input.</p> <pre><code>type UpdateStatusInputUseCase struct {\n    InputRepository entity.InputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-newupdatestatusinputusecase","title":"func NewUpdateStatusInputUseCase","text":"<pre><code>func NewUpdateStatusInputUseCase(inputRepository entity.InputRepositoryInterface) *UpdateStatusInputUseCase\n</code></pre> <p>NewUpdateStatusInputUseCase initializes a new instance of UpdateStatusInputUseCase with the provided InputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>inputRepository: The repository interface for managing Input entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of UpdateStatusInputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/input-broker/docs/godoc/#func-updatestatusinputusecase-execute","title":"func (*UpdateStatusInputUseCase) Execute","text":"<pre><code>func (uc *UpdateStatusInputUseCase) Execute(id string, status shareddto.StatusDTO) (outputdto.InputDTO, error)\n</code></pre> <p>Execute updates status of an existing input entity based on the provided input DTO and saves it using the repository. It then converts the updated entity to an output DTO and returns it.</p> <p>Parameters:</p> <pre><code>input: The input DTO containing the input data.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the updated input data, and an error if any occurred during the process.\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/","title":"output-vault/usecase","text":"<p><code>output-vault/usecase</code> is a Go library that provides various use cases for managing outputs entities within a system. This library includes functionalities for creating, updating, deleting, and querying configurations based on different attributes.</p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/#features","title":"Features","text":"<ul> <li>Create, update, delete, and list outputs entities.</li> <li>Query outputs by service, source, provider, and other attributes.</li> <li>Validate and convert outputs data between different formats.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/usecases/output-vault/#creating-a-output","title":"Creating a Output","text":"<p>The <code>CreateOutputUseCase</code> struct provides methods to create a new output entity and save it using the repository.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n    inputdto \"libs/golang/ddd/dtos/output-vault/input\"\n    outputdto \"libs/golang/ddd/dtos/output-vault/output\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n    \"libs/golang/ddd/usecases/output-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewOutputRepository(client, \"testdb\")\n    createUseCase := usecase.NewOutputConfigUseCase(repo)\n\n    input = inputdto.OutputDTO{\n        Service:    \"test_service\",\n        Source:     \"test_source\",\n        Provider:   \"test_provider\",\n        OutputType: \"test_output_type\",\n        JsonOutput: shareddto.JsonOutputDTO{\n            JsonType: \"object\",\n            Properties: map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            Required: []string{\n                \"field1\",\n            },\n        },\n    }\n\n    output, err := createUseCase.Execute(input)\n    if err != nil {\n        fmt.Println(\"Error creating output:\", err)\n        return\n    }\n\n    fmt.Printf(\"Output created: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/#updating-a-output","title":"Updating a output","text":"<p>The <code>UpdateOutputUseCase</code> struct provides methods to update an existing output entity and save it using the repository.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/output-vault/entity\"\n    inputdto \"libs/golang/ddd/dtos/output-vault/input\"\n    outputdto \"libs/golang/ddd/dtos/output-vault/output\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n    \"libs/golang/ddd/usecases/output-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewOutputRepository(client, \"testdb\")\n    updateUseCase := usecase.NewUpdateOutputUseCase(repo)\n\n    input = inputdto.OutputDTO{\n        Service:    \"test_service\",\n        Source:     \"test_source\",\n        Provider:   \"test_provider\",\n        OutputType: \"test_output_type\",\n        JsonOutput: shareddto.JsonOutputDTO{\n            JsonType: \"object\",\n            Properties: map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            Required: []string{\n                \"field1\",\n            },\n        },\n    }\n\n    output, err := updateUseCase.Execute(input)\n    if err != nil {\n        fmt.Println(\"Error updating output:\", err)\n        return\n    }\n\n    fmt.Printf(\"Output updated: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/#deleting-a-output","title":"Deleting a Output","text":"<p>The <code>DeleteOutputUseCase</code> struct provides methods to delete an existing output entity by its ID.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n    \"libs/golang/ddd/usecases/output-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewOutputRepository(client, \"testdb\")\n    deleteUseCase := usecase.NewDeleteOutputUseCase(repo)\n\n    err = deleteUseCase.Execute(\"exampleID\")\n    if err != nil {\n        fmt.Println(\"Error deleting output:\", err)\n        return\n    }\n\n    fmt.Println(\"Output deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/#listing-output-by-service","title":"Listing Output by Service","text":"<p>The <code>ListAllByServiceOutputUseCase</code> struct provides methods to list all output by a specific service.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/output-vault/repository\"\n    \"libs/golang/ddd/usecases/output-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewOutputRepository(client, \"testdb\")\n    listUseCase := usecase.NewListAllByServiceOutputUseCase(repo)\n\n    outputs, err := listUseCase.Execute(\"exampleService\")\n    if err != nil {\n        fmt.Println(\"Error listing outputs:\", err)\n        return\n    }\n\n    for _, output := range outputs {\n        fmt.Printf(\"Output: %+v\\n\", output)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>usecase</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-usecases-output-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/#use-cases","title":"Use Cases","text":"<ul> <li>CreateOutputUseCase: Create a new output entity.</li> <li>UpdateOutputUseCase: Update an existing output entity.</li> <li>DeleteOutputUseCase: Delete a output entity by its ID.</li> <li>ListAllByServiceOutputUseCase: List all outputs by a specific service.</li> <li>ListAllOutputUseCase: List all outputs.</li> <li>ListOneByIDOutputUseCase: Retrieve a output by its ID.</li> <li>ListAllByServiceAndSourceOutputUseCase: List all outputs by service and source.</li> <li>ListAllByServiceAndSourceAndProviderOutputUseCase: List all outputs by service, source, and provider.</li> <li>ListAllBySourceOutputUseCase: List all outputs by source.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/#errors","title":"Errors","text":"<ul> <li><code>ErrInvalidID</code>: Returned when the ID of a <code>Output</code> is invalid.</li> <li><code>ErrInvalidService</code>: Returned when the service of a <code>Output</code> is invalid.</li> <li><code>ErrInvalidSource</code>: Returned when the source of a <code>Output</code> is invalid.</li> <li><code>ErrInvalidProvider</code>: Returned when the provider of a <code>Output</code> is invalid.</li> <li><code>ErrInvalidConfigVersionID</code>: Returned when the config version ID of a <code>Output</code> is invalid.</li> <li><code>ErrInvalidCreatedAt</code>: Returned when the created at timestamp of a <code>Output</code> is invalid.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#usecase","title":"usecase","text":"<pre><code>import \"libs/golang/ddd/usecases/output-vault/usecase\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type CreateOutputUseCase</li> <li>func NewCreateOutputUseCase(outputRepository entity.OutputRepositoryInterface) *CreateOutputUseCase</li> <li>func (uc *CreateOutputUseCase) Execute(input inputdto.OutputDTO) (outputdto.OutputDTO, error)</li> <li>type DeleteOutputUseCase</li> <li>func NewDeleteOutputUseCase(outputRepository entity.OutputRepositoryInterface) *DeleteOutputUseCase</li> <li>func (uc *DeleteOutputUseCase) Execute(id string) error</li> <li>type ListAllByServiceAndProviderOutputUseCase</li> <li>func NewListAllByServiceAndProviderOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListAllByServiceAndProviderOutputUseCase</li> <li>func (uc *ListAllByServiceAndProviderOutputUseCase) Execute(provider, service string) ([]outputdto.OutputDTO, error)</li> <li>type ListAllByServiceAndSourceAndProviderOutputUseCase</li> <li>func NewListAllByServiceAndSourceAndProviderOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListAllByServiceAndSourceAndProviderOutputUseCase</li> <li>func (uc *ListAllByServiceAndSourceAndProviderOutputUseCase) Execute(provider, service, source string) ([]outputdto.OutputDTO, error)</li> <li>type ListAllBySourceAndProviderOutputUseCase</li> <li>func NewListAllBySourceAndProviderOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListAllBySourceAndProviderOutputUseCase</li> <li>func (uc *ListAllBySourceAndProviderOutputUseCase) Execute(provider, source string) ([]outputdto.OutputDTO, error)</li> <li>type ListAllOutputUseCase</li> <li>func NewListAllOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListAllOutputUseCase</li> <li>func (uc *ListAllOutputUseCase) Execute() ([]outputdto.OutputDTO, error)</li> <li>type ListOneByIDOutputUseCase</li> <li>func NewListOneByIDOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListOneByIDOutputUseCase</li> <li>func (uc *ListOneByIDOutputUseCase) Execute(id string) (outputdto.OutputDTO, error)</li> <li>type UpdateOutputUseCase</li> <li>func NewUpdateOutputUseCase(outputRepository entity.OutputRepositoryInterface) *UpdateOutputUseCase</li> <li>func (uc *UpdateOutputUseCase) Execute(input inputdto.OutputDTO) (outputdto.OutputDTO, error)</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#type-createoutputusecase","title":"type CreateOutputUseCase","text":"<p>CreateOutputUseCase is the use case for creating a new output.</p> <pre><code>type CreateOutputUseCase struct {\n    OutputRepository entity.OutputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-newcreateoutputusecase","title":"func NewCreateOutputUseCase","text":"<pre><code>func NewCreateOutputUseCase(outputRepository entity.OutputRepositoryInterface) *CreateOutputUseCase\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-createoutputusecase-execute","title":"func (*CreateOutputUseCase) Execute","text":"<pre><code>func (uc *CreateOutputUseCase) Execute(input inputdto.OutputDTO) (outputdto.OutputDTO, error)\n</code></pre> <p>Execute creates a new output entity based on the provided input DTO and saves it using the repository. It then converts the created entity to an output DTO and returns it.</p> <p>Parameters:</p> <pre><code>input: The input DTO containing the output data.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the created output data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#type-deleteoutputusecase","title":"type DeleteOutputUseCase","text":"<p>DeleteOutputUseCase is a use case for deleting a output.</p> <pre><code>type DeleteOutputUseCase struct {\n    OutputRepository entity.OutputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-newdeleteoutputusecase","title":"func NewDeleteOutputUseCase","text":"<pre><code>func NewDeleteOutputUseCase(outputRepository entity.OutputRepositoryInterface) *DeleteOutputUseCase\n</code></pre> <p>NewDeleteOutputUseCase initializes a new instance of DeleteOutputUseCase with the provided OutputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>outputRepository: The repository interface for managing Output entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of DeleteOutputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-deleteoutputusecase-execute","title":"func (*DeleteOutputUseCase) Execute","text":"<pre><code>func (uc *DeleteOutputUseCase) Execute(id string) error\n</code></pre> <p>Execute deletes a output entity based on the provided ID.</p> <p>Parameters:</p> <pre><code>id: The ID of the output to be deleted.\n</code></pre> <p>Returns:</p> <pre><code>An error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#type-listallbyserviceandprovideroutputusecase","title":"type ListAllByServiceAndProviderOutputUseCase","text":"<p>ListAllByServiceAndProviderOutputUseCase is the use case for listing all outputs by service and provider.</p> <pre><code>type ListAllByServiceAndProviderOutputUseCase struct {\n    OutputRepository entity.OutputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-newlistallbyserviceandprovideroutputusecase","title":"func NewListAllByServiceAndProviderOutputUseCase","text":"<pre><code>func NewListAllByServiceAndProviderOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListAllByServiceAndProviderOutputUseCase\n</code></pre> <p>NewListAllByServiceAndProviderOutputUseCase initializes a new instance of ListAllByServiceAndProviderOutputUseCase with the provided OutputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>outputRepository: The repository interface for managing Output entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByServiceAndProviderOutputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-listallbyserviceandprovideroutputusecase-execute","title":"func (*ListAllByServiceAndProviderOutputUseCase) Execute","text":"<pre><code>func (uc *ListAllByServiceAndProviderOutputUseCase) Execute(provider, service string) ([]outputdto.OutputDTO, error)\n</code></pre> <p>Execute retrieves all outputs by service and provider from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter outputs by.\nservice: The service name to filter outputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the output data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#type-listallbyserviceandsourceandprovideroutputusecase","title":"type ListAllByServiceAndSourceAndProviderOutputUseCase","text":"<p>ListAllByServiceAndSourceAndProviderOutputUseCase is the use case for listing all outputs by service, source, and provider.</p> <pre><code>type ListAllByServiceAndSourceAndProviderOutputUseCase struct {\n    OutputRepository entity.OutputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-newlistallbyserviceandsourceandprovideroutputusecase","title":"func NewListAllByServiceAndSourceAndProviderOutputUseCase","text":"<pre><code>func NewListAllByServiceAndSourceAndProviderOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListAllByServiceAndSourceAndProviderOutputUseCase\n</code></pre> <p>NewListAllByServiceAndSourceAndProviderOutputUseCase initializes a new instance of ListAllByServiceAndSourceAndProviderOutputUseCase with the provided OutputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>outputRepository: The repository interface for managing Output entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByServiceAndSourceAndProviderOutputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-listallbyserviceandsourceandprovideroutputusecase-execute","title":"func (*ListAllByServiceAndSourceAndProviderOutputUseCase) Execute","text":"<pre><code>func (uc *ListAllByServiceAndSourceAndProviderOutputUseCase) Execute(provider, service, source string) ([]outputdto.OutputDTO, error)\n</code></pre> <p>Execute retrieves all outputs by service, source, and provider from the repository.</p> <p>Parameters:</p> <pre><code>service: The service name to filter outputs by.\nsource: The source name to filter outputs by.\nprovider: The provider name to filter outputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the output data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#type-listallbysourceandprovideroutputusecase","title":"type ListAllBySourceAndProviderOutputUseCase","text":"<p>ListAllBySourceAndProviderOutputUseCase is the use case for listing all outputs by source.</p> <pre><code>type ListAllBySourceAndProviderOutputUseCase struct {\n    OutputRepository entity.OutputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-newlistallbysourceandprovideroutputusecase","title":"func NewListAllBySourceAndProviderOutputUseCase","text":"<pre><code>func NewListAllBySourceAndProviderOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListAllBySourceAndProviderOutputUseCase\n</code></pre> <p>NewListAllBySourceAndProviderOutputUseCase initializes a new instance of ListAllBySourceAndProviderOutputUseCase with the provided OutputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>outputRepository: The repository interface for managing Output entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllBySourceAndProviderOutputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-listallbysourceandprovideroutputusecase-execute","title":"func (*ListAllBySourceAndProviderOutputUseCase) Execute","text":"<pre><code>func (uc *ListAllBySourceAndProviderOutputUseCase) Execute(provider, source string) ([]outputdto.OutputDTO, error)\n</code></pre> <p>Execute retrieves all outputs by source from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter outputs by.\nsource: The source name to filter outputs by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the output data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#type-listalloutputusecase","title":"type ListAllOutputUseCase","text":"<p>ListAllOutputUseCase is the use case for listing all outputs.</p> <pre><code>type ListAllOutputUseCase struct {\n    OutputRepository entity.OutputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-newlistalloutputusecase","title":"func NewListAllOutputUseCase","text":"<pre><code>func NewListAllOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListAllOutputUseCase\n</code></pre> <p>NewListAllOutputUseCase initializes a new instance of ListAllOutputUseCase with the provided OutputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>outputRepository: The repository interface for managing Output entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllOutputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-listalloutputusecase-execute","title":"func (*ListAllOutputUseCase) Execute","text":"<pre><code>func (uc *ListAllOutputUseCase) Execute() ([]outputdto.OutputDTO, error)\n</code></pre> <p>Execute retrieves all outputs from the repository and converts them to output DTOs.</p> <p>Returns:</p> <pre><code>A slice of output DTOs containing the output data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#type-listonebyidoutputusecase","title":"type ListOneByIDOutputUseCase","text":"<p>ListOneByIDOutputUseCase is the use case for listing a output by ID.</p> <pre><code>type ListOneByIDOutputUseCase struct {\n    OutputRepository entity.OutputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-newlistonebyidoutputusecase","title":"func NewListOneByIDOutputUseCase","text":"<pre><code>func NewListOneByIDOutputUseCase(outputRepository entity.OutputRepositoryInterface) *ListOneByIDOutputUseCase\n</code></pre> <p>NewListOneByIDOutputUseCase initializes a new instance of ListOneByIDOutputUseCase with the provided OutputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>outputRepository: The repository interface for managing Output entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListOneByIDOutputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-listonebyidoutputusecase-execute","title":"func (*ListOneByIDOutputUseCase) Execute","text":"<pre><code>func (uc *ListOneByIDOutputUseCase) Execute(id string) (outputdto.OutputDTO, error)\n</code></pre> <p>Execute retrieves a output by its ID from the repository and converts it to an output DTO.</p> <p>Parameters:</p> <pre><code>id: The ID of the output to retrieve.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the output data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#type-updateoutputusecase","title":"type UpdateOutputUseCase","text":"<p>UpdateOutputUseCase is the use case for updating an existing output.</p> <pre><code>type UpdateOutputUseCase struct {\n    OutputRepository entity.OutputRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-newupdateoutputusecase","title":"func NewUpdateOutputUseCase","text":"<pre><code>func NewUpdateOutputUseCase(outputRepository entity.OutputRepositoryInterface) *UpdateOutputUseCase\n</code></pre> <p>NewUpdateOutputUseCase initializes a new instance of UpdateOutputUseCase with the provided OutputRepositoryInterface.</p> <p>Parameters:</p> <pre><code>outputRepository: The repository interface for managing Output entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of UpdateOutputUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/output-vault/docs/godoc/#func-updateoutputusecase-execute","title":"func (*UpdateOutputUseCase) Execute","text":"<pre><code>func (uc *UpdateOutputUseCase) Execute(input inputdto.OutputDTO) (outputdto.OutputDTO, error)\n</code></pre> <p>Execute updates an existing output entity based on the provided input DTO and saves it using the repository. It then converts the updated entity to an output DTO and returns it.</p> <p>Parameters:</p> <pre><code>input: The input DTO containing the output data.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the updated output data, and an error if any occurred during the process.\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/","title":"schema-vault/usecase","text":"<p><code>schema-vault/usecase</code> is a Go library that provides various use cases for managing schemas entities within a system. This library includes functionalities for creating, updating, deleting, and querying configurations based on different attributes.</p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/#features","title":"Features","text":"<ul> <li>Create, update, delete, and list schemas entities.</li> <li>Query schemas by service, source, provider, and other attributes.</li> <li>Validate and convert schemas data between different formats.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/ddd/usecases/schema-vault/#creating-a-schema","title":"Creating a Schema","text":"<p>The <code>CreateSchemaUseCase</code> struct provides methods to create a new schema entity and save it using the repository.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    inputdto \"libs/golang/ddd/dtos/schema-vault/input\"\n    outputdto \"libs/golang/ddd/dtos/schema-vault/output\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n    \"libs/golang/ddd/usecases/schema-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewSchemaRepository(client, \"testdb\")\n    createUseCase := usecase.NewSchemaConfigUseCase(repo)\n\n    input = inputdto.SchemaDTO{\n        Service:    \"test_service\",\n        Source:     \"test_source\",\n        Provider:   \"test_provider\",\n        SchemaType: \"test_schema_type\",\n        JsonSchema: shareddto.JsonSchemaDTO{\n            JsonType: \"object\",\n            Properties: map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            Required: []string{\n                \"field1\",\n            },\n        },\n    }\n\n    output, err := createUseCase.Execute(input)\n    if err != nil {\n        fmt.Println(\"Error creating schema:\", err)\n        return\n    }\n\n    fmt.Printf(\"Schema created: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/#updating-a-schema","title":"Updating a schema","text":"<p>The <code>UpdateSchemaUseCase</code> struct provides methods to update an existing schema entity and save it using the repository.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/entities/schema-vault/entity\"\n    inputdto \"libs/golang/ddd/dtos/schema-vault/input\"\n    outputdto \"libs/golang/ddd/dtos/schema-vault/output\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n    \"libs/golang/ddd/usecases/schema-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewSchemaRepository(client, \"testdb\")\n    updateUseCase := usecase.NewUpdateSchemaUseCase(repo)\n\n    input = inputdto.SchemaDTO{\n        Service:    \"test_service\",\n        Source:     \"test_source\",\n        Provider:   \"test_provider\",\n        SchemaType: \"test_schema_type\",\n        JsonSchema: shareddto.JsonSchemaDTO{\n            JsonType: \"object\",\n            Properties: map[string]interface{}{\n                \"field1\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n                \"field2\": map[string]interface{}{\n                    \"type\": \"string\",\n                },\n            },\n            Required: []string{\n                \"field1\",\n            },\n        },\n    }\n\n    output, err := updateUseCase.Execute(input)\n    if err != nil {\n        fmt.Println(\"Error updating schema:\", err)\n        return\n    }\n\n    fmt.Printf(\"Schema updated: %+v\\n\", output)\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/#deleting-a-schema","title":"Deleting a Schema","text":"<p>The <code>DeleteSchemaUseCase</code> struct provides methods to delete an existing schema entity by its ID.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n    \"libs/golang/ddd/usecases/schema-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewSchemaRepository(client, \"testdb\")\n    deleteUseCase := usecase.NewDeleteSchemaUseCase(repo)\n\n    err = deleteUseCase.Execute(\"exampleID\")\n    if err != nil {\n        fmt.Println(\"Error deleting schema:\", err)\n        return\n    }\n\n    fmt.Println(\"Schema deleted successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/#listing-schema-by-service","title":"Listing Schema by Service","text":"<p>The <code>ListAllByServiceSchemaUseCase</code> struct provides methods to list all schema by a specific service.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/ddd/domain/repositories/database/mongodb/schema-vault/repository\"\n    \"libs/golang/ddd/usecases/schema-vault/usecase\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nfunc main() {\n    clientOptions := options.Client().ApplyURI(\"mongodb://localhost:27017\")\n    client, err := mongo.Connect(context.Background(), clientOptions)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    repo := repository.NewSchemaRepository(client, \"testdb\")\n    listUseCase := usecase.NewListAllByServiceSchemaUseCase(repo)\n\n    schemas, err := listUseCase.Execute(\"exampleService\")\n    if err != nil {\n        fmt.Println(\"Error listing schemas:\", err)\n        return\n    }\n\n    for _, schema := range schemas {\n        fmt.Printf(\"Schema: %+v\\n\", schema)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/#testing","title":"Testing","text":"<p>To run the tests for the <code>usecase</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-ddd-usecases-schema-vault\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/#use-cases","title":"Use Cases","text":"<ul> <li>CreateSchemaUseCase: Create a new schema entity.</li> <li>UpdateSchemaUseCase: Update an existing schema entity.</li> <li>DeleteSchemaUseCase: Delete a schema entity by its ID.</li> <li>ListAllByServiceSchemaUseCase: List all schemas by a specific service.</li> <li>ListAllSchemaUseCase: List all schemas.</li> <li>ListOneByIDSchemaUseCase: Retrieve a schema by its ID.</li> <li>ListAllByServiceAndSourceSchemaUseCase: List all schemas by service and source.</li> <li>ListAllByServiceAndSourceAndProviderSchemaUseCase: List all schemas by service, source, and provider.</li> <li>ListAllBySourceSchemaUseCase: List all schemas by source.</li> <li>ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase: List one schema by service, source, provider and schema type.</li> <li>ValidateJsonSchema: Valids a data structure with a registered schema.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/#errors","title":"Errors","text":"<ul> <li><code>ErrInvalidID</code>: Returned when the ID of a <code>Schema</code> is invalid.</li> <li><code>ErrInvalidService</code>: Returned when the service of a <code>Schema</code> is invalid.</li> <li><code>ErrInvalidSource</code>: Returned when the source of a <code>Schema</code> is invalid.</li> <li><code>ErrInvalidProvider</code>: Returned when the provider of a <code>Schema</code> is invalid.</li> <li><code>ErrInvalidConfigVersionID</code>: Returned when the config version ID of a <code>Schema</code> is invalid.</li> <li><code>ErrInvalidCreatedAt</code>: Returned when the created at timestamp of a <code>Schema</code> is invalid.</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#usecase","title":"usecase","text":"<pre><code>import \"libs/golang/ddd/usecases/schema-vault/usecase\"\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>type CreateSchemaUseCase</li> <li>func NewCreateSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *CreateSchemaUseCase</li> <li>func (uc *CreateSchemaUseCase) Execute(input inputdto.SchemaDTO) (outputdto.SchemaDTO, error)</li> <li>type DeleteSchemaUseCase</li> <li>func NewDeleteSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *DeleteSchemaUseCase</li> <li>func (uc *DeleteSchemaUseCase) Execute(id string) error</li> <li>type ListAllByServiceAndProviderSchemaUseCase</li> <li>func NewListAllByServiceAndProviderSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListAllByServiceAndProviderSchemaUseCase</li> <li>func (uc *ListAllByServiceAndProviderSchemaUseCase) Execute(provider, service string) ([]outputdto.SchemaDTO, error)</li> <li>type ListAllByServiceAndSourceAndProviderSchemaUseCase</li> <li>func NewListAllByServiceAndSourceAndProviderSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListAllByServiceAndSourceAndProviderSchemaUseCase</li> <li>func (uc *ListAllByServiceAndSourceAndProviderSchemaUseCase) Execute(provider, service, source string) ([]outputdto.SchemaDTO, error)</li> <li>type ListAllBySourceAndProviderSchemaUseCase</li> <li>func NewListAllBySourceAndProviderSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListAllBySourceAndProviderSchemaUseCase</li> <li>func (uc *ListAllBySourceAndProviderSchemaUseCase) Execute(provider, source string) ([]outputdto.SchemaDTO, error)</li> <li>type ListAllSchemaUseCase</li> <li>func NewListAllSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListAllSchemaUseCase</li> <li>func (uc *ListAllSchemaUseCase) Execute() ([]outputdto.SchemaDTO, error)</li> <li>type ListOneByIDSchemaUseCase</li> <li>func NewListOneByIDSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListOneByIDSchemaUseCase</li> <li>func (uc *ListOneByIDSchemaUseCase) Execute(id string) (outputdto.SchemaDTO, error)</li> <li>type ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase</li> <li>func NewListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase</li> <li>func (uc *ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase) Execute(provider, service, source, schemaType string) (outputdto.SchemaDTO, error)</li> <li>type UpdateSchemaUseCase</li> <li>func NewUpdateSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *UpdateSchemaUseCase</li> <li>func (uc *UpdateSchemaUseCase) Execute(input inputdto.SchemaDTO) (outputdto.SchemaDTO, error)</li> <li>type ValidateSchemaUseCase</li> <li>func NewValidateSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ValidateSchemaUseCase</li> <li>func (uc *ValidateSchemaUseCase) Execute(dto inputdto.SchemaDataDTO) (outputdto.SchemaValidationDTO, error)</li> </ul>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-createschemausecase","title":"type CreateSchemaUseCase","text":"<p>CreateSchemaUseCase is the use case for creating a new schema.</p> <pre><code>type CreateSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newcreateschemausecase","title":"func NewCreateSchemaUseCase","text":"<pre><code>func NewCreateSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *CreateSchemaUseCase\n</code></pre> <p>NewCreateSchemaUseCase initializes a new instance of CreateSchemaUseCase with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of CreateSchemaUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-createschemausecase-execute","title":"func (*CreateSchemaUseCase) Execute","text":"<pre><code>func (uc *CreateSchemaUseCase) Execute(input inputdto.SchemaDTO) (outputdto.SchemaDTO, error)\n</code></pre> <p>Execute creates a new schema entity based on the provided input DTO and saves it using the repository. It then converts the created entity to an output DTO and returns it.</p> <p>Parameters:</p> <pre><code>input: The input DTO containing the schema data.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the created schema data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-deleteschemausecase","title":"type DeleteSchemaUseCase","text":"<p>DeleteSchemaUseCase is a use case for deleting a schema.</p> <pre><code>type DeleteSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newdeleteschemausecase","title":"func NewDeleteSchemaUseCase","text":"<pre><code>func NewDeleteSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *DeleteSchemaUseCase\n</code></pre> <p>NewDeleteSchemaUseCase initializes a new instance of DeleteSchemaUseCase with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of DeleteSchemaUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-deleteschemausecase-execute","title":"func (*DeleteSchemaUseCase) Execute","text":"<pre><code>func (uc *DeleteSchemaUseCase) Execute(id string) error\n</code></pre> <p>Execute deletes a schema entity based on the provided ID.</p> <p>Parameters:</p> <pre><code>id: The ID of the schema to be deleted.\n</code></pre> <p>Returns:</p> <pre><code>An error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-listallbyserviceandproviderschemausecase","title":"type ListAllByServiceAndProviderSchemaUseCase","text":"<p>ListAllByServiceAndProviderSchemaUseCase is the use case for listing all schemas by service and provider.</p> <pre><code>type ListAllByServiceAndProviderSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newlistallbyserviceandproviderschemausecase","title":"func NewListAllByServiceAndProviderSchemaUseCase","text":"<pre><code>func NewListAllByServiceAndProviderSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListAllByServiceAndProviderSchemaUseCase\n</code></pre> <p>NewListAllByServiceAndProviderSchemaUseCase initializes a new instance of ListAllByServiceAndProviderSchemaUseCase with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByServiceAndProviderSchemaUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-listallbyserviceandproviderschemausecase-execute","title":"func (*ListAllByServiceAndProviderSchemaUseCase) Execute","text":"<pre><code>func (uc *ListAllByServiceAndProviderSchemaUseCase) Execute(provider, service string) ([]outputdto.SchemaDTO, error)\n</code></pre> <p>Execute retrieves all schemas by service and provider from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter schemas by.\nservice: The service name to filter schemas by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the schema data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-listallbyserviceandsourceandproviderschemausecase","title":"type ListAllByServiceAndSourceAndProviderSchemaUseCase","text":"<p>ListAllByServiceAndSourceAndProviderSchemaUseCase is the use case for listing all schemas by service, source, and provider.</p> <pre><code>type ListAllByServiceAndSourceAndProviderSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newlistallbyserviceandsourceandproviderschemausecase","title":"func NewListAllByServiceAndSourceAndProviderSchemaUseCase","text":"<pre><code>func NewListAllByServiceAndSourceAndProviderSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListAllByServiceAndSourceAndProviderSchemaUseCase\n</code></pre> <p>NewListAllByServiceAndSourceAndProviderSchemaUseCase initializes a new instance of ListAllByServiceAndSourceAndProviderSchemaUseCase with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllByServiceAndSourceAndProviderSchemaUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-listallbyserviceandsourceandproviderschemausecase-execute","title":"func (*ListAllByServiceAndSourceAndProviderSchemaUseCase) Execute","text":"<pre><code>func (uc *ListAllByServiceAndSourceAndProviderSchemaUseCase) Execute(provider, service, source string) ([]outputdto.SchemaDTO, error)\n</code></pre> <p>Execute retrieves all schemas by service, source, and provider from the repository.</p> <p>Parameters:</p> <pre><code>service: The service name to filter schemas by.\nsource: The source name to filter schemas by.\nprovider: The provider name to filter schemas by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the schema data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-listallbysourceandproviderschemausecase","title":"type ListAllBySourceAndProviderSchemaUseCase","text":"<p>ListAllBySourceAndProviderSchemaUseCase is the use case for listing all schemas by source.</p> <pre><code>type ListAllBySourceAndProviderSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newlistallbysourceandproviderschemausecase","title":"func NewListAllBySourceAndProviderSchemaUseCase","text":"<pre><code>func NewListAllBySourceAndProviderSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListAllBySourceAndProviderSchemaUseCase\n</code></pre> <p>NewListAllBySourceAndProviderSchemaUseCase initializes a new instance of ListAllBySourceAndProviderSchemaUseCase with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllBySourceAndProviderSchemaUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-listallbysourceandproviderschemausecase-execute","title":"func (*ListAllBySourceAndProviderSchemaUseCase) Execute","text":"<pre><code>func (uc *ListAllBySourceAndProviderSchemaUseCase) Execute(provider, source string) ([]outputdto.SchemaDTO, error)\n</code></pre> <p>Execute retrieves all schemas by source from the repository.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter schemas by.\nsource: The source name to filter schemas by.\n</code></pre> <p>Returns:</p> <pre><code>A slice of output DTOs containing the schema data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-listallschemausecase","title":"type ListAllSchemaUseCase","text":"<p>ListAllSchemaUseCase is the use case for listing all schemas.</p> <pre><code>type ListAllSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newlistallschemausecase","title":"func NewListAllSchemaUseCase","text":"<pre><code>func NewListAllSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListAllSchemaUseCase\n</code></pre> <p>NewListAllSchemaUseCase initializes a new instance of ListAllSchemaUseCase with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListAllSchemaUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-listallschemausecase-execute","title":"func (*ListAllSchemaUseCase) Execute","text":"<pre><code>func (uc *ListAllSchemaUseCase) Execute() ([]outputdto.SchemaDTO, error)\n</code></pre> <p>Execute retrieves all schemas from the repository and converts them to output DTOs.</p> <p>Returns:</p> <pre><code>A slice of output DTOs containing the schema data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-listonebyidschemausecase","title":"type ListOneByIDSchemaUseCase","text":"<p>ListOneByIDSchemaUseCase is the use case for listing a schema by ID.</p> <pre><code>type ListOneByIDSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newlistonebyidschemausecase","title":"func NewListOneByIDSchemaUseCase","text":"<pre><code>func NewListOneByIDSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListOneByIDSchemaUseCase\n</code></pre> <p>NewListOneByIDSchemaUseCase initializes a new instance of ListOneByIDSchemaUseCase with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListOneByIDSchemaUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-listonebyidschemausecase-execute","title":"func (*ListOneByIDSchemaUseCase) Execute","text":"<pre><code>func (uc *ListOneByIDSchemaUseCase) Execute(id string) (outputdto.SchemaDTO, error)\n</code></pre> <p>Execute retrieves a schema by its ID from the repository and converts it to an output DTO.</p> <p>Parameters:</p> <pre><code>id: The ID of the schema to retrieve.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the schema data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-listonebyserviceandsourceandproviderandschematypeschemausecase","title":"type ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase","text":"<p>ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase is the use case for listing a schema by service, source, provider and schema type.</p> <pre><code>type ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newlistonebyserviceandsourceandproviderandschematypeschemausecase","title":"func NewListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase","text":"<pre><code>func NewListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase\n</code></pre> <p>NewListAllBySourceAndProviderSchemaUseCase initializes a new instance of ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-listonebyserviceandsourceandproviderandschematypeschemausecase-execute","title":"func (*ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase) Execute","text":"<pre><code>func (uc *ListOneByServiceAndSourceAndProviderAndSchemaTypeSchemaUseCase) Execute(provider, service, source, schemaType string) (outputdto.SchemaDTO, error)\n</code></pre> <p>Execute retrieves a schema by its provider, service, source and schema type from the repository and converts it to an output DTO.</p> <p>Parameters:</p> <pre><code>provider: The provider name to filter schemas by.\nservice: The service name to filter schemas by.\nsource: The source name to filter schemas by.\nschemaType: The schema type to filter schemas by.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the schema data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-updateschemausecase","title":"type UpdateSchemaUseCase","text":"<p>UpdateSchemaUseCase is the use case for updating an existing schema.</p> <pre><code>type UpdateSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newupdateschemausecase","title":"func NewUpdateSchemaUseCase","text":"<pre><code>func NewUpdateSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *UpdateSchemaUseCase\n</code></pre> <p>NewUpdateSchemaUseCase initializes a new instance of UpdateSchemaUseCase with the provided SchemaRepositoryInterface.</p> <p>Parameters:</p> <pre><code>schemaRepository: The repository interface for managing Schema entities.\n</code></pre> <p>Returns:</p> <pre><code>A pointer to an instance of UpdateSchemaUseCase.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-updateschemausecase-execute","title":"func (*UpdateSchemaUseCase) Execute","text":"<pre><code>func (uc *UpdateSchemaUseCase) Execute(input inputdto.SchemaDTO) (outputdto.SchemaDTO, error)\n</code></pre> <p>Execute updates an existing schema entity based on the provided input DTO and saves it using the repository. It then converts the updated entity to an output DTO and returns it.</p> <p>Parameters:</p> <pre><code>input: The input DTO containing the schema data.\n</code></pre> <p>Returns:</p> <pre><code>An output DTO containing the updated schema data, and an error if any occurred during the process.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#type-validateschemausecase","title":"type ValidateSchemaUseCase","text":"<pre><code>type ValidateSchemaUseCase struct {\n    SchemaRepository entity.SchemaRepositoryInterface\n}\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-newvalidateschemausecase","title":"func NewValidateSchemaUseCase","text":"<pre><code>func NewValidateSchemaUseCase(schemaRepository entity.SchemaRepositoryInterface) *ValidateSchemaUseCase\n</code></pre>"},{"location":"reference/libs/golang/ddd/usecases/schema-vault/docs/godoc/#func-validateschemausecase-execute","title":"func (*ValidateSchemaUseCase) Execute","text":"<pre><code>func (uc *ValidateSchemaUseCase) Execute(dto inputdto.SchemaDataDTO) (outputdto.SchemaValidationDTO, error)\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/server/events/amqp-consumer/","title":"amqp-consumer","text":"<p><code>amqp-consumer</code> is a Go library that provides an AMQP consumer for handling messages from a RabbitMQ queue. This library includes functionalities for creating and managing a consumer, consuming messages, and handling message channels.</p>"},{"location":"reference/libs/golang/server/events/amqp-consumer/#features","title":"Features","text":"<ul> <li>Create and configure an AMQP consumer.</li> <li>Consume messages from a RabbitMQ queue.</li> <li>Handle message channels for processing incoming messages.</li> <li>Gracefully stop the consumer.</li> </ul>"},{"location":"reference/libs/golang/server/events/amqp-consumer/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/server/events/amqp-consumer/#creating-and-configuring-the-amqp-consumer","title":"Creating and Configuring the AMQP Consumer","text":"<p>The <code>NewAmqpConsumer</code> function creates a new <code>AmqpConsumer</code> instance with the specified RabbitMQ client, queue name, consumer name, and routing key.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"libs/golang/clients/resources/go-rabbitmq/client\"\n    \"libs/golang/server/events/amqp-consumer/consumer\"\n)\n\nfunc main() {\n    rabbitMQClient := client.NewClient(\"amqp://guest:guest@localhost:5672/\")\n    amqpConsumer := consumer.NewAmqpConsumer(rabbitMQClient, \"exampleQueue\", \"exampleConsumer\", \"exampleRoutingKey\")\n\n    go amqpConsumer.Consume()\n\n    for msg := range amqpConsumer.GetMsgCh() {\n        log.Printf(\"Processed message: %s\", msg)\n    }\n\n    amqpConsumer.Stop()\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/amqp-consumer/#consuming-messages","title":"Consuming Messages","text":"<p>The <code>Consume</code> method starts consuming messages from the specified queue and processes them.</p> <pre><code>func main() {\n    rabbitMQClient := client.NewClient(\"amqp://guest:guest@localhost:5672/\")\n    amqpConsumer := consumer.NewAmqpConsumer(rabbitMQClient, \"exampleQueue\", \"exampleConsumer\", \"exampleRoutingKey\")\n\n    go amqpConsumer.Consume()\n\n    for msg := range amqpConsumer.GetMsgCh() {\n        log.Printf(\"Processed message: %s\", msg)\n    }\n\n    amqpConsumer.Stop()\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/amqp-consumer/#handling-message-channels","title":"Handling Message Channels","text":"<p>The <code>GetMsgCh</code> method returns a read-only channel where messages are sent for processing.</p> <pre><code>func main() {\n    rabbitMQClient := client.NewClient(\"amqp://guest:guest@localhost:5672/\")\n    amqpConsumer := consumer.NewAmqpConsumer(rabbitMQClient, \"exampleQueue\", \"exampleConsumer\", \"exampleRoutingKey\")\n\n    go amqpConsumer.Consume()\n\n    for msg := range amqpConsumer.GetMsgCh() {\n        log.Printf(\"Processed message: %s\", msg)\n    }\n\n    amqpConsumer.Stop()\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/amqp-consumer/#stopping-the-consumer","title":"Stopping the Consumer","text":"<p>The <code>Stop</code> method stops the consumer by closing the quit channel.</p> <pre><code>func main() {\n    rabbitMQClient := client.NewClient(\"amqp://guest:guest@localhost:5672/\")\n    amqpConsumer := consumer.NewAmqpConsumer(rabbitMQClient, \"exampleQueue\", \"exampleConsumer\", \"exampleRoutingKey\")\n\n    go amqpConsumer.Consume()\n\n    // Simulate processing for a period of time\n    // ...\n\n    amqpConsumer.Stop()\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/amqp-consumer/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/server/events/amqp-consumer/docs/godoc/#consumer","title":"consumer","text":"<pre><code>import \"libs/golang/server/events/amqp-consumer/consumer\"\n</code></pre>"},{"location":"reference/libs/golang/server/events/amqp-consumer/docs/godoc/#index","title":"Index","text":"<ul> <li>type AmqpConsumer</li> <li>func NewAmqpConsumer(rmqClient *queue.Client, queueName, consumerName, routingKey string) *AmqpConsumer</li> <li>func (al *AmqpConsumer) Consume()</li> <li>func (al *AmqpConsumer) GetListenerTag() string</li> <li>func (al *AmqpConsumer) GetMsgCh() \\&lt;-chan []byte</li> <li>func (al *AmqpConsumer) Stop()</li> </ul>"},{"location":"reference/libs/golang/server/events/amqp-consumer/docs/godoc/#type-amqpconsumer","title":"type AmqpConsumer","text":"<p>AmqpConsumer handles consuming messages from a RabbitMQ queue.</p> <pre><code>type AmqpConsumer struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/server/events/amqp-consumer/docs/godoc/#func-newamqpconsumer","title":"func NewAmqpConsumer","text":"<pre><code>func NewAmqpConsumer(rmqClient *queue.Client, queueName, consumerName, routingKey string) *AmqpConsumer\n</code></pre> <p>NewAmqpConsumer creates a new instance of AmqpConsumer.</p> <p>Parameters:</p> <ul> <li>rmqClient: RabbitMQ client.</li> <li>queueName: Name of the queue to consume messages from.</li> <li>consumerName: Name of the consumer.</li> <li>routingKey: Routing key to bind the queue to.</li> </ul> <p>Returns:</p> <ul> <li>A new instance of AmqpConsumer.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/amqp-consumer/docs/godoc/#func-amqpconsumer-consume","title":"func (*AmqpConsumer) Consume","text":"<pre><code>func (al *AmqpConsumer) Consume()\n</code></pre> <p>Consume starts consuming messages from the queue and processes them.</p> <p>It listens for messages and sends them to the msgCh channel. If the quitCh channel receives a signal, the consumption stops.</p> <p></p>"},{"location":"reference/libs/golang/server/events/amqp-consumer/docs/godoc/#func-amqpconsumer-getlistenertag","title":"func (*AmqpConsumer) GetListenerTag","text":"<pre><code>func (al *AmqpConsumer) GetListenerTag() string\n</code></pre> <p>GetListenerTag returns a listener tag that uniquely identifies the consumer.</p> <p>Returns:</p> <ul> <li>A string representing the listener tag.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/amqp-consumer/docs/godoc/#func-amqpconsumer-getmsgch","title":"func (*AmqpConsumer) GetMsgCh","text":"<pre><code>func (al *AmqpConsumer) GetMsgCh() &lt;-chan []byte\n</code></pre> <p>GetMsgCh returns the channel where messages are sent.</p> <p>Returns:</p> <ul> <li>A read-only channel of byte slices containing messages.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/amqp-consumer/docs/godoc/#func-amqpconsumer-stop","title":"func (*AmqpConsumer) Stop","text":"<pre><code>func (al *AmqpConsumer) Stop()\n</code></pre> <p>Stop stops the consumer by closing the quitCh channel.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/server/events/event-server/","title":"event-server","text":"<p><code>event-server</code> is a Go library that provides an event listener server for managing and executing event listeners. This library includes functionalities for creating and managing a server, starting listeners, and handling server shutdown.</p>"},{"location":"reference/libs/golang/server/events/event-server/#features","title":"Features","text":"<ul> <li>Create and configure an event listener server.</li> <li>Start event listeners and manage their execution.</li> <li>Gracefully stop the server and listeners.</li> </ul>"},{"location":"reference/libs/golang/server/events/event-server/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/server/events/event-server/#creating-and-configuring-the-event-listener-server","title":"Creating and Configuring the Event Listener Server","text":"<p>The <code>NewListenerServer</code> function creates a new <code>ListenerServer</code> instance with the specified event listener controller.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    eventListener \"libs/golang/server/events/listener/listener\"\n    \"libs/golang/server/events/event-server/server\"\n)\n\nfunc main() {\n    listenerController := eventListener.NewEventListenerController()\n    listenerServer := server.NewListenerServer(listenerController)\n\n    go listenerServer.Start()\n\n    // Simulate server running for a period of time\n    // ...\n\n    listenerServer.Stop()\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/event-server/#starting-the-listener-server","title":"Starting the Listener Server","text":"<p>The <code>Start</code> method begins the execution of the listener server. It starts all the listeners managed by the controller in separate goroutines.</p> <pre><code>func main() {\n    listenerController := eventListener.NewEventListenerController()\n    listenerServer := server.NewListenerServer(listenerController)\n\n    go listenerServer.Start()\n\n    // Simulate server running for a period of time\n    // ...\n\n    listenerServer.Stop()\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/event-server/#stopping-the-listener-server","title":"Stopping the Listener Server","text":"<p>The <code>Stop</code> method stops the server by sending a signal to the quit channel, which gracefully shuts down the listeners.</p> <pre><code>func main() {\n    listenerController := eventListener.NewEventListenerController()\n    listenerServer := server.NewListenerServer(listenerController)\n\n    go listenerServer.Start()\n\n    // Simulate server running for a period of time\n    // ...\n\n    listenerServer.Stop()\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/event-server/#testing","title":"Testing","text":"<p>To run the tests for the <code>event-server</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-server-events-event-server\n</code></pre>"},{"location":"reference/libs/golang/server/events/event-server/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/server/events/event-server/docs/godoc/#server","title":"server","text":"<pre><code>import \"libs/golang/server/events/event-server/server\"\n</code></pre>"},{"location":"reference/libs/golang/server/events/event-server/docs/godoc/#index","title":"Index","text":"<ul> <li>type ListenerServer</li> <li>func NewListenerServer(controller *eventListener.EventListener) *ListenerServer</li> <li>func (es *ListenerServer) Start()</li> </ul>"},{"location":"reference/libs/golang/server/events/event-server/docs/godoc/#type-listenerserver","title":"type ListenerServer","text":"<p>ListenerServer represents a server that manages event listeners.</p> <pre><code>type ListenerServer struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/server/events/event-server/docs/godoc/#func-newlistenerserver","title":"func NewListenerServer","text":"<pre><code>func NewListenerServer(controller *eventListener.EventListener) *ListenerServer\n</code></pre> <p>NewListenerServer creates a new instance of ListenerServer.</p> <p>Parameters:</p> <ul> <li>controller: The event listener controller.</li> </ul> <p>Returns:</p> <ul> <li>A new instance of ListenerServer.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/event-server/docs/godoc/#func-listenerserver-start","title":"func (*ListenerServer) Start","text":"<pre><code>func (es *ListenerServer) Start()\n</code></pre> <p>Start begins the execution of the listener server.</p> <p>This method starts all the listeners managed by the controller in separate goroutines. It runs a main loop that waits for a signal on the quitCh channel to shut down the server.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/server/events/listener/","title":"listener","text":"<p><code>listener</code> is a Go library that provides an event listener management system. This library includes functionalities for creating and managing event listeners, adding and removing listeners, and starting listeners to process messages.</p>"},{"location":"reference/libs/golang/server/events/listener/#features","title":"Features","text":"<ul> <li>Create and configure event listeners.</li> <li>Add and remove listeners.</li> <li>Start listeners to consume and process messages.</li> <li>Thread-safe management of listeners.</li> </ul>"},{"location":"reference/libs/golang/server/events/listener/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/server/events/listener/#creating-and-configuring-the-event-listener","title":"Creating and Configuring the Event Listener","text":"<p>The <code>NewEventListener</code> function creates a new <code>EventListener</code> instance.</p> <pre><code>package main\n\nimport (\n    \"log\"\n    \"libs/golang/server/events/listener/listener\"\n    usecaseprotocol \"libs/golang/server/events/usecase-impl/protocol\"\n)\n\nfunc main() {\n    eventListener := listener.NewEventListener()\n\n    // Add a listener (pseudo-code, implement your own ConsumerInterface and UseCaseProtocol)\n    consumer := &amp;YourConsumer{}\n    usecaseProtocol := &amp;YourUseCaseProtocol{}\n    err := eventListener.AddListener(consumer, usecaseProtocol)\n    if err != nil {\n        log.Fatalf(\"Failed to add listener: %v\", err)\n    }\n\n    // Start the listener\n    err = eventListener.StartListener(consumer.GetListenerTag())\n    if err != nil {\n        log.Fatalf(\"Failed to start listener: %v\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/listener/#adding-a-listener","title":"Adding a Listener","text":"<p>The <code>AddListener</code> method adds a new listener to the <code>EventListener</code>.</p> <pre><code>func main() {\n    eventListener := listener.NewEventListener()\n\n    // Add a listener (pseudo-code, implement your own ConsumerInterface and UseCaseProtocol)\n    consumer := &amp;YourConsumer{}\n    usecaseProtocol := &amp;YourUseCaseProtocol{}\n    err := eventListener.AddListener(consumer, usecaseProtocol)\n    if err != nil {\n        log.Fatalf(\"Failed to add listener: %v\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/listener/#removing-a-listener","title":"Removing a Listener","text":"<p>The <code>RemoveListener</code> method removes a listener from the <code>EventListener</code>.</p> <pre><code>func main() {\n    eventListener := listener.NewEventListener()\n\n    // Remove a listener by tag\n    err := eventListener.RemoveListener(\"your-listener-tag\")\n    if err != nil {\n        log.Fatalf(\"Failed to remove listener: %v\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/listener/#starting-a-listener","title":"Starting a Listener","text":"<p>The <code>StartListener</code> method starts a listener by its tag.</p> <pre><code>func main() {\n    eventListener := listener.NewEventListener()\n\n    // Start a listener by tag\n    err := eventListener.StartListener(\"your-listener-tag\")\n    if err != nil {\n        log.Fatalf(\"Failed to start listener: %v\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/listener/#testing","title":"Testing","text":"<p>To run the tests for the <code>listener</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-server-events-listener\n</code></pre>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#listener","title":"listener","text":"<pre><code>import \"libs/golang/server/events/listener/listener\"\n</code></pre>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#index","title":"Index","text":"<ul> <li>type ConsumerInterface</li> <li>type EventListener</li> <li>func NewEventListener() *EventListener</li> <li>func (c *EventListener) AddListener(consumer ConsumerInterface, usecaseProtocol usecaseprotocol.UseCaseProtocol) error</li> <li>func (c *EventListener) GetListener(listenerTag string) (*Listener, error)</li> <li>func (c *EventListener) GetListeners() map[string]*Listener</li> <li>func (c *EventListener) RemoveListener(listenerTag string) error</li> <li>func (c *EventListener) StartListener(listenerTag string) error</li> <li>type Listener</li> </ul>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#type-consumerinterface","title":"type ConsumerInterface","text":"<p>ConsumerInterface defines the interface for a consumer.</p> <pre><code>type ConsumerInterface interface {\n    Consume()\n    GetListenerTag() string\n    GetMsgCh() &lt;-chan []byte\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#type-eventlistener","title":"type EventListener","text":"<p>EventListener manages a collection of listeners.</p> <pre><code>type EventListener struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#func-neweventlistener","title":"func NewEventListener","text":"<pre><code>func NewEventListener() *EventListener\n</code></pre> <p>NewEventListener creates a new instance of EventListener.</p> <p>Returns:</p> <ul> <li>A new instance of EventListener.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#func-eventlistener-addlistener","title":"func (*EventListener) AddListener","text":"<pre><code>func (c *EventListener) AddListener(consumer ConsumerInterface, usecaseProtocol usecaseprotocol.UseCaseProtocol) error\n</code></pre> <p>AddListener adds a new listener to the EventListener.</p> <p>Parameters:</p> <ul> <li>consumer: The consumer to be added.</li> <li>usecaseProtocol: The use case protocol associated with the consumer.</li> </ul> <p>Returns:</p> <ul> <li>An error if the listener already exists, otherwise nil.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#func-eventlistener-getlistener","title":"func (*EventListener) GetListener","text":"<pre><code>func (c *EventListener) GetListener(listenerTag string) (*Listener, error)\n</code></pre> <p>GetListener retrieves a listener by its tag.</p> <p>Parameters:</p> <ul> <li>listenerTag: The tag of the listener to be retrieved.</li> </ul> <p>Returns:</p> <ul> <li>The listener if found, otherwise an error.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#func-eventlistener-getlisteners","title":"func (*EventListener) GetListeners","text":"<pre><code>func (c *EventListener) GetListeners() map[string]*Listener\n</code></pre> <p>GetListeners retrieves all listeners.</p> <p>Returns:</p> <ul> <li>A map of all listeners.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#func-eventlistener-removelistener","title":"func (*EventListener) RemoveListener","text":"<pre><code>func (c *EventListener) RemoveListener(listenerTag string) error\n</code></pre> <p>RemoveListener removes a listener from the EventListener.</p> <p>Parameters:</p> <ul> <li>listenerTag: The tag of the listener to be removed.</li> </ul> <p>Returns:</p> <ul> <li>An error if the listener is not found, otherwise nil.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#func-eventlistener-startlistener","title":"func (*EventListener) StartListener","text":"<pre><code>func (c *EventListener) StartListener(listenerTag string) error\n</code></pre> <p>StartListener starts a listener by its tag.</p> <p>Parameters:</p> <ul> <li>listenerTag: The tag of the listener to be started.</li> </ul> <p>Returns:</p> <ul> <li>An error if the listener is not found, otherwise nil.</li> </ul> <p></p>"},{"location":"reference/libs/golang/server/events/listener/docs/godoc/#type-listener","title":"type Listener","text":"<p>Listener represents a consumer and its associated use case protocol.</p> <pre><code>type Listener struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/server/events/usecase-impl/","title":"usecase-impl","text":"<p><code>usecase-impl</code> is a Go library that provides the interface definition for use case protocols. This library is intended to define a standard way for processing message channels within an event-driven architecture.</p>"},{"location":"reference/libs/golang/server/events/usecase-impl/#features","title":"Features","text":"<ul> <li>Define a standard interface for use case protocols.</li> <li>Ensure consistency in processing message channels across different implementations.</li> </ul>"},{"location":"reference/libs/golang/server/events/usecase-impl/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/server/events/usecase-impl/#implementing-the-usecaseprotocol-interface","title":"Implementing the UseCaseProtocol Interface","text":"<p>The <code>UseCaseProtocol</code> interface defines a single method, <code>ProcessMessageChannel</code>, which processes messages from a given channel.</p> <p>To use this library, you need to implement the <code>UseCaseProtocol</code> interface in your own struct.</p>"},{"location":"reference/libs/golang/server/events/usecase-impl/#example-implementation","title":"Example Implementation","text":"<p>Here's an example of how you might implement the <code>UseCaseProtocol</code> interface:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    usecaseprotocol \"libs/golang/server/events/usecase-impl/protocol\"\n)\n\ntype MyUseCase struct{}\n\nfunc (uc *MyUseCase) ProcessMessageChannel(msgCh &lt;-chan []byte, listenerTag string) {\n    for msg := range msgCh {\n        fmt.Printf(\"Processing message from %s: %s\\n\", listenerTag, string(msg))\n        // Add your message processing logic here\n    }\n}\n\nfunc main() {\n    myUseCase := &amp;MyUseCase{}\n\n    // Simulate a message channel\n    msgCh := make(chan []byte)\n    go func() {\n        msgCh &lt;- []byte(\"Hello, world!\")\n        close(msgCh)\n    }()\n\n    myUseCase.ProcessMessageChannel(msgCh, \"example-listener\")\n}\n</code></pre>"},{"location":"reference/libs/golang/server/events/usecase-impl/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/server/events/usecase-impl/docs/godoc/#usecaseprotocol","title":"usecaseprotocol","text":"<pre><code>import \"libs/golang/server/events/usecase-impl/protocol\"\n</code></pre>"},{"location":"reference/libs/golang/server/events/usecase-impl/docs/godoc/#index","title":"Index","text":"<ul> <li>type UseCaseProtocol</li> </ul>"},{"location":"reference/libs/golang/server/events/usecase-impl/docs/godoc/#type-usecaseprotocol","title":"type UseCaseProtocol","text":"<p>UseCaseProtocol defines the interface for a use case protocol.</p> <pre><code>type UseCaseProtocol interface {\n    ProcessMessageChannel(msgCh &lt;-chan []byte, listenerTag string)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/server/http/chi-webserver/","title":"webserver","text":"<p><code>webserver</code> is a Go library that provides a simple and flexible HTTP server using the <code>chi</code> router. This library allows you to create and configure an HTTP server with default middlewares, register routes, and manage route groups efficiently.</p>"},{"location":"reference/libs/golang/server/http/chi-webserver/#features","title":"Features","text":"<ul> <li>Create and configure an HTTP server with default middlewares.</li> <li>Register individual routes with different HTTP methods.</li> <li>Group routes under common prefixes.</li> <li>Easy-to-use interface for starting the server.</li> </ul>"},{"location":"reference/libs/golang/server/http/chi-webserver/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/server/http/chi-webserver/#creating-and-configuring-the-web-server","title":"Creating and Configuring the Web Server","text":"<p>The <code>NewWebServer</code> function creates a new <code>Server</code> instance with the specified address.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"libs/golang/server/http/chi-webserver/server\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"Hello, world!\")\n}\n\nfunc main() {\n    server := webserver.NewWebServer(\":8080\")\n    server.ConfigureDefaults()\n    server.RegisterRoute(\"GET\", \"/hello\", helloHandler)\n\n    if err := server.Start(); err != nil {\n        fmt.Println(\"Error starting server:\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/server/http/chi-webserver/#adding-default-middlewares","title":"Adding Default Middlewares","text":"<p>The <code>ConfigureDefaults</code> method sets up default middlewares for the server, including request ID, real IP, logger, recoverer, and a timeout of 60 seconds.</p> <pre><code>func main() {\n    server := webserver.NewWebServer(\":8080\")\n    server.ConfigureDefaults()\n    // Other configuration and route registration\n}\n</code></pre>"},{"location":"reference/libs/golang/server/http/chi-webserver/#registering-routes","title":"Registering Routes","text":"<p>The <code>RegisterRoute</code> method adds a new route with the specified HTTP method, URL pattern, and handler function.</p> <pre><code>func main() {\n    server := webserver.NewWebServer(\":8080\")\n    server.ConfigureDefaults()\n\n    server.RegisterRoute(\"GET\", \"/hello\", helloHandler)\n    server.RegisterRoute(\"POST\", \"/submit\", submitHandler)\n\n    if err := server.Start(); err != nil {\n        fmt.Println(\"Error starting server:\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/server/http/chi-webserver/#grouping-routes","title":"Grouping Routes","text":"<p>The <code>RegisterRouteGroup</code> method allows you to group routes under a common prefix.</p> <pre><code>func main() {\n    server := webserver.NewWebServer(\":8080\")\n    server.ConfigureDefaults()\n\n    server.RegisterRouteGroup(\"/api\", func(r chi.Router) {\n        r.Get(\"/hello\", helloHandler)\n        r.Post(\"/submit\", submitHandler)\n    })\n\n    if err := server.Start(); err != nil {\n        fmt.Println(\"Error starting server:\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/server/http/chi-webserver/#starting-the-server","title":"Starting the Server","text":"<p>The <code>Start</code> method runs the web server on the specified address.</p> <pre><code>func main() {\n    server := webserver.NewWebServer(\":8080\")\n    server.ConfigureDefaults()\n\n    server.RegisterRoute(\"GET\", \"/hello\", helloHandler)\n\n    if err := server.Start(); err != nil {\n        fmt.Println(\"Error starting server:\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/server/http/chi-webserver/#api","title":"API","text":""},{"location":"reference/libs/golang/server/http/chi-webserver/#server","title":"Server","text":""},{"location":"reference/libs/golang/server/http/chi-webserver/#newwebserveraddr-string-server","title":"<code>NewWebServer(addr string) *Server</code>","text":"<p>Creates and returns a new <code>Server</code> instance with the specified address.</p>"},{"location":"reference/libs/golang/server/http/chi-webserver/#configuredefaults","title":"<code>ConfigureDefaults()</code>","text":"<p>Sets up default middlewares for the server, including request ID, real IP, logger, recoverer, and a timeout of 60 seconds.</p>"},{"location":"reference/libs/golang/server/http/chi-webserver/#registermiddlewaresmiddlewares-funchttphandler-httphandler","title":"<code>RegisterMiddlewares(middlewares ...func(http.Handler) http.Handler)</code>","text":"<p>Adds multiple middlewares to the server.</p>"},{"location":"reference/libs/golang/server/http/chi-webserver/#registerroutemethod-pattern-string-handler-httphandlerfunc-group-string","title":"<code>RegisterRoute(method, pattern string, handler http.HandlerFunc, group ...string)</code>","text":"<p>Adds a new route with an HTTP method, pattern, and handler function. Optionally, a group name can be specified.</p>"},{"location":"reference/libs/golang/server/http/chi-webserver/#registerroutegroupprefix-string-routes-funcr-chirouter","title":"<code>RegisterRouteGroup(prefix string, routes func(r chi.Router))</code>","text":"<p>Registers a group of routes under a common prefix.</p>"},{"location":"reference/libs/golang/server/http/chi-webserver/#start-error","title":"<code>Start() error</code>","text":"<p>Runs the web server on the specified address.</p>"},{"location":"reference/libs/golang/server/http/chi-webserver/#example","title":"Example","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"libs/golang/server/http/chi-webserver/server\"\n)\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintln(w, \"Hello, world!\")\n}\n\nfunc main() {\n    server := webserver.NewWebServer(\":8080\")\n    server.ConfigureDefaults()\n\n    server.RegisterRoute(\"GET\", \"/hello\", helloHandler)\n\n    if err := server.Start(); err != nil {\n        fmt.Println(\"Error starting server:\", err)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/server/http/chi-webserver/#testing","title":"Testing","text":"<p>To run the tests for the <code>webserver</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-server-http-chi-webserver\n</code></pre>"},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/#webserver","title":"webserver","text":"<pre><code>import \"libs/golang/server/http/chi-webserver/server\"\n</code></pre>"},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/#index","title":"Index","text":"<ul> <li>type Server</li> <li>func NewWebServer(addr string) *Server</li> <li>func (s *Server) ConfigureDefaults()</li> <li>func (s *Server) RegisterMiddlewares(middlewares ...func(http.Handler) http.Handler)</li> <li>func (s *Server) RegisterRoute(method, pattern string, handler http.HandlerFunc, group ...string)</li> <li>func (s *Server) RegisterRouteGroup(prefix string, routes func(r chi.Router))</li> <li>func (s *Server) Start() error</li> </ul>"},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/#type-server","title":"type Server","text":"<p>Server represents an HTTP server with a router and address.</p> <pre><code>type Server struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/#func-newwebserver","title":"func NewWebServer","text":"<pre><code>func NewWebServer(addr string) *Server\n</code></pre> <p>NewWebServer creates and returns a new Server instance with the specified address.</p> <p>Parameters:</p> <pre><code>addr: The address to run the server on.\n</code></pre> <p>Returns:</p> <pre><code>A new Server instance.\n</code></pre> <p></p>"},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/#func-server-configuredefaults","title":"func (*Server) ConfigureDefaults","text":"<pre><code>func (s *Server) ConfigureDefaults()\n</code></pre> <p>ConfigureDefaults sets up the default middleware for the server, including request ID, real IP, logger, recoverer, and a timeout of 60 seconds.</p> <p></p>"},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/#func-server-registermiddlewares","title":"func (*Server) RegisterMiddlewares","text":"<pre><code>func (s *Server) RegisterMiddlewares(middlewares ...func(http.Handler) http.Handler)\n</code></pre> <p>RegisterMiddlewares adds multiple middlewares to the server.</p> <p>Parameters:</p> <pre><code>middlewares: A list of middleware functions to add to the server.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>Example:</p> <pre><code>server.RegisterMiddlewares(middleware1, middleware2, middleware3)\n</code></pre> <p>This will add middleware1, middleware2, and middleware3 to the server.</p> <p></p>"},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/#func-server-registerroute","title":"func (*Server) RegisterRoute","text":"<pre><code>func (s *Server) RegisterRoute(method, pattern string, handler http.HandlerFunc, group ...string)\n</code></pre> <p>RegisterRoute adds a new route with an HTTP method, pattern, and handler function. If a group is specified, the route is added to that group.</p> <p>Parameters:</p> <pre><code>method: The HTTP method for the route.\npattern: The URL pattern for the route.\nhandler: The handler function for the route.\ngroup: An optional group name to add the route to.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>Example:</p> <pre><code>server.RegisterRoute(\"GET\", \"/hello\", helloHandler)\n</code></pre> <p>This will add a new route to the server that listens for GET requests on the /hello URL pattern and calls the helloHandler function.</p> <p></p>"},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/#func-server-registerroutegroup","title":"func (*Server) RegisterRouteGroup","text":"<pre><code>func (s *Server) RegisterRouteGroup(prefix string, routes func(r chi.Router))\n</code></pre> <p>RegisterRouteGroup registers a group of routes under a common prefix.</p> <p>Parameters:</p> <pre><code>prefix: The common prefix for the group of routes.\nroutes: A function that defines the routes for the group.\n</code></pre> <p>Returns:</p> <pre><code>None.\n</code></pre> <p>Example:</p> <pre><code>server.RegisterRouteGroup(\"/api\", func(r chi.Router) {\n    r.Get(\"/hello\", helloHandler)\n    r.Post(\"/world\", worldHandler)\n})\n</code></pre> <p>This will add a group of routes under the /api prefix with two routes: /hello and /world.</p> <p></p>"},{"location":"reference/libs/golang/server/http/chi-webserver/docs/godoc/#func-server-start","title":"func (*Server) Start","text":"<pre><code>func (s *Server) Start() error\n</code></pre> <p>Start runs the web server on the specified address.</p> <p>Parameters:</p> <pre><code>None.\n</code></pre> <p>Returns:</p> <pre><code>An error if the server fails to start.\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/service-discovery/","title":"service-discovery","text":"<p><code>service-discovery</code> is a Go library that facilitates the registration and retrieval of various service resources. It follows the singleton pattern and provides methods for registering and accessing resources like MongoDB, Minio, and RabbitMQ.</p>"},{"location":"reference/libs/golang/service-discovery/#features","title":"Features","text":"<ul> <li>Register and initialize resources such as MongoDB, Minio, and RabbitMQ.</li> <li>Retrieve registered resources by key.</li> <li>Singleton instance ensuring a single point of resource management.</li> </ul>"},{"location":"reference/libs/golang/service-discovery/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/service-discovery/#initializing-service-discovery","title":"Initializing Service Discovery","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/service-discovery/sd\"\n)\n\nfunc main() {\n    serviceDiscovery := servicediscovery.NewServiceDiscovery()\n    fmt.Println(\"Service Discovery initialized\")\n}\n</code></pre>"},{"location":"reference/libs/golang/service-discovery/#registering-a-resource","title":"Registering a Resource","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/service-discovery/sd\"\n    resourceImpl \"libs/golang/wrappers/core/resource-contract\"\n)\n\ntype MockResource struct{}\n\nfunc (m *MockResource) Init() error {\n    // Initialize the resource\n    return nil\n}\n\nfunc (m *MockResource) GetClient() interface{} {\n    // Return the resource client\n    return nil\n}\n\nfunc main() {\n    serviceDiscovery := servicediscovery.NewServiceDiscovery()\n\n    mockResource := &amp;MockResource{}\n    serviceDiscovery.RegisterResource(\"mock\", mockResource)\n\n    fmt.Println(\"Mock resource registered\")\n}\n</code></pre>"},{"location":"reference/libs/golang/service-discovery/#retrieving-a-registered-resource","title":"Retrieving a Registered Resource","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/service-discovery/sd\"\n)\n\nfunc main() {\n    serviceDiscovery := servicediscovery.NewServiceDiscovery()\n\n    resource, err := serviceDiscovery.GetResource(\"mock\")\n    if err != nil {\n        fmt.Println(\"Error retrieving resource:\", err)\n        return\n    }\n\n    fmt.Println(\"Resource retrieved:\", resource)\n}\n</code></pre>"},{"location":"reference/libs/golang/service-discovery/#testing","title":"Testing","text":"<p>To run the tests for the <code>servicediscovery</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-service-discovery\n</code></pre>"},{"location":"reference/libs/golang/service-discovery/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/service-discovery/docs/godoc/#servicediscovery","title":"servicediscovery","text":"<pre><code>import \"libs/golang/service-discovery/sd\"\n</code></pre>"},{"location":"reference/libs/golang/service-discovery/docs/godoc/#index","title":"Index","text":"<ul> <li>func SetResourceInitializer(initializer func(resourceImpl.Resource))</li> <li>type ServiceDiscovery</li> <li>func NewServiceDiscovery() *ServiceDiscovery</li> <li>func (s *ServiceDiscovery) GetResource(key string) (resourceImpl.Resource, error)</li> <li>func (s *ServiceDiscovery) InitResourceWrapper(wrapper resourceImpl.Resource)</li> <li>func (s *ServiceDiscovery) RegisterResource(key string, resource resourceImpl.Resource)</li> </ul>"},{"location":"reference/libs/golang/service-discovery/docs/godoc/#func-setresourceinitializer","title":"func SetResourceInitializer","text":"<pre><code>func SetResourceInitializer(initializer func(resourceImpl.Resource))\n</code></pre> <p>SetResourceInitializer sets the resource initializer function, typically used for testing.</p> <p></p>"},{"location":"reference/libs/golang/service-discovery/docs/godoc/#type-servicediscovery","title":"type ServiceDiscovery","text":"<p>ServiceDiscovery holds the service discovery logic, managing resource mappings and services.</p> <pre><code>type ServiceDiscovery struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/service-discovery/docs/godoc/#func-newservicediscovery","title":"func NewServiceDiscovery","text":"<pre><code>func NewServiceDiscovery() *ServiceDiscovery\n</code></pre> <p>NewServiceDiscovery creates and returns a singleton instance of ServiceDiscovery.</p> <p></p>"},{"location":"reference/libs/golang/service-discovery/docs/godoc/#func-servicediscovery-getresource","title":"func (*ServiceDiscovery) GetResource","text":"<pre><code>func (s *ServiceDiscovery) GetResource(key string) (resourceImpl.Resource, error)\n</code></pre> <p>GetResource retrieves a resource by key from the resource mapping.</p> <p></p>"},{"location":"reference/libs/golang/service-discovery/docs/godoc/#func-servicediscovery-initresourcewrapper","title":"func (*ServiceDiscovery) InitResourceWrapper","text":"<pre><code>func (s *ServiceDiscovery) InitResourceWrapper(wrapper resourceImpl.Resource)\n</code></pre> <p>InitResourceWrapper initializes the given resource wrapper using the configured initializer.</p> <p></p>"},{"location":"reference/libs/golang/service-discovery/docs/godoc/#func-servicediscovery-registerresource","title":"func (*ServiceDiscovery) RegisterResource","text":"<pre><code>func (s *ServiceDiscovery) RegisterResource(key string, resource resourceImpl.Resource)\n</code></pre> <p>RegisterResource registers a resource with the given key.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/shared/go-events/","title":"go-events","text":"<p>The <code>go-events</code> library is a Go package designed for managing and dispatching events using the AMQP protocol. It provides a mechanism to register event handlers, dispatch events, and ensure concurrent execution of handlers through goroutines and sync.WaitGroup.</p>"},{"location":"reference/libs/golang/shared/go-events/#features","title":"Features","text":"<ul> <li>Register event handlers for specific events.</li> <li>Dispatch events to registered handlers concurrently.</li> <li>Manage event handlers (add, check, remove).</li> <li>Clear all registered handlers.</li> </ul>"},{"location":"reference/libs/golang/shared/go-events/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/shared/go-events/#create-event-dispatcher","title":"Create Event Dispatcher","text":"<p>The <code>NewEventDispatcher</code> function creates a new instance of <code>EventDispatcher</code>.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    events \"libs/golang/shared/go-events/amqp_events\"\n)\n\nfunc main() {\n    dispatcher := events.NewEventDispatcher()\n    fmt.Println(\"Event Dispatcher created:\", dispatcher)\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/#register-event-handler","title":"Register Event Handler","text":"<p>The <code>Register</code> method adds a new handler for a specific event name. It returns an error if the handler is already registered for the event.</p> <pre><code>err := dispatcher.Register(\"event.name\", handler)\nif err != nil {\n    fmt.Println(\"Error registering handler:\", err)\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/#dispatch-event","title":"Dispatch Event","text":"<p>The <code>Dispatch</code> method sends an event to all registered handlers for the event's name. It uses goroutines and a <code>sync.WaitGroup</code> to handle concurrent execution of handlers.</p> <pre><code>err := dispatcher.Dispatch(event, \"exchangeName\", \"routingKey\")\nif err != nil {\n    fmt.Println(\"Error dispatching event:\", err)\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/#check-handler-registration","title":"Check Handler Registration","text":"<p>The <code>Has</code> method checks if a specific handler is registered for an event name.</p> <pre><code>if dispatcher.Has(\"event.name\", handler) {\n    fmt.Println(\"Handler is registered\")\n} else {\n    fmt.Println(\"Handler is not registered\")\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/#remove-event-handler","title":"Remove Event Handler","text":"<p>The <code>Remove</code> method deletes a handler for a specific event name. It returns nil if the handler is successfully removed or if the handler was not found.</p> <pre><code>err := dispatcher.Remove(\"event.name\", handler)\nif err != nil {\n    fmt.Println(\"Error removing handler:\", err)\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/#clear-all-handlers","title":"Clear All Handlers","text":"<p>The <code>Clear</code> method removes all registered handlers.</p> <pre><code>dispatcher.Clear()\nfmt.Println(\"All handlers cleared\")\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/#interfaces","title":"Interfaces","text":""},{"location":"reference/libs/golang/shared/go-events/#eventinterface","title":"EventInterface","text":"<p>Defines the methods that an event should implement.</p> <pre><code>type EventInterface interface {\n    GetName() string\n    GetDateTime() time.Time\n    GetPayload() interface{}\n    SetPayload(payload interface{})\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/#eventhandlerinterface","title":"EventHandlerInterface","text":"<p>Defines the method that an event handler should implement.</p> <pre><code>type EventHandlerInterface interface {\n    Handle(event EventInterface, wg *sync.WaitGroup, exchangeName string, routingKey string)\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/#eventdispatcherinterface","title":"EventDispatcherInterface","text":"<p>Defines the methods that an event dispatcher should implement.</p> <pre><code>type EventDispatcherInterface interface {\n    Register(eventName string, handler EventHandlerInterface) error\n    Dispatch(event EventInterface, exchangeName string, routingKey string) error\n    Remove(eventName string, handler EventHandlerInterface) error\n    Has(eventName string, handler EventHandlerInterface) bool\n    Clear()\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/#testing","title":"Testing","text":"<p>To run the tests for the <code>go-events</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-shared-go-events\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#amqpevents","title":"amqpevents","text":"<pre><code>import \"libs/golang/shared/go-events/amqp_events\"\n</code></pre>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#index","title":"Index","text":"<ul> <li>Variables</li> <li>type EventDispatcher</li> <li>func NewEventDispatcher() *EventDispatcher</li> <li>func (ed *EventDispatcher) Clear()</li> <li>func (ev *EventDispatcher) Dispatch(event EventInterface, routingKey string) error</li> <li>func (ed *EventDispatcher) Has(eventName string, handler EventHandlerInterface) bool</li> <li>func (ed *EventDispatcher) Register(eventName string, handler EventHandlerInterface) error</li> <li>func (ed *EventDispatcher) Remove(eventName string, handler EventHandlerInterface) error</li> <li>type EventDispatcherInterface</li> <li>type EventHandlerInterface</li> <li>type EventInterface</li> <li>type EventListenerInterface</li> </ul>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#variables","title":"Variables","text":"<p>ErrHandlerAlreadyRegistered is returned when an event handler is already registered for a specific event.</p> <pre><code>var ErrHandlerAlreadyRegistered = errors.New(\"handler already registered\")\n</code></pre> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#type-eventdispatcher","title":"type EventDispatcher","text":"<p>EventDispatcher is responsible for managing event handlers and dispatching events to them.</p> <pre><code>type EventDispatcher struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#func-neweventdispatcher","title":"func NewEventDispatcher","text":"<pre><code>func NewEventDispatcher() *EventDispatcher\n</code></pre> <p>NewEventDispatcher creates a new instance of EventDispatcher.</p> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#func-eventdispatcher-clear","title":"func (*EventDispatcher) Clear","text":"<pre><code>func (ed *EventDispatcher) Clear()\n</code></pre> <p>Clear removes all registered handlers.</p> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#func-eventdispatcher-dispatch","title":"func (*EventDispatcher) Dispatch","text":"<pre><code>func (ev *EventDispatcher) Dispatch(event EventInterface, routingKey string) error\n</code></pre> <p>Dispatch sends an event to all registered handlers for the event's name. It uses goroutines and a WaitGroup to handle concurrent execution of handlers. routingKey are used for routing the event in the AMQP system.</p> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#func-eventdispatcher-has","title":"func (*EventDispatcher) Has","text":"<pre><code>func (ed *EventDispatcher) Has(eventName string, handler EventHandlerInterface) bool\n</code></pre> <p>Has checks if a specific handler is registered for an event name.</p> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#func-eventdispatcher-register","title":"func (*EventDispatcher) Register","text":"<pre><code>func (ed *EventDispatcher) Register(eventName string, handler EventHandlerInterface) error\n</code></pre> <p>Register adds a new handler for a specific event name. It returns an error if the handler is already registered for the event.</p> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#func-eventdispatcher-remove","title":"func (*EventDispatcher) Remove","text":"<pre><code>func (ed *EventDispatcher) Remove(eventName string, handler EventHandlerInterface) error\n</code></pre> <p>Remove deletes a handler for a specific event name. It returns nil if the handler is successfully removed or if the handler was not found.</p> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#type-eventdispatcherinterface","title":"type EventDispatcherInterface","text":"<p>EventDispatcherInterface defines the methods that an event dispatcher should implement.</p> <pre><code>type EventDispatcherInterface interface {\n    Register(eventName string, handler EventHandlerInterface) error\n    Dispatch(event EventInterface, routingKey string) error\n    Remove(eventName string, handler EventHandlerInterface) error\n    Has(eventName string, handler EventHandlerInterface) bool\n    Clear()\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#type-eventhandlerinterface","title":"type EventHandlerInterface","text":"<p>EventHandlerInterface defines the method that an event handler should implement.</p> <pre><code>type EventHandlerInterface interface {\n    Handle(event EventInterface, wg *sync.WaitGroup, routingKey string)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#type-eventinterface","title":"type EventInterface","text":"<p>EventInterface defines the methods that an event should implement.</p> <pre><code>type EventInterface interface {\n    GetName() string\n    GetDateTime() time.Time\n    GetPayload() interface{}\n    SetPayload(payload interface{})\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/shared/go-events/docs/godoc/#type-eventlistenerinterface","title":"type EventListenerInterface","text":"<p>EventListenerInterface defines the method that an event listener should implement.</p> <pre><code>type EventListenerInterface interface {\n    Handle(event EventInterface, wg *sync.WaitGroup)\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/shared/go-request/","title":"requests","text":"<p>The <code>go-request</code> is a Go library designed to simplify the creation, handling, and sending of HTTP requests. This library provides functions to build URLs, set headers, marshal request bodies, and send requests with a specified timeout.</p>"},{"location":"reference/libs/golang/shared/go-request/#features","title":"Features","text":"<ul> <li>Parse and validate base URLs.</li> <li>Construct full URLs with path and query parameters.</li> <li>Marshal request bodies into JSON, XML, or URL-encoded forms.</li> <li>Set request headers.</li> <li>Create and send HTTP requests with context and timeout.</li> </ul>"},{"location":"reference/libs/golang/shared/go-request/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/shared/go-request/#parse-base-url","title":"Parse Base URL","text":"<p>The <code>parseBaseURL</code> function parses a base URL string and returns a parsed <code>*url.URL</code> or an error if the URL is invalid.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/go-request/requests\"\n)\n\nfunc main() {\n    baseURL := \"https://example.com\"\n    parsedURL, err := requests.parseBaseURL(baseURL)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    } else {\n        fmt.Println(\"Parsed URL:\", parsedURL)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-request/#build-url","title":"Build URL","text":"<p>The <code>buildURL</code> function constructs a full URL with the given base URL, path parameters, and query parameters.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/go-request/requests\"\n)\n\nfunc main() {\n    baseURL := \"https://example.com\"\n    pathParams := []string{\"api\", \"v1\", \"resource\"}\n    queryParams := map[string]string{\"query1\": \"value1\", \"query2\": \"value2\"}\n    fullURL, err := requests.buildURL(baseURL, pathParams, queryParams)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    } else {\n        fmt.Println(\"Full URL:\", fullURL)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-request/#create-and-send-request","title":"Create and Send Request","text":"<p>The <code>CreateRequest</code> function creates an HTTP request with the specified parameters, and the <code>SendRequest</code> function sends the request using the provided client, handling the response within the specified timeout.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n    \"libs/golang/shared/go-request/requests\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    baseURL := \"https://example.com\"\n    pathParams := []string{\"api\", \"v1\", \"resource\"}\n    queryParams := map[string]string{\"query1\": \"value1\", \"query2\": \"value2\"}\n    body := map[string]string{\"key\": \"value\"}\n    headers := map[string]string{\"Content-Type\": \"application/json\"}\n    method := http.MethodGet\n\n    req, err := requests.CreateRequest(ctx, baseURL, pathParams, queryParams, body, headers, method)\n    if err != nil {\n        fmt.Println(\"Error creating request:\", err)\n        return\n    }\n\n    client := &amp;http.Client{}\n    var result map[string]interface{}\n    timeout := 5 * time.Second\n\n    err = requests.SendRequest(ctx, req, client, &amp;result, timeout)\n    if err != nil {\n        fmt.Println(\"Error sending request:\", err)\n    } else {\n        fmt.Println(\"Response:\", result)\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/go-request/#testing","title":"Testing","text":"<p>To run the tests for the <code>requests</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-shared-go-request\n</code></pre>"},{"location":"reference/libs/golang/shared/go-request/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/shared/go-request/docs/godoc/#requests","title":"requests","text":"<pre><code>import \"libs/golang/shared/go-request/requests\"\n</code></pre>"},{"location":"reference/libs/golang/shared/go-request/docs/godoc/#index","title":"Index","text":"<ul> <li>Variables</li> <li>func CreateRequest(ctx context.Context, baseUrl string, pathParams []string, queryParams map[string]string, body interface{}, headers map[string]string, method string) (*http.Request, error)</li> <li>func SendRequest(ctx context.Context, req *http.Request, client *http.Client, result interface{}, timeout time.Duration) error</li> </ul>"},{"location":"reference/libs/golang/shared/go-request/docs/godoc/#variables","title":"Variables","text":"<pre><code>var (\n    DefaultHTTPClient = &amp;http.Client{\n        Timeout: 10 * time.Second,\n    }\n)\n</code></pre>"},{"location":"reference/libs/golang/shared/go-request/docs/godoc/#func-createrequest","title":"func CreateRequest","text":"<pre><code>func CreateRequest(ctx context.Context, baseUrl string, pathParams []string, queryParams map[string]string, body interface{}, headers map[string]string, method string) (*http.Request, error)\n</code></pre> <p>CreateRequest creates an HTTP request with the given parameters. It builds the URL, marshals the body, and sets the headers. Returns the constructed *http.Request or an error.</p> <p>Parameters:</p> <ul> <li>ctx: The context for the request.</li> <li>baseUrl: The base URL for the request.</li> <li>pathParams: A slice of path parameters to append to the URL path.</li> <li>queryParams: A map of query parameters to add to the URL.</li> <li>body: The body of the request.</li> <li>headers: A map of headers to set on the request.</li> <li>method: The HTTP method to use for the request.</li> </ul> <p>Returns:</p> <ul> <li>*http.Request: The constructed HTTP request.</li> <li>error: An error if the request cannot be created.</li> </ul> <p>Example:</p> <pre><code>req, err := CreateRequest(context.Background(), \"https://dummie.com\", []string{\"param1\", \"param2\"}, nil, nil, nil, http.MethodGet)\n</code></pre> <p></p>"},{"location":"reference/libs/golang/shared/go-request/docs/godoc/#func-sendrequest","title":"func SendRequest","text":"<pre><code>func SendRequest(ctx context.Context, req *http.Request, client *http.Client, result interface{}, timeout time.Duration) error\n</code></pre> <p>SendRequest sends the given HTTP request using the provided client. It waits for the response or times out after the specified duration. The response body is decoded into the result parameter. Returns an error if the request fails, times out, or the response status is not 2xx.</p> <p>Parameters:</p> <ul> <li>ctx: The context for the request.</li> <li>req: The HTTP request to send.</li> <li>client: The HTTP client to use for the request.</li> <li>result: The result to decode the response body into.</li> <li>timeout: The duration to wait for the request to complete.</li> </ul> <p>Returns:</p> <ul> <li>error: An error if the request fails, times out, or the response status is not 2xx.</li> </ul> <p>Example:</p> <pre><code>err := SendRequest(context.Background(), req, client, result, time.Second)\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/shared/id/go-md5/","title":"go-md5","text":"<p><code>go-md5</code> is a Go library that provides utilities for generating MD5-based IDs from various data types. This library leverages the <code>type-tools</code> library to convert different types of data into a string representation before generating the MD5 hash.</p>"},{"location":"reference/libs/golang/shared/id/go-md5/#features","title":"Features","text":"<ul> <li>Generate MD5-based IDs from various data types including:</li> <li><code>string</code></li> <li><code>float64</code></li> <li><code>int</code> and other integer types</li> <li><code>bool</code></li> <li><code>map[string]interface{}</code></li> <li><code>map[string]string</code></li> </ul>"},{"location":"reference/libs/golang/shared/id/go-md5/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/shared/id/go-md5/#generating-an-id-from-a-string","title":"Generating an ID from a String","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/id/go-md5\"\n)\n\nfunc main() {\n    id := md5id.NewID(\"test\")\n    fmt.Println(id) // Output: 098f6bcd4621d373cade4e832627b4f6\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-md5/#generating-an-id-from-a-float64","title":"Generating an ID from a Float64","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/id/go-md5\"\n)\n\nfunc main() {\n    id := md5id.NewID(123.456)\n    fmt.Println(id) // Output: f6e809317508ea1fdcb5e6d878e166ef\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-md5/#generating-an-id-from-a-map","title":"Generating an ID from a Map","text":""},{"location":"reference/libs/golang/shared/id/go-md5/#map-of-string-to-interface","title":"Map of String to Interface","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/id/go-md5\"\n)\n\nfunc main() {\n    data := map[string]interface{}{\n        \"foo\": \"bar\",\n        \"baz\": 123,\n    }\n    id := md5id.NewID(data)\n    fmt.Println(id) // Output: 7cc94a32929de9da271e6f19ef1392d7\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-md5/#map-of-string-to-string","title":"Map of String to String","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/id/go-md5\"\n)\n\nfunc main() {\n    data := map[string]string{\n        \"foo\": \"bar\",\n        \"baz\": \"qux\",\n    }\n    id := md5id.NewID(data)\n    fmt.Println(id) // Output: 491ebd8bf73d6a9b2fabf44575e98fbe\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-md5/#generating-an-id-from-an-integer","title":"Generating an ID from an Integer","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/id/go-md5\"\n)\n\nfunc main() {\n    id := md5id.NewID(123)\n    fmt.Println(id) // Output: 202cb962ac59075b964b07152d234b70\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-md5/#generating-an-id-from-a-boolean","title":"Generating an ID from a Boolean","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/id/go-md5\"\n)\n\nfunc main() {\n    id := md5id.NewID(true)\n    fmt.Println(id) // Output: b326b5062b2f0e69046810717534cb09\n\n    id = md5id.NewID(false)\n    fmt.Println(id) // Output: 68934a3e9455fa72420237eb05902327\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-md5/#testing","title":"Testing","text":"<p>To run the tests for the <code>md5id</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-shared-id-go-md5\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-md5/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/shared/id/go-md5/docs/godoc/#md5id","title":"md5id","text":"<pre><code>import \"libs/golang/shared/id/go-md5\"\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-md5/docs/godoc/#index","title":"Index","text":"<ul> <li>type ID</li> <li>func NewID(data interface{}) ID</li> </ul>"},{"location":"reference/libs/golang/shared/id/go-md5/docs/godoc/#type-id","title":"type ID","text":"<p>ID type definition</p> <pre><code>type ID string\n</code></pre> <p></p>"},{"location":"reference/libs/golang/shared/id/go-md5/docs/godoc/#func-newid","title":"func NewID","text":"<pre><code>func NewID(data interface{}) ID\n</code></pre> <p>NewID generates an ID from various types of data</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/shared/id/go-uuid/","title":"go-uuid","text":"<p><code>go-uuid</code> is a Go library that provides utilities for generating UUIDs from various data types. It includes functions for calculating SHA-256 hashes and generating UUIDs based on those hashes.</p>"},{"location":"reference/libs/golang/shared/id/go-uuid/#features","title":"Features","text":"<ul> <li>Generate UUIDs from various data types including:</li> <li><code>map[string]interface{}</code></li> <li>Other data types using serialization to <code>[]byte</code></li> <li>Calculate SHA-256 hashes of data</li> </ul>"},{"location":"reference/libs/golang/shared/id/go-uuid/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/shared/id/go-uuid/#generating-a-uuid-from-a-map","title":"Generating a UUID from a Map","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/id/go-uuid\"\n)\n\nfunc main() {\n    data := map[string]interface{}{\n        \"key1\": \"value1\",\n        \"key2\": 123,\n    }\n    id, err := gouuid.GenerateUUIDFromMap(data)\n    if err != nil {\n        fmt.Println(\"Error generating UUID:\", err)\n        return\n    }\n    fmt.Println(\"Generated UUID:\", id)\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-uuid/#generating-a-uuid-from-other-data-types","title":"Generating a UUID from Other Data Types","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/id/go-uuid\"\n)\n\nfunc main() {\n    data := \"test\"\n    id, err := gouuid.GenerateUUID([]byte(data))\n    if err != nil {\n        fmt.Println(\"Error generating UUID:\", err)\n        return\n    }\n    fmt.Println(\"Generated UUID:\", id)\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-uuid/#testing","title":"Testing","text":"<p>To run the tests for the <code>gouuid</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-shared-id-go-uuid\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-uuid/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/shared/id/go-uuid/docs/godoc/#gouuid","title":"gouuid","text":"<pre><code>import \"libs/golang/shared/id/go-uuid\"\n</code></pre>"},{"location":"reference/libs/golang/shared/id/go-uuid/docs/godoc/#index","title":"Index","text":"<ul> <li>type ID</li> <li>func GenerateUUIDFromMap(data map[string]interface{}) (ID, error)</li> </ul>"},{"location":"reference/libs/golang/shared/id/go-uuid/docs/godoc/#type-id","title":"type ID","text":"<p>ID represents a unique identifier.</p> <pre><code>type ID = string\n</code></pre> <p></p>"},{"location":"reference/libs/golang/shared/id/go-uuid/docs/godoc/#func-generateuuidfrommap","title":"func GenerateUUIDFromMap","text":"<pre><code>func GenerateUUIDFromMap(data map[string]interface{}) (ID, error)\n</code></pre> <p>GenerateUUIDFromMap generates a UUID from a map. It serializes the map into JSON, calculates the hash of the JSON data, and generates a UUID from the hash.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/shared/json-schema/","title":"json-schema","text":"<p><code>json-schema</code> is a Go library designed to validate JSON schemas according to the JSON Schema Draft-07 specification. This library leverages the <code>gojsonschema</code> package to ensure that your JSON schemas are correctly formatted and adhere to the defined standards.</p>"},{"location":"reference/libs/golang/shared/json-schema/#features","title":"Features","text":"<ul> <li>Validate JSON Schema Draft-07 structures.</li> <li>Return detailed validation error messages.</li> </ul>"},{"location":"reference/libs/golang/shared/json-schema/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/shared/json-schema/#validate-json-schema","title":"Validate JSON Schema","text":"<p>The <code>ValidateJSONSchema</code> function validates a JSON schema to ensure it adheres to the JSON Schema Draft-07 specification. It takes a map representation of the JSON schema as input and returns an error if the schema is invalid. If the schema is valid, it returns <code>nil</code>.</p> <p>Here's an example of how to use the <code>ValidateJSONSchema</code> function to validate a JSON schema.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/yourusername/yourrepository/schematools\"\n)\n\nfunc main() {\n    schema := map[string]interface{}{\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        \"type\":    \"object\",\n        \"properties\": map[string]interface{}{\n            \"age\": map[string]interface{}{\n                \"type\": \"integer\",\n            },\n            \"name\": map[string]interface{}{\n                \"type\": \"string\",\n            },\n        },\n        \"required\": []string{}{\"age\", \"name\"},\n    }\n\n    err := schematools.ValidateJSONSchema(schema)\n    if err != nil {\n        fmt.Println(\"Validation error:\", err)\n    } else {\n        fmt.Println(\"Schema is valid.\")\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/json-schema/#testing","title":"Testing","text":"<p>To run the tests for the <code>schematools</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-shared-json-schema \n</code></pre>"},{"location":"reference/libs/golang/shared/json-schema/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/shared/json-schema/docs/godoc/#schematools","title":"schematools","text":"<pre><code>import \"libs/golang/shared/json-schema/schema-tools\"\n</code></pre>"},{"location":"reference/libs/golang/shared/json-schema/docs/godoc/#index","title":"Index","text":"<ul> <li>func ValidateJSONData(jsonSchema map[string]interface{}, jsonData map[string]interface{}) error</li> <li>func ValidateJSONSchema(jsonSchema map[string]interface{}) error</li> </ul>"},{"location":"reference/libs/golang/shared/json-schema/docs/godoc/#func-validatejsondata","title":"func ValidateJSONData","text":"<pre><code>func ValidateJSONData(jsonSchema map[string]interface{}, jsonData map[string]interface{}) error\n</code></pre> <p>ValidateJSONData validates the input data against the provided JSON schema. It takes a map representation of the JSON Schema and the data to be validated. Returns an error if the data is invalid according to the schema.</p> <p>Parameters: - jsonSchema: map[string]interface{}: The JSON Schema to validate against. - jsonData: map[string]interface{}: The data to be validated.</p> <p>Returns: - error: An error object if the data is invalid according to the JSON Schema, otherwise nil.</p> <p></p>"},{"location":"reference/libs/golang/shared/json-schema/docs/godoc/#func-validatejsonschema","title":"func ValidateJSONSchema","text":"<pre><code>func ValidateJSONSchema(jsonSchema map[string]interface{}) error\n</code></pre> <p>ValidateJSONSchema validates a JSON Schema to ensure it adheres to the JSON Schema Draft-07 specification. It takes a map representation of the JSON Schema as input and returns an error if the schema is invalid. If the schema is valid, it returns nil.</p> <p>Parameters: - jsonSchema: map[string]interface{}: The JSON Schema to be validated.</p> <p>Returns: - error: An error object if the JSON Schema is invalid, otherwise nil.</p> <p>Example:</p> <pre><code>schema := map[string]interface{}{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"type\": \"object\",\n    \"properties\": map[string]interface{}{\n        \"name\": map[string]interface{}{\n            \"type\": \"string\",\n        },\n    },\n}\nerr := ValidateJSONSchema(schema)\nif err != nil {\n    // Handle error\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/shared/type-tools/","title":"type-tools","text":"<p><code>type-tools</code> is a Go library that provides utilities for converting various data types (Go's built-in types). This library is designed to be simple and efficient, making it easy to handle different types of data in a consistent manner.</p>"},{"location":"reference/libs/golang/shared/type-tools/#features","title":"Features","text":"<ul> <li>Convert <code>map[string]interface{}</code> to a sorted string representation.</li> <li>Convert <code>map[string]string</code> to a sorted string representation.</li> <li>Convert <code>float64</code> to a string representation.</li> <li>Convert <code>interface{}</code> to specific Go built-in types.</li> <li>Generic function to convert any type to a string.</li> <li>Parse date strings with a given format.</li> </ul>"},{"location":"reference/libs/golang/shared/type-tools/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/shared/type-tools/#convert-mapstringinterface-to-string","title":"Convert <code>map[string]interface{}</code> to String","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/type-tools\"\n)\n\nfunc main() {\n    data := map[string]interface{}{\n        \"foo\": \"bar\",\n        \"baz\": 123,\n    }\n    str := typetools.MapInterfaceToString(data)\n    fmt.Println(str) // Output: baz:123;foo:bar;\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/type-tools/#convert-mapstringstring-to-string","title":"Convert <code>map[string]string</code> to String","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/type-tools\"\n)\n\nfunc main() {\n    data := map[string]string{\n        \"foo\": \"bar\",\n        \"baz\": \"qux\",\n    }\n    str := typetools.MapStringToString(data)\n    fmt.Println(str) // Output: baz:qux;foo:bar;\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/type-tools/#convert-various-types-to-string","title":"Convert Various Types to String","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/type-tools\"\n)\n\nfunc main() {\n    str := typetools.ToString(\"test\")\n    fmt.Println(str) // Output: test\n\n    str = typetools.ToString(123.456)\n    fmt.Println(str) // Output: 123.456000\n\n    data := map[string]interface{}{\n        \"foo\": \"bar\",\n        \"baz\": 123,\n    }\n    str = typetools.ToString(data)\n    fmt.Println(str) // Output: baz:123;foo:bar;\n\n    dataString := map[string]string{\n        \"foo\": \"bar\",\n        \"baz\": \"qux\",\n    }\n    str = typetools.ToString(dataString)\n    fmt.Println(str) // Output: baz:qux;foo:bar;\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/type-tools/#convert-interface-to-specific-types","title":"Convert Interface to Specific Types","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"libs/golang/shared/type-tools\"\n)\n\nfunc main() {\n    var intf interface{} = \"123\"\n    str, err := typetools.ToString(intf)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    } else {\n        fmt.Println(str) // Output: 123\n    }\n\n    var num interface{} = 123.456\n    floatStr, err := typetools.ToFloat64(num)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n    } else {\n        fmt.Println(floatStr) // Output: 123.456\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/type-tools/#parse-date-with-format","title":"Parse Date with Format","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"time\"\n    \"github.com/yourusername/yourrepository/type-tools\"\n)\n\nfunc main() {\n    dateStr := \"2023-01-01\"\n    format := \"2006-01-02\"\n\n    date, err := typetools.ParseDateWithFormat(dateStr, format)\n    if err != nil {\n        fmt.Println(\"Error:\", err)\n        return\n    }\n\n    fmt.Println(\"Parsed date:\", date.Format(time.RFC3339))\n}\n</code></pre>"},{"location":"reference/libs/golang/shared/type-tools/#testing","title":"Testing","text":"<p>To run the tests for <code>typetools</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-shared-type-tools\n</code></pre>"},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/#typetools","title":"typetools","text":"<pre><code>import \"libs/golang/shared/type-tools\"\n</code></pre>"},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/#index","title":"Index","text":"<ul> <li>func MapInterfaceToString(m map[string]interface{}) string</li> <li>func MapStringToString(m map[string]string) string</li> <li>func ParseBool(data string) (bool, error)</li> <li>func ParseDateWithFormat(date, format string) (time.Time, error)</li> <li>func ParseInt(data string) (int, error)</li> <li>func ToFloat64(data interface{}) (float64, error)</li> <li>func ToString(data interface{}) (string, error)</li> </ul>"},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/#func-mapinterfacetostring","title":"func MapInterfaceToString","text":"<pre><code>func MapInterfaceToString(m map[string]interface{}) string\n</code></pre> <p>MapInterfaceToString converts a map[string]interface{} to a sorted string</p> <p></p>"},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/#func-mapstringtostring","title":"func MapStringToString","text":"<pre><code>func MapStringToString(m map[string]string) string\n</code></pre> <p>MapStringToString converts a map[string]string to a sorted string</p> <p></p>"},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/#func-parsebool","title":"func ParseBool","text":"<pre><code>func ParseBool(data string) (bool, error)\n</code></pre> <p>ParseBool parses a boolean string</p> <p></p>"},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/#func-parsedatewithformat","title":"func ParseDateWithFormat","text":"<pre><code>func ParseDateWithFormat(date, format string) (time.Time, error)\n</code></pre> <p>ParseDateWithFormat parses a date string with a given format</p> <p></p>"},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/#func-parseint","title":"func ParseInt","text":"<pre><code>func ParseInt(data string) (int, error)\n</code></pre> <p>ParseInt parses an integer string</p> <p></p>"},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/#func-tofloat64","title":"func ToFloat64","text":"<pre><code>func ToFloat64(data interface{}) (float64, error)\n</code></pre> <p>ToFloat64 converts various types of data to a float64</p> <p></p>"},{"location":"reference/libs/golang/shared/type-tools/docs/godoc/#func-tostring","title":"func ToString","text":"<pre><code>func ToString(data interface{}) (string, error)\n</code></pre> <p>ToString converts various types of data to a string</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/","title":"resource-contract","text":"<p><code>resource-contract</code> is a Go library that defines a contract for resource wrappers, providing a standardized interface for initializing and retrieving clients. This library is designed to facilitate the integration and management of various resources within a consistent framework.</p>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/#features","title":"Features","text":"<ul> <li>Define a standard interface for initializing resources.</li> <li>Retrieve the client instance for the resource.</li> </ul>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/wrappers/core/resource-contract/#defining-a-resource-wrapper","title":"Defining a Resource Wrapper","text":"<p>To define a resource wrapper, implement the <code>Resource</code> interface provided by the <code>resource-contract</code> package. This interface requires two methods: <code>Init</code> and <code>GetClient</code>.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    resourceWrapper \"libs/golang/wrappers/core/resource-contract\"\n)\n\n// ExampleResource is an example implementation of the Resource interface\ntype ExampleResource struct {\n    client string\n}\n\n// Init initializes the ExampleResource\nfunc (r *ExampleResource) Init() error {\n    r.client = \"example_client\"\n    return nil\n}\n\n// GetClient returns the client instance for the ExampleResource\nfunc (r *ExampleResource) GetClient() interface{} {\n    return r.client\n}\n\nfunc main() {\n    var resource resourceWrapper.Resource = &amp;ExampleResource{}\n\n    err := resource.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize resource: %v\", err)\n    }\n\n    client := resource.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve client\")\n    }\n\n    fmt.Println(\"Resource client:\", client)\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/#interface-definition","title":"Interface Definition","text":"<p>The <code>Resource</code> interface defines the standard methods that all resource wrappers must implement.</p> <pre><code>package wrappersresourcecontract\n\n// Resource defines the interface that all resources should implement\ntype Resource interface {\n    Init() error\n    GetClient() interface{}\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/#example-implementation-mongodb-wrapper","title":"Example Implementation: MongoDB Wrapper","text":"<p>Here is an example of how to implement the <code>Resource</code> interface for a MongoDB wrapper.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/mongo-wrapper/wrapper\"\n    resourceWrapper \"libs/golang/wrappers/core/resource-contract\"\n)\n\nfunc main() {\n    var resource resourceWrapper.Resource = mongowrapper.NewMongoDBWrapper()\n\n    err := resource.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize MongoDBWrapper: %v\", err)\n    }\n\n    client := resource.GetClient()\n    if client == nil {\n        log.Fatalf(\"MongoDB client is not initialized\")\n    }\n\n    fmt.Println(\"MongoDB client initialized successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/#example-implementation-minio-wrapper","title":"Example Implementation: Minio Wrapper","text":"<p>Here is an example of how to implement the <code>Resource</code> interface for a Minio wrapper.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"miniowrapper\"\n    \"wrappersresourcecontract\"\n)\n\nfunc main() {\n    var resource wrappersresourcecontract.Resource = miniowrapper.NewMinioWrapper()\n\n    err := resource.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize MinioWrapper: %v\", err)\n    }\n\n    client := resource.GetClient()\n    if client == nil {\n        log.Fatalf(\"Minio client is not initialized\")\n    }\n\n    fmt.Println(\"Minio client initialized successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/#example-implementation-rabbitmq-wrapper","title":"Example Implementation: RabbitMQ Wrapper","text":"<p>Here is an example of how to implement the <code>Resource</code> interface for a RabbitMQ wrapper.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/rabbitmq-wrapper/rabbitmqwrapper\"\n    resourceWrapper \"libs/golang/wrappers/core/resource-contract\"\n)\n\nfunc main() {\n    var resource resourceWrapper.Resource = rabbitmqwrapper.NewRabbitMQWrapper()\n\n    err := resource.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize RabbitMQWrapper: %v\", err)\n    }\n\n    client := resource.GetClient()\n    if client == nil {\n        log.Fatalf(\"RabbitMQ client is not initialized\")\n    }\n\n    fmt.Println(\"RabbitMQ client initialized successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/wrappers/core/resource-contract/docs/godoc/#wrappersresourcecontract","title":"wrappersresourcecontract","text":"<pre><code>import \"libs/golang/wrappers/core/resource-contract\"\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/docs/godoc/#index","title":"Index","text":"<ul> <li>type Resource</li> </ul>"},{"location":"reference/libs/golang/wrappers/core/resource-contract/docs/godoc/#type-resource","title":"type Resource","text":"<p>Resource defines the interface that all resources should implement</p> <pre><code>type Resource interface {\n    // Init initializes the resource and returns an error if any occurs.\n    Init() error\n\n    // GetClient returns the underlying client of the resource.\n    GetClient() interface{}\n}\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/","title":"resource-mapping","text":"<p><code>resource-mapping</code> is a Go library that provides a centralized way to manage and access various resource wrappers. It allows you to register, initialize, and retrieve resource instances through a singleton instance, ensuring thread-safe operations and simplifying resource management in your applications.</p>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#features","title":"Features","text":"<ul> <li>Centralized management of resource instances.</li> <li>Thread-safe registration and retrieval of resources.</li> <li>Easy initialization and access to resource clients.</li> </ul>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#creating-a-resource-mapping","title":"Creating a Resource Mapping","text":"<p>To create a resource mapping, use the <code>NewResourceMapping</code> function which returns a singleton instance of the <code>Resources</code> struct.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"log\"\n    \"libs/golang/wrappers/core/resource-mapping\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    resources := resourcemapping.NewResourceMapping(ctx)\n\n    if resources == nil {\n        log.Fatal(\"Failed to create resource mapping instance\")\n    }\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#registering-and-retrieving-resources","title":"Registering and Retrieving Resources","text":"<p>You can register resources using the <code>RegisterResource</code> method and retrieve them using the <code>GetResource</code> method. Resources must implement the <code>Resource</code> interface defined in the <code>resource-contract</code> package.</p> <pre><code>package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/core/resource-mapping\"\n    resourceWrapper \"libs/golang/wrappers/core/resource-contract\"\n)\n\n// ExampleResource is a mock implementation of the Resource interface\ntype ExampleResource struct {\n    client string\n}\n\nfunc (r *ExampleResource) Init() error {\n    r.client = \"example_client\"\n    return nil\n}\n\nfunc (r *ExampleResource) GetClient() interface{} {\n    return r.client\n}\n\nfunc main() {\n    ctx := context.Background()\n    resources := resourcemapping.NewResourceMapping(ctx)\n    exampleResource := &amp;ExampleResource{}\n\n    // Register the resource\n    resources.RegisterResource(\"example\", exampleResource)\n\n    // Retrieve the resource\n    retrievedResource, err := resources.GetResource(\"example\")\n    if err != nil {\n        log.Fatalf(\"Failed to retrieve resource: %v\", err)\n    }\n\n    // Initialize the resource\n    err = retrievedResource.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize resource: %v\", err)\n    }\n\n    client := retrievedResource.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve client\")\n    }\n\n    fmt.Println(\"Resource client:\", client)\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#interface-definition","title":"Interface Definition","text":"<p>The <code>Resource</code> interface defines the standard methods that all resource wrappers must implement.</p> <pre><code>package wrappersresourcecontract\n\n// Resource defines the interface that all resources should implement\ntype Resource interface {\n    Init() error\n    GetClient() interface{}\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#example-implementations","title":"Example Implementations","text":""},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#mongodb-wrapper","title":"MongoDB Wrapper","text":"<p>Here is an example of how to implement the <code>Resource</code> interface for a MongoDB wrapper.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/mongo-wrapper/wrapper\"\n    resourceImpl \"libs/golang/wrappers/core/resource-contract\"\n)\n\nfunc main() {\n    var resource resourceImpl.Resource = mongowrapper.NewMongoDBWrapper()\n\n    err := resource.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize MongoDBWrapper: %v\", err)\n    }\n\n    client := resource.GetClient()\n    if client == nil {\n        log.Fatalf(\"MongoDB client is not initialized\")\n    }\n\n    fmt.Println(\"MongoDB client initialized successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#minio-wrapper","title":"Minio Wrapper","text":"<p>Here is an example of how to implement the <code>Resource</code> interface for a Minio wrapper.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"libs/golang/wrappers/resources/minio-wrapper/wrapper\"\n    resourceImpl \"libs/golang/wrappers/core/resource-contract\"\n)\n\nfunc main() {\n    var resource resourceImpl.Resource = miniowrapper.NewMinioWrapper()\n\n    err := resource.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize MinioWrapper: %v\", err)\n    }\n\n    client := resource.GetClient()\n    if client == nil {\n        log.Fatalf(\"Minio client is not initialized\")\n    }\n\n    fmt.Println(\"Minio client initialized successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#rabbitmq-wrapper","title":"RabbitMQ Wrapper","text":"<p>Here is an example of how to implement the <code>Resource</code> interface for a RabbitMQ wrapper.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/rabbitmq-wrapper/wrapper\"\n    resourceImpl \"libs/golang/wrappers/core/resource-contract\"\n)\n\nfunc main() {\n    var resource resourceImpl.Resource = rabbitmqwrapper.NewRabbitMQWrapper()\n\n    err := resource.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize RabbitMQWrapper: %v\", err)\n    }\n\n    client := resource.GetClient()\n    if client == nil {\n        log.Fatalf(\"RabbitMQ client is not initialized\")\n    }\n\n    fmt.Println(\"RabbitMQ client initialized successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/#running-tests","title":"Running Tests","text":"<p>To run the test suite for the <code>resource-mapping</code> library, execute the following command:</p> <pre><code>npx nx test libs-golang-wrappers-core-resource-mapping\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#resourcemapping","title":"resourcemapping","text":"<pre><code>import \"libs/golang/wrappers/core/resource-mapping/mapping\"\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#index","title":"Index","text":"<ul> <li>type FailingMockResource</li> <li>func (f *FailingMockResource) GetClient() interface{}</li> <li>func (f *FailingMockResource) Init() error</li> <li>type MockResource</li> <li>func (m *MockResource) GetClient() interface{}</li> <li>func (m *MockResource) Init() error</li> <li>type Resources</li> <li>func NewResourceMapping() *Resources</li> <li>func (r *Resources) GetResource(key string) (resourceImpl.Resource, error)</li> <li>func (r *Resources) RegisterResource(key string, resource resourceImpl.Resource)</li> </ul>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#type-failingmockresource","title":"type FailingMockResource","text":"<pre><code>type FailingMockResource struct{}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#func-failingmockresource-getclient","title":"func (*FailingMockResource) GetClient","text":"<pre><code>func (f *FailingMockResource) GetClient() interface{}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#func-failingmockresource-init","title":"func (*FailingMockResource) Init","text":"<pre><code>func (f *FailingMockResource) Init() error\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#type-mockresource","title":"type MockResource","text":"<pre><code>type MockResource struct {\n    // contains filtered or unexported fields\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#func-mockresource-getclient","title":"func (*MockResource) GetClient","text":"<pre><code>func (m *MockResource) GetClient() interface{}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#func-mockresource-init","title":"func (*MockResource) Init","text":"<pre><code>func (m *MockResource) Init() error\n</code></pre>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#type-resources","title":"type Resources","text":"<p>Resources struct holds the initialized resources</p> <pre><code>type Resources struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#func-newresourcemapping","title":"func NewResourceMapping","text":"<pre><code>func NewResourceMapping() *Resources\n</code></pre> <p>NewResourceMapping creates a singleton instance of Resources</p> <p></p>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#func-resources-getresource","title":"func (*Resources) GetResource","text":"<pre><code>func (r *Resources) GetResource(key string) (resourceImpl.Resource, error)\n</code></pre> <p>GetResource retrieves a resource by key</p> <p></p>"},{"location":"reference/libs/golang/wrappers/core/resource-mapping/docs/godoc/#func-resources-registerresource","title":"func (*Resources) RegisterResource","text":"<pre><code>func (r *Resources) RegisterResource(key string, resource resourceImpl.Resource)\n</code></pre> <p>RegisterResource registers a resource with a given key</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/","title":"minio-wrapper","text":"<p><code>minio-wrapper</code> is a Go library that provides a wrapper around a Minio client with an interface for creating and managing Minio connections. This library simplifies the initialization of Minio clients using environment variables and provides methods to retrieve the client.</p>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/#features","title":"Features","text":"<ul> <li>Initialize a Minio client using environment variables</li> <li>Retrieve the Minio client instance</li> </ul>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/#initializing-a-minio-client","title":"Initializing a Minio Client","text":"<p>The <code>MinioWrapper</code> struct provides an <code>Init</code> method to initialize a Minio client using configuration parameters from environment variables.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/minio-wrapper/miniowrapper\"\n)\n\nfunc main() {\n    wrapper := miniowrapper.NewMinioWrapper()\n\n    err := wrapper.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize Minio client: %v\", err)\n    }\n\n    client := wrapper.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve Minio client\")\n    }\n\n    fmt.Println(\"Minio client initialized and retrieved successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/#retrieving-the-minio-client","title":"Retrieving the Minio Client","text":"<p>The <code>MinioWrapper</code> provides a method to retrieve the initialized Minio client.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/minio-wrapper/miniowrapper\"\n)\n\nfunc main() {\n    wrapper := miniowrapper.NewMinioWrapper()\n\n    err := wrapper.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize Minio client: %v\", err)\n    }\n\n    client := wrapper.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve Minio client\")\n    }\n\n    fmt.Println(\"Minio client retrieved successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/#environment-variables","title":"Environment Variables","text":"<p>The <code>MinioWrapper</code> uses the following environment variables to configure the Minio client:</p> <ul> <li><code>MINIO_ENDPOINT</code>: The endpoint URL for the Minio server</li> <li><code>MINIO_ACCESS_KEY</code>: The access key for authentication</li> <li><code>MINIO_SECRET_KEY</code>: The secret key for authentication</li> <li><code>MINIO_USE_SSL</code>: Set to <code>true</code> to use SSL/TLS, <code>false</code> otherwise</li> </ul> <p>Ensure these variables are set in your environment before initializing the <code>MinioWrapper</code>.</p>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/#testing","title":"Testing","text":"<p>To run the tests for the <code>miniowrapper</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-wrappers-resources-minio-wrapper\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/#example","title":"Example","text":"<p>Here's an example of how to use the <code>minio-wrapper</code> library:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n    \"libs/golang/wrappers/resources/minio-wrapper/miniowrapper\"\n)\n\nfunc main() {\n    os.Setenv(\"MINIO_ENDPOINT\", \"localhost:9000\")\n    os.Setenv(\"MINIO_ACCESS_KEY\", \"minioaccesskey\")\n    os.Setenv(\"MINIO_SECRET_KEY\", \"miniosecretkey\")\n    os.Setenv(\"MINIO_USE_SSL\", \"false\")\n\n    wrapper := miniowrapper.NewMinioWrapper()\n\n    err := wrapper.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize Minio client: %v\", err)\n    }\n\n    client := wrapper.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve Minio client\")\n    }\n\n    fmt.Println(\"Minio client initialized and retrieved successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/#miniowrapper","title":"miniowrapper","text":"<pre><code>import \"libs/golang/wrappers/resources/minio-wrapper/wrapper\"\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/#index","title":"Index","text":"<ul> <li>type ClientFactory</li> <li>type DefaultClientFactory</li> <li>func (f *DefaultClientFactory) NewClient(config gominio.Config) (*gominio.Client, error)</li> <li>type MinioWrapper</li> <li>func NewMinioWrapper() *MinioWrapper</li> <li>func (m *MinioWrapper) GetClient() interface{}</li> <li>func (m *MinioWrapper) Init() error</li> </ul>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/#type-clientfactory","title":"type ClientFactory","text":"<p>ClientFactory defines an interface for creating new Minio clients.</p> <pre><code>type ClientFactory interface {\n    // NewClient creates a new Minio client with the provided configuration.\n    // It returns the client and an error if any occurred during the connection.\n    NewClient(config gominio.Config) (*gominio.Client, error)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/#type-defaultclientfactory","title":"type DefaultClientFactory","text":"<p>DefaultClientFactory is a default implementation of the ClientFactory interface.</p> <pre><code>type DefaultClientFactory struct{}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/#func-defaultclientfactory-newclient","title":"func (*DefaultClientFactory) NewClient","text":"<pre><code>func (f *DefaultClientFactory) NewClient(config gominio.Config) (*gominio.Client, error)\n</code></pre> <p>NewClient creates a new Minio client with the provided configuration using the default implementation.</p> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/#type-miniowrapper","title":"type MinioWrapper","text":"<p>MinioWrapper wraps a Minio client and provides initialization and retrieval methods.</p> <pre><code>type MinioWrapper struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/#func-newminiowrapper","title":"func NewMinioWrapper","text":"<pre><code>func NewMinioWrapper() *MinioWrapper\n</code></pre> <p>NewMinioWrapper creates a new MinioWrapper with the default client factory.</p> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/#func-miniowrapper-getclient","title":"func (*MinioWrapper) GetClient","text":"<pre><code>func (m *MinioWrapper) GetClient() interface{}\n</code></pre> <p>GetClient returns the Minio client.</p> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/minio-wrapper/docs/godoc/#func-miniowrapper-init","title":"func (*MinioWrapper) Init","text":"<pre><code>func (m *MinioWrapper) Init() error\n</code></pre> <p>Init initializes the Minio client using environment variables for configuration. It returns an error if the client could not be created.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/","title":"mongo-wrapper","text":"<p><code>mongo-wrapper</code> is a Go library that provides a wrapper around a MongoDB client with an interface for creating and managing MongoDB connections. This library simplifies the initialization of MongoDB clients using environment variables and provides methods to retrieve the client.</p>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/#features","title":"Features","text":"<ul> <li>Initialize a MongoDB client using environment variables</li> <li>Retrieve the MongoDB client instance</li> </ul>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/#initializing-a-mongodb-client","title":"Initializing a MongoDB Client","text":"<p>The <code>MongoDBWrapper</code> struct provides an <code>Init</code> method to initialize a MongoDB client using configuration parameters from environment variables.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/mongo-wrapper/wrapper\"\n)\n\nfunc main() {\n    wrapper := mongowrapper.NewMongoDBWrapper()\n\n    err := wrapper.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize MongoDB client: %v\", err)\n    }\n\n    client := wrapper.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve MongoDB client\")\n    }\n\n    fmt.Println(\"MongoDB client initialized and retrieved successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/#retrieving-the-mongodb-client","title":"Retrieving the MongoDB Client","text":"<p>The <code>MongoDBWrapper</code> provides a method to retrieve the initialized MongoDB client.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/mongo-wrapper/wrapper\"\n)\n\nfunc main() {\n    wrapper := mongowrapper.NewMongoDBWrapper()\n\n    err := wrapper.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize MongoDB client: %v\", err)\n    }\n\n    client := wrapper.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve MongoDB client\")\n    }\n\n    fmt.Println(\"MongoDB client retrieved successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/#environment-variables","title":"Environment Variables","text":"<p>The <code>MongoDBWrapper</code> uses the following environment variables to configure the MongoDB client:</p> <ul> <li><code>MONGODB_USER</code>: The username for authentication</li> <li><code>MONGODB_PASSWORD</code>: The password for authentication</li> <li><code>MONGODB_HOST</code>: The host of the MongoDB instance</li> <li><code>MONGODB_PORT</code>: The port of the MongoDB instance</li> <li><code>MONGODB_DBNAME</code>: The name of the database to connect to</li> </ul> <p>Ensure these variables are set in your environment before initializing the <code>MongoDBWrapper</code>.</p>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/#testing","title":"Testing","text":"<p>To run the tests for the <code>mongowrapper</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-wrappers-resources-mongo-wrapper\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/#example","title":"Example","text":"<p>Here's an example of how to use the <code>mongowrapper</code> library:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n    \"libs/golang/wrappers/resources/mongo-wrapper/wrapper\"\n)\n\nfunc main() {\n    os.Setenv(\"MONGODB_USER\", \"testuser\")\n    os.Setenv(\"MONGODB_PASSWORD\", \"testpassword\")\n    os.Setenv(\"MONGODB_HOST\", \"localhost\")\n    os.Setenv(\"MONGODB_PORT\", \"27017\")\n    os.Setenv(\"MONGODB_DBNAME\", \"testdb\")\n\n    wrapper := mongowrapper.NewMongoDBWrapper()\n\n    err := wrapper.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize MongoDB client: %v\", err)\n    }\n\n    client := wrapper.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve MongoDB client\")\n    }\n\n    fmt.Println(\"MongoDB client initialized and retrieved successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/#mongowrapper","title":"mongowrapper","text":"<pre><code>import \"libs/golang/wrappers/resources/mongo-wrapper/wrapper\"\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/#index","title":"Index","text":"<ul> <li>type ClientFactory</li> <li>type DefaultClientFactory</li> <li>func (f *DefaultClientFactory) NewClient(config gomongodb.Config) (*gomongodb.Client, error)</li> <li>type MongoDBWrapper</li> <li>func NewMongoDBWrapper() *MongoDBWrapper</li> <li>func (m *MongoDBWrapper) GetClient() interface{}</li> <li>func (m *MongoDBWrapper) Init() error</li> </ul>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/#type-clientfactory","title":"type ClientFactory","text":"<p>ClientFactory defines an interface for creating new MongoDB clients.</p> <pre><code>type ClientFactory interface {\n    // NewClient creates a new MongoDB client with the provided configuration.\n    // It returns the client and an error if any occurred during the connection.\n    NewClient(config gomongodb.Config) (*gomongodb.Client, error)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/#type-defaultclientfactory","title":"type DefaultClientFactory","text":"<p>DefaultClientFactory is a default implementation of the ClientFactory interface.</p> <pre><code>type DefaultClientFactory struct{}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/#func-defaultclientfactory-newclient","title":"func (*DefaultClientFactory) NewClient","text":"<pre><code>func (f *DefaultClientFactory) NewClient(config gomongodb.Config) (*gomongodb.Client, error)\n</code></pre> <p>NewClient creates a new MongoDB client with the provided configuration using the default implementation.</p> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/#type-mongodbwrapper","title":"type MongoDBWrapper","text":"<p>MongoDBWrapper wraps a MongoDB client and provides initialization and retrieval methods.</p> <pre><code>type MongoDBWrapper struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/#func-newmongodbwrapper","title":"func NewMongoDBWrapper","text":"<pre><code>func NewMongoDBWrapper() *MongoDBWrapper\n</code></pre> <p>NewMongoDBWrapper creates a new MongoDBWrapper with the default client factory.</p> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/#func-mongodbwrapper-getclient","title":"func (*MongoDBWrapper) GetClient","text":"<pre><code>func (m *MongoDBWrapper) GetClient() interface{}\n</code></pre> <p>GetClient returns the MongoDB client.</p> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/mongo-wrapper/docs/godoc/#func-mongodbwrapper-init","title":"func (*MongoDBWrapper) Init","text":"<pre><code>func (m *MongoDBWrapper) Init() error\n</code></pre> <p>Init initializes the MongoDB client using environment variables for configuration. It returns an error if the client could not be created.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/","title":"rabbitmq-wrapper","text":"<p><code>rabbitmq-wrapper</code> is a Go library that provides a wrapper around a RabbitMQ client with an interface for creating and managing RabbitMQ connections. This library simplifies the initialization of RabbitMQ clients using environment variables and provides methods to retrieve the client.</p>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/#features","title":"Features","text":"<ul> <li>Initialize a RabbitMQ client using environment variables</li> <li>Retrieve the RabbitMQ client instance</li> </ul>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/#usage","title":"Usage","text":""},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/#initializing-a-rabbitmq-client","title":"Initializing a RabbitMQ Client","text":"<p>The <code>RabbitMQWrapper</code> struct provides an <code>Init</code> method to initialize a RabbitMQ client using configuration parameters from environment variables.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/rabbitmq-wrapper/rabbitmqwrapper\"\n)\n\nfunc main() {\n    wrapper := rabbitmqwrapper.NewRabbitMQWrapper()\n\n    err := wrapper.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize RabbitMQ client: %v\", err)\n    }\n\n    client := wrapper.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve RabbitMQ client\")\n    }\n\n    fmt.Println(\"RabbitMQ client initialized and retrieved successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/#retrieving-the-rabbitmq-client","title":"Retrieving the RabbitMQ Client","text":"<p>The <code>RabbitMQWrapper</code> provides a method to retrieve the initialized RabbitMQ client.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"libs/golang/wrappers/resources/rabbitmq-wrapper/rabbitmqwrapper\"\n)\n\nfunc main() {\n    wrapper := rabbitmqwrapper.NewRabbitMQWrapper()\n\n    err := wrapper.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize RabbitMQ client: %v\", err)\n    }\n\n    client := wrapper.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve RabbitMQ client\")\n    }\n\n    fmt.Println(\"RabbitMQ client retrieved successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/#environment-variables","title":"Environment Variables","text":"<p>The <code>RabbitMQWrapper</code> uses the following environment variables to configure the RabbitMQ client:</p> <ul> <li><code>RABBITMQ_USER</code>: The username for authentication</li> <li><code>RABBITMQ_PASSWORD</code>: The password for authentication</li> <li><code>RABBITMQ_HOST</code>: The host of the RabbitMQ instance</li> <li><code>RABBITMQ_PORT</code>: The port of the RabbitMQ instance</li> <li><code>RABBITMQ_PROTOCOL</code>: The protocol to use for the connection (e.g., \"amqp\")</li> <li><code>RABBITMQ_EXCHANGE_NAME</code>: The name of the RabbitMQ exchange to use</li> <li><code>RABBITMQ_EXCHANGE_TYPE</code>: The type of the RabbitMQ exchange (e.g., \"direct\", \"fanout\")</li> </ul> <p>Ensure these variables are set in your environment before initializing the <code>RabbitMQWrapper</code>.</p>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/#testing","title":"Testing","text":"<p>To run the tests for the <code>rabbitmqwrapper</code> package, use the following command:</p> <pre><code>npx nx test libs-golang-wrappers-resources-rabbitmq-wrapper\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/#example","title":"Example","text":"<p>Here's an example of how to use the <code>rabbitmqwrapper</code> library:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"os\"\n    \"libs/golang/wrappers/resources/rabbitmq-wrapper/rabbitmqwrapper\"\n)\n\nfunc main() {\n    os.Setenv(\"RABBITMQ_USER\", \"testuser\")\n    os.Setenv(\"RABBITMQ_PASSWORD\", \"testpassword\")\n    os.Setenv(\"RABBITMQ_HOST\", \"localhost\")\n    os.Setenv(\"RABBITMQ_PORT\", \"5672\")\n    os.Setenv(\"RABBITMQ_PROTOCOL\", \"amqp\")\n    os.Setenv(\"RABBITMQ_EXCHANGE_NAME\", \"testexchange\")\n    os.Setenv(\"RABBITMQ_EXCHANGE_TYPE\", \"direct\")\n\n    wrapper := rabbitmqwrapper.NewRabbitMQWrapper()\n\n    err := wrapper.Init()\n    if err != nil {\n        log.Fatalf(\"Failed to initialize RabbitMQ client: %v\", err)\n    }\n\n    client := wrapper.GetClient()\n    if client == nil {\n        log.Fatalf(\"Failed to retrieve RabbitMQ client\")\n    }\n\n    fmt.Println(\"RabbitMQ client initialized and retrieved successfully\")\n}\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/","title":"Godoc","text":""},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/#rabbitmqwrapper","title":"rabbitmqwrapper","text":"<pre><code>import \"libs/golang/wrappers/resources/rabbitmq-wrapper/wrapper\"\n</code></pre>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/#index","title":"Index","text":"<ul> <li>type ClientFactory</li> <li>type DefaultClientFactory</li> <li>func (f *DefaultClientFactory) NewClient(config gorabbitmq.Config) (*gorabbitmq.Client, error)</li> <li>type RabbitMQWrapper</li> <li>func NewRabbitMQWrapper() *RabbitMQWrapper</li> <li>func (r *RabbitMQWrapper) GetClient() interface{}</li> <li>func (r *RabbitMQWrapper) Init() error</li> </ul>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/#type-clientfactory","title":"type ClientFactory","text":"<p>ClientFactory defines an interface for creating new RabbitMQ clients.</p> <pre><code>type ClientFactory interface {\n    // NewClient creates a new RabbitMQ client with the provided configuration.\n    // It returns the client and an error if any occurred during the connection.\n    NewClient(config gorabbitmq.Config) (*gorabbitmq.Client, error)\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/#type-defaultclientfactory","title":"type DefaultClientFactory","text":"<p>DefaultClientFactory is a default implementation of the ClientFactory interface.</p> <pre><code>type DefaultClientFactory struct{}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/#func-defaultclientfactory-newclient","title":"func (*DefaultClientFactory) NewClient","text":"<pre><code>func (f *DefaultClientFactory) NewClient(config gorabbitmq.Config) (*gorabbitmq.Client, error)\n</code></pre> <p>NewClient creates a new RabbitMQ client with the provided configuration using the default implementation.</p> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/#type-rabbitmqwrapper","title":"type RabbitMQWrapper","text":"<p>RabbitMQWrapper wraps a RabbitMQ client and provides initialization and retrieval methods.</p> <pre><code>type RabbitMQWrapper struct {\n    // contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/#func-newrabbitmqwrapper","title":"func NewRabbitMQWrapper","text":"<pre><code>func NewRabbitMQWrapper() *RabbitMQWrapper\n</code></pre> <p>NewRabbitMQWrapper creates a new RabbitMQWrapper with the default client factory.</p> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/#func-rabbitmqwrapper-getclient","title":"func (*RabbitMQWrapper) GetClient","text":"<pre><code>func (r *RabbitMQWrapper) GetClient() interface{}\n</code></pre> <p>GetClient returns the RabbitMQ client.</p> <p></p>"},{"location":"reference/libs/golang/wrappers/resources/rabbitmq-wrapper/docs/godoc/#func-rabbitmqwrapper-init","title":"func (*RabbitMQWrapper) Init","text":"<pre><code>func (r *RabbitMQWrapper) Init() error\n</code></pre> <p>Init initializes the RabbitMQ client using environment variables for configuration. It returns an error if the client could not be created.</p> <p>Generated by gomarkdoc</p>"},{"location":"reference/libs/python/clients/apis/config-vault/","title":"config-vault/client","text":""},{"location":"reference/libs/python/clients/apis/config-vault/#overview","title":"Overview","text":"<p><code>config-vault/client</code> is a Python client library for handling asynchronous interactions with a configuration service. It utilizes rate-limited HTTP requests to manage configurations efficiently, ensuring compliance with API rate limits. The library provides a variety of methods to create, update, retrieve, and delete configurations, as well as query configurations based on specific criteria.</p>"},{"location":"reference/libs/python/clients/apis/config-vault/#features","title":"Features","text":"<ul> <li>Create Configurations: Create new configurations asynchronously.</li> <li>Update Configurations: Update existing configurations asynchronously.</li> <li>Retrieve Configurations: Retrieve configurations by ID or list all configurations.</li> <li>Delete Configurations: Delete configurations by ID.</li> <li>Query Configurations: Retrieve configurations based on service, provider, source, and active status.</li> </ul>"},{"location":"reference/libs/python/clients/apis/config-vault/#installation","title":"Installation","text":"<p>To install the <code>config-vault</code> client library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-clients-apis-config-vault --local\n</code></pre>"},{"location":"reference/libs/python/clients/apis/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/python/clients/apis/config-vault/#initialization","title":"Initialization","text":"<p>To create an instance of the <code>AsyncPyConfigVaultClient</code>, you need to provide the base URL of the configuration service:</p> <pre><code>from your_module import async_py_config_vault_client\n\nclient = async_py_config_vault_client()\n</code></pre>"},{"location":"reference/libs/python/clients/apis/config-vault/#creating-a-configuration","title":"Creating a Configuration","text":"<p>To create a new configuration:</p> <pre><code>import asyncio\n\ndata = {\n    \"active\": True,\n    \"service\": \"test-service\",\n    \"source\": \"test-source\",\n    \"provider\": \"provider\",\n    \"depends_on\": [{\n        \"service\": \"dep-service\",\n        \"source\": \"dep-source\"\n    }]\n}\n\nasync def create_config():\n    config = await client.create(data)\n    print(config)\n\nasyncio.run(create_config())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/config-vault/#updating-a-configuration","title":"Updating a Configuration","text":"<p>To update an existing configuration:</p> <pre><code>data = {\n    \"active\": False,\n    \"service\": \"test-service-updated\",\n    \"source\": \"test-source\",\n    \"provider\": \"provider\",\n    \"depends_on\": [{\n        \"service\": \"dep-service\",\n        \"source\": \"dep-source\"\n    }]\n}\n\nasync def update_config():\n    config = await client.update_config(data)\n    print(config)\n\nasyncio.run(update_config())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/config-vault/#listing-all-configurations","title":"Listing All Configurations","text":"<p>To retrieve a list of all configurations:</p> <pre><code>async def list_all_configs():\n    configs = await client.list_all_configs()\n    for config in configs:\n        print(config)\n\nasyncio.run(list_all_configs())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/config-vault/#retrieving-a-configuration-by-id","title":"Retrieving a Configuration by ID","text":"<p>To retrieve a specific configuration by its ID:</p> <pre><code>config_id = \"123\"\n\nasync def get_config_by_id():\n    config = await client.get_config_by_id(config_id)\n    print(config)\n\nasyncio.run(get_config_by_id())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/config-vault/#deleting-a-configuration","title":"Deleting a Configuration","text":"<p>To delete a specific configuration by its ID:</p> <pre><code>config_id = \"123\"\n\nasync def delete_config():\n    await client.delete_config(config_id)\n\nasyncio.run(delete_config())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/config-vault/#querying-configurations","title":"Querying Configurations","text":"<p>To retrieve configurations based on service and provider:</p> <pre><code>provider = \"provider\"\nservice = \"test-service\"\n\nasync def list_configs_by_service_and_provider():\n    configs = await client.list_configs_by_service_and_provider(provider, service)\n    for config in configs:\n        print(config)\n\nasyncio.run(list_configs_by_service_and_provider())\n</code></pre> <p>To retrieve configurations based on source and provider:</p> <pre><code>provider = \"provider\"\nsource = \"test-source\"\n\nasync def list_configs_by_source_and_provider():\n    configs = await client.list_configs_by_source_and_provider(provider, source)\n    for config in configs:\n        print(config)\n\nasyncio.run(list_configs_by_source_and_provider())\n</code></pre> <p>To retrieve configurations based on service, provider, and active status:</p> <pre><code>provider = \"provider\"\nservice = \"test-service\"\nactive = True\n\nasync def list_configs_by_service_provider_and_active():\n    configs = await client.list_configs_by_service_provider_and_active(provider, service, active)\n    for config in configs:\n        print(config)\n\nasyncio.run(list_configs_by_service_provider_and_active())\n</code></pre> <p>To retrieve configurations based on service, source, and provider:</p> <pre><code>provider = \"provider\"\nservice = \"test-service\"\nsource = \"test-source\"\n\nasync def list_configs_by_service_source_and_provider():\n    configs = await client.list_configs_by_service_source_and_provider(provider, service, source)\n    for config in configs:\n        print(config)\n\nasyncio.run(list_configs_by_service_source_and_provider())\n</code></pre> <p>To retrieve configurations based on provider, service, and dependencies:</p> <pre><code>provider = \"provider\"\nservice = \"test-service\"\nsource = \"test-source\"\n\nasync def list_configs_by_provider_and_dependencies():\n    configs = await client.list_configs_by_provider_and_dependencies(provider, service, source)\n    for config in configs:\n        print(config)\n\nasyncio.run(list_configs_by_provider_and_dependencies())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/config-vault/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-clients-apis-config-vault\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-clients-apis-config-vault --with dev\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/","title":"schema-vault/client","text":""},{"location":"reference/libs/python/clients/apis/schema-vault/#overview","title":"Overview","text":"<p><code>schema-vault/client</code> is a Python client library for handling asynchronous interactions with a schema service. It utilizes rate-limited HTTP requests to manage schemas efficiently, ensuring compliance with API rate limits. The library provides a variety of methods to create, update, retrieve, and delete schemas, as well as query schemas based on specific criteria.</p>"},{"location":"reference/libs/python/clients/apis/schema-vault/#features","title":"Features","text":"<ul> <li>Create Schemas: Create new schemas asynchronously.</li> <li>Update Schemas: Update existing schemas asynchronously.</li> <li>Retrieve Schemas: Retrieve schemas by ID or list all schemas.</li> <li>Delete Schemas: Delete schemas by ID.</li> <li>Query Schemas: Retrieve schemas based on service, provider, source, and schema type.</li> <li>Validate Schemas: Validate schemas using provided data.</li> </ul>"},{"location":"reference/libs/python/clients/apis/schema-vault/#installation","title":"Installation","text":"<p>To install the <code>schema-vault</code> client library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-clients-apis-schema-vault --local\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/python/clients/apis/schema-vault/#initialization","title":"Initialization","text":"<p>To create an instance of the <code>AsyncPySchemaVaultClient</code>, you need to provide the base URL of the schema service:</p> <pre><code>from your_module import async_py_schema_vault_client\n\nclient = async_py_schema_vault_client()\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/#creating-a-schema","title":"Creating a Schema","text":"<p>To create a new schema:</p> <pre><code>import asyncio\n\ndata = {\n    \"service\": \"test-service\",\n    \"source\": \"test-source\",\n    \"provider\": \"provider\",\n    \"schema_type\": \"type\",\n    \"json_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"field\": {\"type\": \"string\"}\n        },\n        \"required\": [\"field\"]\n    }\n}\n\nasync def create_schema():\n    schema = await client.create(data)\n    print(schema)\n\nasyncio.run(create_schema())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/#updating-a-schema","title":"Updating a Schema","text":"<p>To update an existing schema:</p> <pre><code>data = {\n    \"service\": \"test-service-updated\",\n    \"source\": \"test-source\",\n    \"provider\": \"provider\",\n    \"schema_type\": \"type\",\n    \"json_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"field\": {\"type\": \"string\"}\n        },\n        \"required\": [\"field\"]\n    }\n}\n\nasync def update_schema():\n    schema = await client.update_schema(data)\n    print(schema)\n\nasyncio.run(update_schema())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/#listing-all-schemas","title":"Listing All Schemas","text":"<p>To retrieve a list of all schemas:</p> <pre><code>async def list_all_schemas():\n    schemas = await client.list_all_schemas()\n    for schema in schemas:\n        print(schema)\n\nasyncio.run(list_all_schemas())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/#retrieving-a-schema-by-id","title":"Retrieving a Schema by ID","text":"<p>To retrieve a specific schema by its ID:</p> <pre><code>schema_id = \"schema-id\"\n\nasync def get_schema_by_id():\n    schema = await client.get_schema_by_id(schema_id)\n    print(schema)\n\nasyncio.run(get_schema_by_id())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/#deleting-a-schema","title":"Deleting a Schema","text":"<p>To delete a specific schema by its ID:</p> <pre><code>schema_id = \"schema-id\"\n\nasync def delete_schema():\n    await client.delete_schema(schema_id)\n\nasyncio.run(delete_schema())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/#querying-schemas","title":"Querying Schemas","text":"<p>To retrieve schemas based on service and provider:</p> <pre><code>provider = \"provider\"\nservice = \"test-service\"\n\nasync def list_schemas_by_service_and_provider():\n    schemas = await client.list_schemas_by_service_and_provider(provider, service)\n    for schema in schemas:\n        print(schema)\n\nasyncio.run(list_schemas_by_service_and_provider())\n</code></pre> <p>To retrieve schemas based on source and provider:</p> <pre><code>provider = \"provider\"\nsource = \"test-source\"\n\nasync def list_schemas_by_source_and_provider():\n    schemas = await client.list_schemas_by_source_and_provider(provider, source)\n    for schema in schemas:\n        print(schema)\n\nasyncio.run(list_schemas_by_source_and_provider())\n</code></pre> <p>To retrieve schemas based on service, source, and provider:</p> <pre><code>provider = \"provider\"\nservice = \"test-service\"\nsource = \"test-source\"\n\nasync def list_schemas_by_service_source_and_provider():\n    schemas = await client.list_schemas_by_service_source_and_provider(provider, service, source)\n    for schema in schemas:\n        print(schema)\n\nasyncio.run(list_schemas_by_service_source_and_provider())\n</code></pre> <p>To retrieve schemas based on service, source, provider, and schema type:</p> <pre><code>provider = \"provider\"\nservice = \"test-service\"\nsource = \"test-source\"\nschema_type = \"type\"\n\nasync def list_schemas_by_service_source_provider_and_schema_type():\n    schemas = await client.list_schemas_by_service_source_provider_and_schema_type(provider, service, source, schema_type)\n    for schema in schemas:\n        print(schema)\n\nasyncio.run(list_schemas_by_service_source_provider_and_schema_type())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/#validating-a-schema","title":"Validating a Schema","text":"<p>To validate a schema using provided data:</p> <pre><code>data = {\n    \"service\": \"test-service\",\n    \"source\": \"test-source\",\n    \"provider\": \"provider\",\n    \"schema_type\": \"type\",\n    \"json_schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"field\": {\n                \"type\": \"string\"\n            }\n        },\n        \"required\": [\"field\"]\n    }\n}\n\nasync def validate_schema():\n    is_valid = await client.validate_schema(data)\n    print(\"Schema is valid:\", is_valid)\n\nasyncio.run(validate_schema())\n</code></pre>"},{"location":"reference/libs/python/clients/apis/schema-vault/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-clients-apis-schema-vault\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-clients-apis-schema-vault --with dev\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/","title":"py-minio","text":"<p>A Python library for interacting with Minio, providing easy-to-use client class methods for managing buckets and objects on a Minio server.</p>"},{"location":"reference/libs/python/clients/resources/py-minio/#features","title":"Features","text":"<ul> <li>Create and delete buckets.</li> <li>Upload and download files and bytes.</li> <li>List buckets and objects.</li> <li>Generate URIs for accessing objects.</li> </ul>"},{"location":"reference/libs/python/clients/resources/py-minio/#installation","title":"Installation","text":"<p>To install the <code>py-minio</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-clients-resources-py-minio --local\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/#usage","title":"Usage","text":""},{"location":"reference/libs/python/clients/resources/py-minio/#minioclient","title":"MinioClient","text":"<p>The <code>MinioClient</code> class provides methods to interact with a Minio server, including creating buckets, uploading files, and downloading files.</p>"},{"location":"reference/libs/python/clients/resources/py-minio/#example","title":"Example","text":"<pre><code>from pyminio.client import MinioClient\n\n# Initialize the Minio client\nminio = MinioClient(endpoint=\"http://localhost:9000\", access_key=\"your_access_key\", secret_key=\"your_secret_key\")\n\n# Create a new bucket\nminio.create_bucket(\"my_bucket\")\n\n# Upload a file\nminio.upload_file(\"my_bucket\", \"example.txt\", \"path/to/local/file.txt\")\n\n# List objects in the bucket\nobjects = minio.list_objects(\"my_bucket\")\nprint(objects)\n\n# Download a file\nminio.download_file(\"my_bucket\", \"example.txt\", \"path/to/download/file.txt\")\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/#methods","title":"Methods","text":""},{"location":"reference/libs/python/clients/resources/py-minio/#create_bucketbucket_name-str-none","title":"<code>create_bucket(bucket_name: str) -&gt; None</code>","text":"<p>Creates a new bucket on the Minio server.</p> <pre><code>minio.create_bucket(\"my_bucket\")\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/#list_buckets-liststr","title":"<code>list_buckets() -&gt; List[str]</code>","text":"<p>Lists all buckets available on the Minio server.</p> <pre><code>buckets = minio.list_buckets()\nprint(buckets)\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/#upload_filebucket_name-str-object_name-str-file_path-str-str","title":"<code>upload_file(bucket_name: str, object_name: str, file_path: str) -&gt; str</code>","text":"<p>Uploads a file to a specified bucket on the Minio server and returns the URI of the uploaded file.</p> <pre><code>uri = minio.upload_file(\"my_bucket\", \"example.txt\", \"path/to/local/file.txt\")\nprint(uri)\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/#upload_bytesbucket_name-str-object_name-str-bytes_data-bytes-str","title":"<code>upload_bytes(bucket_name: str, object_name: str, bytes_data: bytes) -&gt; str</code>","text":"<p>Uploads bytes data to a specified bucket on the Minio server and returns the URI of the uploaded data.</p> <pre><code>data = b\"Hello, World!\"\nuri = minio.upload_bytes(\"my_bucket\", \"example_bytes\", data)\nprint(uri)\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/#download_filebucket_name-str-object_name-str-file_path-str-none","title":"<code>download_file(bucket_name: str, object_name: str, file_path: str) -&gt; None</code>","text":"<p>Downloads a file from a specified bucket on the Minio server and saves it locally.</p> <pre><code>minio.download_file(\"my_bucket\", \"example.txt\", \"path/to/download/file.txt\")\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/#download_file_as_bytesbucket_name-str-object_name-str-bytes","title":"<code>download_file_as_bytes(bucket_name: str, object_name: str) -&gt; bytes</code>","text":"<p>Downloads a file from a specified bucket on the Minio server and returns it as bytes.</p> <pre><code>data = minio.download_file_as_bytes(\"my_bucket\", \"example.txt\")\nprint(data.decode())\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/#list_objectsbucket_name-str-liststr","title":"<code>list_objects(bucket_name: str) -&gt; List[str]</code>","text":"<p>Lists objects in a specified bucket on the Minio server.</p> <pre><code>objects = minio.list_objects(\"my_bucket\")\nprint(objects)\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-minio/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-clients-resources-py-minio\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-clients-resources-py-minio --with dev\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-mongo/","title":"py-mongo","text":"<p>A Python library providing helper functions to interact with MongoDB, including connecting to a MongoDB instance and dropping databases.</p>"},{"location":"reference/libs/python/clients/resources/py-mongo/#features","title":"Features","text":"<ul> <li>Connect to a MongoDB instance using environment configurations.</li> <li>Drop specified databases.</li> </ul>"},{"location":"reference/libs/python/clients/resources/py-mongo/#installation","title":"Installation","text":"<p>To install the <code>py-mongo</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-clients-resources-py-mongo --local\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-mongo/#usage","title":"Usage","text":""},{"location":"reference/libs/python/clients/resources/py-mongo/#get_mongo_client","title":"get_mongo_client","text":"<p>The <code>get_mongo_client</code> function retrieves a MongoDB client connected to the MongoDB endpoint defined in the environment.</p>"},{"location":"reference/libs/python/clients/resources/py-mongo/#example","title":"Example","text":"<pre><code>from pymongo_helper import get_mongo_client\n\n# Get the MongoDB client\nclient = get_mongo_client()\nprint(client.list_database_names())\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-mongo/#drop_database","title":"drop_database","text":"<p>The <code>drop_database</code> function drops the specified database from the MongoDB server.</p>"},{"location":"reference/libs/python/clients/resources/py-mongo/#example_1","title":"Example","text":"<pre><code>from pymongo_helper import drop_database\n\n# Drop the database named \"test_db\"\ndrop_database(\"test_db\")\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-mongo/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-clients-resources-py-mongo\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-clients-resources-py-mongo --with dev\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-rabbitmq/","title":"py-rabbitmq","text":"<p>A Python library for interacting with RabbitMQ, providing easy-to-use producer and consumer classes with robust connection handling.</p>"},{"location":"reference/libs/python/clients/resources/py-rabbitmq/#features","title":"Features","text":"<ul> <li>Easy-to-use producer and consumer classes for RabbitMQ.</li> <li>Robust connection handling with automatic retries.</li> <li>Support for declaring exchanges and queues.</li> <li>Methods for purging and deleting queues.</li> <li>Timeout handling for consumer operations.</li> </ul>"},{"location":"reference/libs/python/clients/resources/py-rabbitmq/#installation","title":"Installation","text":"<p>To install the <code>py-rabbitmq</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-clients-resources-py-rabbitmq --local\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-rabbitmq/#usage","title":"Usage","text":""},{"location":"reference/libs/python/clients/resources/py-rabbitmq/#rabbitmqproducer","title":"RabbitMQProducer","text":"<p>The <code>RabbitMQProducer</code> class extends <code>BaseRabbitMQ</code> and provides methods to send messages to a RabbitMQ exchange.</p>"},{"location":"reference/libs/python/clients/resources/py-rabbitmq/#example","title":"Example","text":"<pre><code>from pyrabbitmq.producer import RabbitMQProducer\nimport asyncio\n\nasync def main():\n    producer = RabbitMQProducer()\n    await producer.connect()\n    await producer.send_message('my_exchange', 'routing_key', 'Hello, World!')\n    await producer.close_connection()\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-rabbitmq/#rabbitmqconsumer","title":"RabbitMQConsumer","text":"<p>The <code>RabbitMQConsumer</code> class extends <code>BaseRabbitMQ</code> and provides methods to listen to a RabbitMQ queue and process messages with a callback function.</p>"},{"location":"reference/libs/python/clients/resources/py-rabbitmq/#example_1","title":"Example","text":"<pre><code>from pyrabbitmq.consumer import RabbitMQConsumer\nimport asyncio\nimport aio_pika\n\nasync def callback(message: aio_pika.IncomingMessage):\n    print(\"Received message:\", message.body.decode())\n\nasync def main():\n    consumer = RabbitMQConsumer()\n    await consumer.connect()\n    channel = await consumer.create_channel()\n    queue = await channel.declare_queue('my_queue', durable=True)\n    await consumer.listen(queue, callback, timeout=10)\n    await consumer.close_connection()\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/clients/resources/py-rabbitmq/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-clients-resources-py-rabbitmq\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-clients-resources-py-rabbitmq --with dev\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/config-vault/","title":"config-vault/dtos","text":""},{"location":"reference/libs/python/ddd/dtos/config-vault/#overview","title":"Overview","text":"<p><code>config-vault/dtos</code> is a Python library that provides Data Transfer Objects (DTOs) for managing configuration data within a Domain-Driven Design (DDD) context. This library defines structured data formats to facilitate the transfer of configuration data between different layers and services in a clean and efficient manner.</p>"},{"location":"reference/libs/python/ddd/dtos/config-vault/#features","title":"Features","text":"<ul> <li>ConfigDTO: Represents configuration data, including active status, service, source, provider, dependencies, version ID, and timestamps.</li> <li>JobDependenciesDTO: Represents job dependencies, specifying the service and source.</li> </ul>"},{"location":"reference/libs/python/ddd/dtos/config-vault/#installation","title":"Installation","text":"<p>To install the <code>config-vault</code> dto library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-ddd-dtos-config-vault --local\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/config-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/python/ddd/dtos/config-vault/#configdto","title":"ConfigDTO","text":"<p><code>ConfigDTO</code> is a data class that represents configuration data. It includes fields for active status, service, source, provider, dependencies, version ID, and timestamps.</p> <pre><code>from dto_config_vault.output import ConfigDTO\nfrom dto_config_vault.shared import JobDependenciesDTO, JobParametersDTO\n\ndependencies = [\n    JobDependenciesDTO(service=\"dep-service\", source=\"dep-source\")\n]\n\njob_parameters = JobParametersDTO(\n    parser_module=\"paser\"\n)\n\nconfig = ConfigDTO(\n    config_id=\"123\",\n    active=True,\n    service=\"test-service\",\n    source=\"test-source\",\n    provider=\"provider\",\n    depends_on=dependencies,\n    job_parameters=job_parameters,\n    config_version_id=\"xyz123\",\n    created_at=\"2024-02-01 00:00:00\",\n    updated_at=\"2024-02-01 00:00:00\"\n)\n\nprint(config)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/config-vault/#jobdependenciesdto","title":"JobDependenciesDTO","text":"<p><code>JobDependenciesDTO</code> is a data class that represents job dependencies, specifying the service and source.</p> <pre><code>from dto_config_vault.output import JobDependenciesDTO\n\ndependency = JobDependenciesDTO(\n    service=\"dep-service\",\n    source=\"dep-source\"\n)\n\nprint(dependency)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/config-vault/#_1","title":"config-vault/dtos","text":"<pre><code>from dto_config_vault.shared import JobParametersDTO\n\njob_parameters = JobParametersDTO(\n    parser_module=\"paser\"\n)\n\nprint(job_parameters)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/events-router/","title":"events-router/dtos","text":"<p><code>events-router/dtos</code> is a Python library that provides Data Transfer Objects (DTOs) for managing event routing data within a Domain-Driven Design (DDD) context. This library defines structured data formats to facilitate the transfer of event routing data between different layers and services in a clean and efficient manner.</p>"},{"location":"reference/libs/python/ddd/dtos/events-router/#features","title":"Features","text":"<ul> <li>ErrMsgDTO: Represents error message data, including the error, listener tag, and message.</li> <li>ProcessOrderDTO: Represents order processing data, including order ID, processing ID, service, source, provider, stage, input ID, and data.</li> <li>InputMetadataDTO: Represents input metadata information.</li> <li>OutputMetadataDTO: Represents output metadata information.</li> <li>MetadataDTO: Represents comprehensive metadata including provider, service, source, processing ID, config ID, input metadata, and output metadata.</li> <li>StatusDTO: Represents status information including code and detail.</li> <li>ServiceFeedBackDTO: Represents service feedback including data, metadata, and status.</li> </ul>"},{"location":"reference/libs/python/ddd/dtos/events-router/#installation","title":"Installation","text":"<p>To install the <code>events-router</code> DTO library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-ddd-dtos-events-router --local\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/events-router/#usage","title":"Usage","text":""},{"location":"reference/libs/python/ddd/dtos/events-router/#errmsgdto","title":"ErrMsgDTO","text":"<p><code>ErrMsgDTO</code> is a data class that represents error message data, including the error, listener tag, and message.</p> <pre><code>from dto_events_router.input import ErrMsgDTO\n\nerror_message = ErrMsgDTO(\n    err=Exception(\"An error occurred\"),\n    listener_tag=\"listener-1\",\n    msg=b\"Error message\"\n)\n\nprint(error_message)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/events-router/#processorderdto","title":"ProcessOrderDTO","text":"<p><code>ProcessOrderDTO</code> is a data class that represents order processing data. It includes fields for order ID, processing ID, service, source, provider, stage, input ID, and data.</p> <pre><code>from dto_events_router.output import ProcessOrderDTO\n\norder_data = {\n    \"key\": \"value\"\n}\n\nprocess_order = ProcessOrderDTO(\n    order_id=\"order-id\",\n    processing_id=\"processing-id\",\n    service=\"test-service\",\n    source=\"test-source\",\n    provider=\"provider\",\n    stage=\"stage-1\",\n    input_id=\"input-id\",\n    data=order_data\n)\n\nprint(process_order)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/events-router/#inputmetadatadto","title":"InputMetadataDTO","text":"<p><code>InputMetadataDTO</code> is a data class that represents input metadata information.</p> <pre><code>from dto_events_router.input import InputMetadataDTO\n\ninput_metadata = InputMetadataDTO(\n    input_id=\"input-id\",\n    schema_version_id=\"schema-version-id\",\n    processing_order_id=\"processing-order-id\"\n)\n\nprint(input_metadata)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/events-router/#outputmetadatadto","title":"OutputMetadataDTO","text":"<p><code>OutputMetadataDTO</code> is a data class that represents output metadata information.</p> <pre><code>from dto_events_router.input import OutputMetadataDTO\n\noutput_metadata = OutputMetadataDTO(\n    schema_version_id=\"schema-version-id\"\n)\n\nprint(output_metadata)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/events-router/#metadatadto","title":"MetadataDTO","text":"<p><code>MetadataDTO</code> is a data class that represents comprehensive metadata including provider, service, source, processing ID, config ID, input metadata, and output metadata.</p> <pre><code>from dto_events_router.input import MetadataDTO, InputMetadataDTO, OutputMetadataDTO\n\ninput_metadata = InputMetadataDTO(\n    input_id=\"input-id\",\n    schema_version_id=\"schema-version-id\",\n    processing_order_id=\"processing-order-id\"\n)\n\noutput_metadata = OutputMetadataDTO(\n    schema_version_id=\"schema-version-id\"\n)\n\nmetadata = MetadataDTO(\n    provider=\"test-provider\",\n    service=\"test-service\",\n    source=\"test-source\",\n    processing_id=\"processing-id\",\n    config_id=\"config-id\",\n    input_metadata=input_metadata,\n    output_metadata=output_metadata\n)\n\nprint(metadata)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/events-router/#statusdto","title":"StatusDTO","text":"<p><code>StatusDTO</code> is a data class that represents status information including code and detail.</p> <pre><code>from dto_events_router.input import StatusDTO\n\nstatus = StatusDTO(\n    code=\"200\",\n    detail=\"Success\"\n)\n\nprint(status)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/events-router/#servicefeedbackdto","title":"ServiceFeedBackDTO","text":"<p><code>ServiceFeedBackDTO</code> is a data class that represents service feedback including data, metadata, and status.</p> <pre><code>from dto_events_router.input import ServiceFeedBackDTO, MetadataDTO, InputMetadataDTO, OutputMetadataDTO, StatusDTO\n\ninput_metadata = InputMetadataDTO(\n    input_id=\"input-id\",\n    schema_version_id=\"schema-version-id\",\n    processing_order_id=\"processing-order-id\"\n)\n\noutput_metadata = OutputMetadataDTO(\n    schema_version_id=\"schema-version-id\"\n)\n\nmetadata = MetadataDTO(\n    provider=\"test-provider\",\n    service=\"test-service\",\n    source=\"test-source\",\n    processing_id=\"processing-id\",\n    config_id=\"config-id\",\n    input_metadata=input_metadata,\n    output_metadata=output_metadata\n)\n\nstatus = StatusDTO(\n    code=\"200\",\n    detail=\"Success\"\n)\n\nservice_feedback = ServiceFeedBackDTO(\n    data={\"key\": \"value\"},\n    metadata=metadata,\n    status=status\n)\n\nprint(service_feedback)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/events-router/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-ddd-dtos-events-router\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-ddd-dtos-events-router --with dev\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/schema-vault/","title":"schema-vault/dtos","text":""},{"location":"reference/libs/python/ddd/dtos/schema-vault/#overview","title":"Overview","text":"<p><code>schema-vault/dtos</code> is a Python library that provides Data Transfer Objects (DTOs) for managing schema data within a Domain-Driven Design (DDD) context. This library defines structured data formats to facilitate the transfer of schema data between different layers and services in a clean and efficient manner.</p>"},{"location":"reference/libs/python/ddd/dtos/schema-vault/#features","title":"Features","text":"<ul> <li>SchemaDTO: Represents schema configuration data, including service, source, provider, schema type, JSON schema, version ID, and timestamps.</li> <li>SchemaDataDTO: Represents schema data, specifying the service, source, provider, schema type, and actual data.</li> <li>JsonSchemaDTO: Represents the JSON schema, including required fields, properties, and type.</li> </ul>"},{"location":"reference/libs/python/ddd/dtos/schema-vault/#installation","title":"Installation","text":"<p>To install the <code>schema-vault</code> DTO library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-ddd-dtos-schema-vault --local\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/schema-vault/#usage","title":"Usage","text":""},{"location":"reference/libs/python/ddd/dtos/schema-vault/#schemadto","title":"SchemaDTO","text":"<p><code>SchemaDTO</code> is a data class that represents schema configuration data. It includes fields for service, source, provider, schema type, JSON schema, version ID, and timestamps.</p> <pre><code>from dto_schema_vault.output import SchemaDTO, JsonSchemaDTO\n\njson_schema = JsonSchemaDTO(\n    required=[\"field\"],\n    properties={\n        \"field\": {\"type\": \"string\"}\n    },\n    json_type=\"object\"\n)\n\nschema = SchemaDTO(\n    schema_id=\"schema-id\",\n    service=\"test-service\",\n    source=\"test-source\",\n    provider=\"provider\",\n    schema_type=\"type\",\n    json_schema=json_schema,\n    schema_version_id=\"schema-version-id\",\n    created_at=\"2024-02-01 00:00:00\",\n    updated_at=\"2024-02-01 00:00:00\"\n)\n\nprint(schema)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/schema-vault/#schemadatadto","title":"SchemaDataDTO","text":"<p><code>SchemaDataDTO</code> is a data class that represents schema data, specifying the service, source, provider, schema type, and actual data.</p> <pre><code>from dto_schema_vault.output import SchemaDataDTO\n\nschema_data = SchemaDataDTO(\n    service=\"test-service\",\n    source=\"test-source\",\n    provider=\"provider\",\n    schema_type=\"type\",\n    data={\n        \"field\": \"value\"\n    }\n)\n\nprint(schema_data)\n</code></pre>"},{"location":"reference/libs/python/ddd/dtos/schema-vault/#jsonschemadto","title":"JsonSchemaDTO","text":"<p><code>JsonSchemaDTO</code> is a data class that represents the JSON schema, including required fields, properties, and type.</p> <pre><code>from dto_schema_vault.output import JsonSchemaDTO\n\njson_schema = JsonSchemaDTO(\n    required=[\"field\"],\n    properties={\n        \"field\": {\"type\": \"string\"}\n    },\n    json_type=\"object\"\n)\n\nprint(json_schema)\n</code></pre>"},{"location":"reference/libs/python/ddd/shared/config-loader/","title":"config-loader","text":"<p><code>config-loader</code> is a Python library that provides functionality for loading configurations from a configuration handler API client. This library is designed to facilitate the fetching and managing of configuration data for different services and providers in a clean and efficient manner.</p>"},{"location":"reference/libs/python/ddd/shared/config-loader/#features","title":"Features","text":"<ul> <li>ConfigLoader: Class to load configurations from the config handler API client.</li> <li>fetch_configs: Function to fetch configurations for a given service and provider.</li> </ul>"},{"location":"reference/libs/python/ddd/shared/config-loader/#installation","title":"Installation","text":"<p>To install the <code>config-loader</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-ddd-shared-config-loader --local\n</code></pre>"},{"location":"reference/libs/python/ddd/shared/config-loader/#usage","title":"Usage","text":""},{"location":"reference/libs/python/ddd/shared/config-loader/#configloader","title":"ConfigLoader","text":"<p>The <code>ConfigLoader</code> class provides methods to fetch and register configurations for different services and providers.</p>"},{"location":"reference/libs/python/ddd/shared/config-loader/#example","title":"Example","text":"<pre><code>from config_loader.loader import ConfigLoader\nimport asyncio\n\nasync def main():\n    config_loader = ConfigLoader()\n    configs = await config_loader.fetch_configs_for_service(\"example_service\", \"example_provider\")\n    print(configs)\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/ddd/shared/config-loader/#methods","title":"Methods","text":""},{"location":"reference/libs/python/ddd/shared/config-loader/#fetch_configs_for_serviceservice_name-str-provider-str-dictstr-configdto","title":"<code>fetch_configs_for_service(service_name: str, provider: str) -&gt; Dict[str, ConfigDTO]</code>","text":"<p>Fetches configurations for a specific service and provider.</p> <pre><code>configs = await config_loader.fetch_configs_for_service(\"example_service\", \"example_provider\")\nprint(configs)\n</code></pre>"},{"location":"reference/libs/python/ddd/shared/config-loader/#register_configconfig_id-str-config-configdto-none","title":"<code>register_config(config_id: str, config: ConfigDTO) -&gt; None</code>","text":"<p>Registers a configuration in the <code>mapping_config</code> dictionary.</p> <pre><code>config_loader.register_config(\"config_id\", config)\n</code></pre>"},{"location":"reference/libs/python/ddd/shared/config-loader/#fetch_configs","title":"fetch_configs","text":"<p>The <code>fetch_configs</code> function provides a simple way to fetch configurations for a given service and provider.</p>"},{"location":"reference/libs/python/ddd/shared/config-loader/#example_1","title":"Example","text":"<pre><code>from config_loader.loader import fetch_configs\nimport asyncio\n\nasync def main():\n    configs = await fetch_configs(\"example_service\", \"example_provider\")\n    print(configs)\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/ddd/shared/config-loader/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-ddd-shared-config-loader\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-ddd-shared-config-loader --with dev\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/shared/job-handler/","title":"job-handler","text":"<p>A Python library for dynamically importing and executing job handlers based on configuration data.</p>"},{"location":"reference/libs/python/ddd/usecases/shared/job-handler/#features","title":"Features","text":"<ul> <li>Dynamically imports job parser modules.</li> <li>Executes jobs using the imported job parsers.</li> <li>Handles configuration and metadata for job execution.</li> </ul>"},{"location":"reference/libs/python/ddd/usecases/shared/job-handler/#installation","title":"Installation","text":"<p>To install the <code>job-handler</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-ddd-usecases-shared-job-handler --local\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/shared/job-handler/#usage","title":"Usage","text":""},{"location":"reference/libs/python/ddd/usecases/shared/job-handler/#importer","title":"Importer","text":"<p>The <code>Importer</code> class handles the dynamic import of job parser modules.</p>"},{"location":"reference/libs/python/ddd/usecases/shared/job-handler/#example","title":"Example","text":"<pre><code>from job_handler.importer import Importer\n\n# Initialize the Importer\nimporter = Importer(job_parser=\"example_job_parser\")\n\n# Access the imported module\nmodule = importer.module\nprint(module)\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/shared/job-handler/#jobhandler","title":"JobHandler","text":"<p>The <code>JobHandler</code> class handles the execution of jobs using the imported job parser.</p>"},{"location":"reference/libs/python/ddd/usecases/shared/job-handler/#example_1","title":"Example","text":"<pre><code>from job_handler.handler import JobHandler\nfrom dto_config_vault.output import ConfigDTO\nfrom dto_events_router.input import MetadataDTO\nfrom pydebug import debug\n\n# Initialize configuration and metadata\nconfig = ConfigDTO(\n    ...\n)\nmetadata = MetadataDTO(\n    ...\n)\ndbg = debug.EnabledDebug()\n\n# Initialize the JobHandler\njob_handler = JobHandler(config=config, metadata=metadata, dbg=dbg)\n\n# Execute the job\nsource_input = ...  # Provide the input data for the job\nresult = await job_handler.execute(source_input)\nprint(result)\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/shared/job-handler/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-ddd-usecases-shared-job-handler\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-ddd-usecases-shared-job-handler --with dev\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/","title":"py-youtube","text":"<p>A Python library for downloading YouTube videos to a buffer, providing easy-to-use functions for handling YouTube video downloads.</p>"},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#features","title":"Features","text":"<ul> <li>Download YouTube videos to a buffer.</li> <li>Custom error handling for YouTube download errors.</li> </ul>"},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#installation","title":"Installation","text":"<p>To install the <code>py-youtube</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-ddd-usecases-shared-parsers-py-youtube --local\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#usage","title":"Usage","text":""},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#download-youtube-video-to-buffer","title":"Download YouTube Video to Buffer","text":"<p>The <code>download_to_buffer</code> function allows you to download a YouTube video and store it in a buffer as bytes.</p>"},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#example","title":"Example","text":"<pre><code>from pyyoutube import download_to_buffer, YoutubeDownloaderError\n\ntry:\n    video_bytes = download_to_buffer(\"https://www.youtube.com/watch?v=example_video_id\")\n    # Do something with video_bytes\nexcept YoutubeDownloaderError as e:\n    print(f\"Error downloading video: {e}\")\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#classes","title":"Classes","text":""},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#youtubedownloadererror","title":"<code>YoutubeDownloaderError</code>","text":"<p>Custom exception class for YouTube downloader errors.</p> <pre><code>from pyyoutube import YoutubeDownloaderError\n\n# Raise a custom error\nraise YoutubeDownloaderError(\"An error occurred while downloading the video\")\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#functions","title":"Functions","text":""},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#download_to_bufferurl-str-bytes","title":"<code>download_to_buffer(url: str) -&gt; bytes</code>","text":"<p>Downloads a video from the given URL to a buffer and returns its bytes.</p> <pre><code>from pyyoutube import download_to_buffer\n\nvideo_bytes = download_to_buffer(\"https://www.youtube.com/watch?v=example_video_id\")\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/shared/parsers/py-youtube/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-ddd-usecases-shared-parsers-py-youtube\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-ddd-usecases-shared-parsers-py-youtube --with dev\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/youtube-downloader/","title":"youtube-downloader","text":"<p>A Python library for downloading YouTube videos, processing them, and uploading them to MinIO, providing an easy-to-use interface for handling video download and upload workflows.</p>"},{"location":"reference/libs/python/ddd/usecases/youtube-downloader/#features","title":"Features","text":"<ul> <li>Download YouTube videos.</li> <li>Upload videos to MinIO.</li> <li>Structured handling of metadata and status.</li> </ul>"},{"location":"reference/libs/python/ddd/usecases/youtube-downloader/#installation","title":"Installation","text":"<p>To install the <code>python-ddd-usecases-youtube-downloader</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-ddd-usecases-youtube-downloader --local\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/youtube-downloader/#usage","title":"Usage","text":""},{"location":"reference/libs/python/ddd/usecases/youtube-downloader/#job","title":"Job","text":"<p>The <code>Job</code> class provides methods to download YouTube videos, upload them to MinIO, and manage metadata and status.</p>"},{"location":"reference/libs/python/ddd/usecases/youtube-downloader/#example","title":"Example","text":"<pre><code>from youtube_downloader.job import Job\nfrom dto_config_vault.output import ConfigDTO\nfrom dto_events_router.input import MetadataDTO\nfrom pydebug import debug\n\n# Initialize the job\nconfig = ConfigDTO(...)  # Provide necessary configuration\nmetadata = MetadataDTO(...)  # Provide necessary metadata\ndbg = debug.EnabledDebug(...)  # Initialize debug\n\njob = Job(config, metadata, dbg)\n\n# Run the job\ninput_data = ...  # Provide necessary input data\nresult = await job.run(input_data)\nprint(result)\n</code></pre>"},{"location":"reference/libs/python/ddd/usecases/youtube-downloader/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-ddd-usecases-youtube-downloader\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-ddd-usecases-youtube-downloader --with dev\n</code></pre>"},{"location":"reference/libs/python/server/amqp-listener/","title":"amqp-listener","text":"<p>A Python library for managing RabbitMQ consumers, allowing you to listen for messages and process them using event controllers and job handlers.</p>"},{"location":"reference/libs/python/server/amqp-listener/#features","title":"Features","text":"<ul> <li>Asynchronous RabbitMQ consumer management.</li> <li>Configurable event controllers and job handlers.</li> <li>Easy integration with service discovery and debugging tools.</li> </ul>"},{"location":"reference/libs/python/server/amqp-listener/#installation","title":"Installation","text":"<p>To install the <code>-amqp-listener</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-server-amqp-listener --local\n</code></pre>"},{"location":"reference/libs/python/server/amqp-listener/#usage","title":"Usage","text":""},{"location":"reference/libs/python/server/amqp-listener/#consumer","title":"Consumer","text":"<p>The <code>Consumer</code> class provides methods to manage RabbitMQ consumer operations.</p>"},{"location":"reference/libs/python/server/amqp-listener/#example","title":"Example","text":"<pre><code>import asyncio\nfrom dto_config_vault.output import ConfigDTO\nfrom pyrabbitmq.consumer import RabbitMQConsumer\nfrom pysd.sd import ServiceDiscovery\nfrom pydebug import debug\nfrom amqp_listener import Consumer, EventConsumer\n\nasync def main():\n    sd = ServiceDiscovery()\n    rmq_consumer = RabbitMQConsumer()\n    config = ConfigDTO(provider=\"provider\", service=\"service\", source=\"source\")\n    queue_active_jobs = asyncio.Queue()\n    dbg = debug.EnabledDebug()\n\n    consumer = EventConsumer(sd, rmq_consumer, config, queue_active_jobs, dbg)\n    await consumer.run(event_controller=YourEventControllerClass, job_handler=your_job_handler_function)\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/server/amqp-listener/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-server-amqp-listener\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-server-amqp-listener --with dev\n</code></pre>"},{"location":"reference/libs/python/server/event-controller/","title":"event-controller","text":"<p>A Python library for managing event processing and handling using RabbitMQ. This library allows you to set up controllers to handle events, validate schemas, and manage job processing.</p>"},{"location":"reference/libs/python/server/event-controller/#features","title":"Features","text":"<ul> <li>Asynchronous RabbitMQ message handling.</li> <li>Schema validation using schema vault client.</li> <li>Configurable event controllers and job handlers.</li> <li>Easy integration with service discovery and debugging tools.</li> </ul>"},{"location":"reference/libs/python/server/event-controller/#installation","title":"Installation","text":"<p>To install the <code>event-controller</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-server-event-controller --local\n</code></pre>"},{"location":"reference/libs/python/server/event-controller/#usage","title":"Usage","text":""},{"location":"reference/libs/python/server/event-controller/#controller","title":"Controller","text":"<p>The <code>Controller</code> class provides methods to handle event processing, including reading messages, validating schemas, and dispatching jobs.</p>"},{"location":"reference/libs/python/server/event-controller/#example","title":"Example","text":"<pre><code>import asyncio\nfrom dto_config_vault.output import ConfigDTO\nfrom pyrabbitmq.producer import RabbitMQProducer\nfrom pysd.sd import ServiceDiscovery\nfrom pydebug import debug\nfrom event_controller import EventController\n\nasync def main():\n    sd = ServiceDiscovery()\n    config = ConfigDTO(provider=\"provider\", service=\"service\", source=\"source\")\n    queue_active_jobs = asyncio.Queue()\n    dbg = debug.EnabledDebug()\n    job_handler = YourJobHandlerFunction\n\n    event_controller = EventController(sd, config, job_handler, queue_active_jobs, dbg)\n    await event_controller.run(message)\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/server/event-controller/#eventcontroller","title":"EventController","text":"<p>The <code>EventController</code> class extends <code>Controller</code> for specific event processing.</p>"},{"location":"reference/libs/python/server/event-controller/#eventcontroller__init__self-sd-servicediscovery-config-configdto-job_handler-callable-queue_active_jobs-asyncioqueue-dbg-uniondebugenableddebug-debugdisableddebug","title":"<code>EventController.__init__(self, sd: ServiceDiscovery, config: ConfigDTO, job_handler: callable, queue_active_jobs: asyncio.Queue, dbg: Union[debug.EnabledDebug, debug.DisabledDebug])</code>","text":"<p>Initializes the <code>EventController</code> instance.</p> <pre><code>event_controller = EventController(sd, config, job_handler, queue_active_jobs, dbg)\n</code></pre>"},{"location":"reference/libs/python/server/event-controller/#eventcontrollerrunself-message-none","title":"<code>EventController.run(self, message) -&gt; None</code>","text":"<p>Runs the event controller to process the incoming message.</p> <pre><code>await event_controller.run(message)\n</code></pre>"},{"location":"reference/libs/python/server/event-controller/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-server-event-controller\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-server-event-controller --with dev\n</code></pre>"},{"location":"reference/libs/python/service-discovery/","title":"service-discovery","text":""},{"location":"reference/libs/python/service-discovery/#overview","title":"Overview","text":"<p><code>service-discovery</code> is a Python library designed to handle service discovery using environment variables. It provides a structured way to access service endpoints and credentials, ensuring that applications can dynamically discover and interact with required services.</p>"},{"location":"reference/libs/python/service-discovery/#features","title":"Features","text":"<ul> <li>Service Endpoints: Retrieve endpoints for services such as RabbitMQ, Minio, Config Vault, and Schema Vault.</li> <li>Error Handling: Custom exceptions for unrecoverable errors and service availability errors.</li> <li>Environment Variable Management: Access and manage environment variables for service discovery.</li> </ul>"},{"location":"reference/libs/python/service-discovery/#installation","title":"Installation","text":"<p>To install the <code>service-discovery</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-service-discovery --local\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#usage","title":"Usage","text":""},{"location":"reference/libs/python/service-discovery/#initialization","title":"Initialization","text":"<p>To create an instance of the <code>ServiceDiscovery</code> class, use the <code>new_from_env</code> function to initialize it with environment variables:</p> <pre><code>from your_module import new_from_env\n\nservice_discovery = new_from_env()\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#retrieving-service-endpoints","title":"Retrieving Service Endpoints","text":"<p>The library provides various properties to retrieve service endpoints:</p>"},{"location":"reference/libs/python/service-discovery/#config-vault-endpoint","title":"Config Vault Endpoint","text":"<pre><code>config_vault_endpoint = service_discovery.services_config_vault_endpoint\nprint(config_vault_endpoint)\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#schema-vault-endpoint","title":"Schema Vault Endpoint","text":"<pre><code>schema_vault_endpoint = service_discovery.services_schema_vault_endpoint\nprint(schema_vault_endpoint)\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#rabbitmq-endpoint","title":"RabbitMQ Endpoint","text":"<pre><code>rabbitmq_endpoint = service_discovery.rabbitmq_endpoint\nprint(rabbitmq_endpoint)\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#minio-endpoint","title":"Minio Endpoint","text":"<pre><code>minio_endpoint = service_discovery.minio_endpoint\nprint(minio_endpoint)\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#retrieving-service-credentials","title":"Retrieving Service Credentials","text":"<p>The library also allows retrieving credentials for services like Minio:</p>"},{"location":"reference/libs/python/service-discovery/#minio-access-key","title":"Minio Access Key","text":"<pre><code>minio_access_key = service_discovery.minio_access_key\nprint(minio_access_key)\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#minio-secret-key","title":"Minio Secret Key","text":"<pre><code>minio_secret_key = service_discovery.minio_secret_key\nprint(minio_secret_key)\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#error-handling","title":"Error Handling","text":"<p>The library defines custom exceptions to handle errors related to service discovery:</p>"},{"location":"reference/libs/python/service-discovery/#unrecoverableerror","title":"UnrecoverableError","text":"<pre><code>from your_module import UnrecoverableError\n\ntry:\n    # some code that may raise UnrecoverableError\n    pass\nexcept UnrecoverableError as e:\n    print(f\"Unrecoverable error occurred: {e}\")\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#serviceunavailableerror","title":"ServiceUnavailableError","text":"<pre><code>from your_module import ServiceUnavailableError\n\ntry:\n    # some code that may raise ServiceUnavailableError\n    pass\nexcept ServiceUnavailableError as e:\n    print(f\"Service unavailable: {e}\")\n</code></pre>"},{"location":"reference/libs/python/service-discovery/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx run python-service-discovery:test\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-service-discovery --with dev\n</code></pre>"},{"location":"reference/libs/python/shared/py-argparse/","title":"py-argparse","text":"<p><code>py-argparse</code> is a Python library that provides a convenient way to create an argument parser with predefined arguments for enabling debug storage and setting the debug storage directory. This library is useful for configuring command-line arguments in your applications, making it easier to enable debug storage and specify the storage directory.</p>"},{"location":"reference/libs/python/shared/py-argparse/#features","title":"Features","text":"<ul> <li>Create an argument parser with a description.</li> <li>Add arguments for enabling debug storage.</li> <li>Add arguments for setting the debug storage directory.</li> </ul>"},{"location":"reference/libs/python/shared/py-argparse/#installation","title":"Installation","text":"<p>To install the <code>py-argparse</code> library, run the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-shared-py-argparse --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-argparse/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-argparse/#creating-an-argument-parser","title":"Creating an Argument Parser","text":"<p>To create a new argument parser with predefined arguments, use the <code>new</code> function:</p> <pre><code>from pyargparse import new\n\n# Create a new argument parser\nparser = new(description=\"This is a sample argument parser\")\n\n# Parse the arguments\nargs = parser.parse_args()\n\n# Access the arguments\nprint(f\"Enable Debug Storage: {args.enable_debug_storage}\")\nprint(f\"Debug Storage Directory: {args.debug_storage_dir}\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-argparse/#example","title":"Example","text":"<p>Here is a complete example demonstrating how to use the <code>py-argparse</code> library:</p> <pre><code>from pyargparse import new\n\ndef main():\n    # Create a new argument parser with a description\n    parser = new(description=\"This is a sample argument parser for debug storage\")\n\n    # Parse the command-line arguments\n    args = parser.parse_args()\n\n    # Access and print the parsed arguments\n    print(f\"Enable Debug Storage: {args.enable_debug_storage}\")\n    print(f\"Debug Storage Directory: {args.debug_storage_dir}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"reference/libs/python/shared/py-argparse/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-shared-py-argparse\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-shared-py-argparse --with dev\n</code></pre>"},{"location":"reference/libs/python/shared/py-debug/","title":"Index","text":"<p>Sure, here is the README file for your debug library following the pattern provided:</p>"},{"location":"reference/libs/python/shared/py-debug/#py-debug","title":"py-debug","text":"<p><code>py-debug</code> is a Python library that provides functionality to enable or disable debug storage for saving responses. This library is useful for creating and managing debug storage, enabling you to save response data for debugging purposes.</p>"},{"location":"reference/libs/python/shared/py-debug/#features","title":"Features","text":"<ul> <li>Enable or disable debug storage.</li> <li>Save response data to files in a specified directory.</li> <li>Automatically manage and create directories for storing debug responses.</li> </ul>"},{"location":"reference/libs/python/shared/py-debug/#installation","title":"Installation","text":"<p>To install the <code>py-debug</code> library, run the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-shared-py-debug --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-debug/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-debug/#creating-debug-storage","title":"Creating Debug Storage","text":"<p>To create a new debug storage instance, use the <code>new</code> function:</p> <pre><code>from pydebug.debug import new\n\n# Create an enabled debug storage instance\ndebug_storage = new(debug_enabled=True, debug_dir=\"/path/to/debug/dir\")\n\n# Create a disabled debug storage instance\ndebug_storage = new(debug_enabled=False, debug_dir=\"/path/to/debug/dir\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-debug/#saving-response-data","title":"Saving Response Data","text":"<p>To save response data using the debug storage, use the <code>save_response</code> method of the <code>EnabledDebug</code> class:</p> <pre><code>from pydebug.debug import EnabledDebug\n\n# Initialize enabled debug storage\ndebug_storage = EnabledDebug(debug_dir=\"/path/to/debug/dir\")\n\n# Save response data\ndebug_storage.save_response(file_name=\"response.txt\", response_body=b\"response content\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-debug/#example","title":"Example","text":"<p>Here is a complete example demonstrating how to use the <code>py-debug</code> library:</p> <pre><code>from pydebug.debug import new\n\ndef main():\n    # Create an enabled debug storage instance\n    debug_storage = new(debug_enabled=True, debug_dir=\"/app/tests/debug/storage\")\n\n    # Save response data\n    debug_storage.save_response(file_name=\"response.txt\", response_body=b\"response content\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"reference/libs/python/shared/py-debug/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-shared-py-debug\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-shared-py-debug --with dev\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/","title":"py-log","text":"<p><code>py-log</code> is a Python library that provides functionality to set up logging using JSON format. This library is useful for configuring logging in your applications to output logs in a structured JSON format, making it easier to parse and analyze logs.</p>"},{"location":"reference/libs/python/shared/py-log/#features","title":"Features","text":"<ul> <li>Set up logging with JSON format.</li> <li>Configurable log levels.</li> <li>Option to propagate logs to the parent logger.</li> </ul>"},{"location":"reference/libs/python/shared/py-log/#installation","title":"Installation","text":"<pre><code>npx nx run &lt;PROJECT&gt;:add --name python-shared-py-log --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-log/#setting-up-logging","title":"Setting Up Logging","text":"<p>To set up logging with JSON format, use the <code>setup_logging</code> function:</p> <pre><code>from pylog import setup_logging\n\nlogger = setup_logging(module_name=\"my_module\")\n\nlogger.info(\"This is an info message\")\nlogger.error(\"This is an error message\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/#configuring-log-level","title":"Configuring Log Level","text":"<p>You can configure the log level by setting the <code>LOG_LEVEL</code> environment variable or by passing the <code>log_level</code> argument to the <code>setup_logging</code> function:</p> <pre><code>import os\nfrom pylog import setup_logging\n\nos.environ[\"LOG_LEVEL\"] = \"DEBUG\"\nlogger = setup_logging(module_name=\"my_module\")\n\nlogger.debug(\"This is a debug message\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/#propagating-logs","title":"Propagating Logs","text":"<p>By default, logs are not propagated to the parent logger. You can enable log propagation by setting the <code>propagate</code> argument to <code>True</code>:</p> <pre><code>from pylog import setup_logging\n\nlogger = setup_logging(module_name=\"my_module\", propagate=True)\n\nlogger.info(\"This message will be propagated to the parent logger\")\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/#example","title":"Example","text":"<p>Here is a complete example demonstrating how to use the <code>py-log</code> library:</p> <pre><code>import os\nfrom pylog import setup_logging\n\ndef main():\n    # Set the log level through environment variable\n    os.environ[\"LOG_LEVEL\"] = \"DEBUG\"\n\n    # Set up logging for the module\n    logger = setup_logging(module_name=\"example_module\")\n\n    # Log messages with different log levels\n    logger.debug(\"Debugging information\")\n    logger.info(\"Informational message\")\n    logger.warning(\"Warning message\")\n    logger.error(\"Error message\")\n    logger.critical(\"Critical message\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"reference/libs/python/shared/py-log/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-shared-py-log\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-shared-py-log --with dev\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/","title":"py-request","text":"<p><code>py-request</code> is a Python library providing an asynchronous HTTP client with built-in rate limiting. This library helps you make HTTP requests while ensuring that you do not exceed a maximum number of requests within a specified time period.</p>"},{"location":"reference/libs/python/shared/py-request/#features","title":"Features","text":"<ul> <li>Asynchronous HTTP requests using <code>httpx</code></li> <li>Configurable rate limiting to prevent exceeding a specified number of requests in a given time period</li> <li>Supports various HTTP methods (GET, POST, etc.)</li> </ul>"},{"location":"reference/libs/python/shared/py-request/#installation","title":"Installation","text":"<pre><code>npx nx run &lt;PROJECT&gt;:add --name python-shared-py-request --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-request/#creating-a-ratelimitedasynchttpclient","title":"Creating a RateLimitedAsyncHttpClient","text":"<pre><code>from pyrequest.async_factory import RateLimitedAsyncHttpClient\n\n# Initialize the client with a base URL, maximum number of calls, and time period (in seconds)\nclient = RateLimitedAsyncHttpClient(base_url=\"https://example.com\", max_calls=5, period=60)\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/#making-requests","title":"Making Requests","text":"<p>You can make asynchronous HTTP requests using the <code>make_request</code> method. The method supports different HTTP methods such as GET and POST.</p>"},{"location":"reference/libs/python/shared/py-request/#get-request","title":"GET Request","text":"<pre><code>import asyncio\n\nasync def main():\n    response = await client.make_request(\"GET\", \"/api/resource\")\n    print(response)\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/#post-request","title":"POST Request","text":"<pre><code>import asyncio\n\nasync def main():\n    data = {\"key\": \"value\"}\n    response = await client.make_request(\"POST\", \"/api/resource\", data=data)\n    print(response)\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/#handling-rate-limiting","title":"Handling Rate Limiting","text":"<p>The <code>RateLimitedAsyncHttpClient</code> ensures that you do not exceed the maximum number of requests within the specified time period. If the limit is reached, it waits for the period to elapse before allowing more requests.</p>"},{"location":"reference/libs/python/shared/py-request/#example","title":"Example","text":"<p>Here is a complete example demonstrating how to use the <code>RateLimitedAsyncHttpClient</code>:</p> <pre><code>import asyncio\nfrom pyrequest.async_factory import RateLimitedAsyncHttpClient\n\nasync def main():\n    client = RateLimitedAsyncHttpClient(base_url=\"https://example.com\", max_calls=5, period=60)\n\n    # Make a GET request\n    response = await client.make_request(\"GET\", \"/api/resource\")\n    print(\"GET response:\", response)\n\n    # Make a POST request\n    data = {\"key\": \"value\"}\n    response = await client.make_request(\"POST\", \"/api/resource\", data=data)\n    print(\"POST response:\", response)\n\n    # Simulate rate limiting by making multiple requests\n    tasks = [client.make_request(\"GET\", \"/api/resource\") for _ in range(10)]\n    responses = await asyncio.gather(*tasks, return_exceptions=True)\n    for i, res in enumerate(responses):\n        print(f\"Response {i+1}:\", res)\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/shared/py-request/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-shared-py-request\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-shared-py-request --with dev\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/","title":"py-serializer","text":"<p><code>py-serializer</code> is a Python library that provides functionality to serialize and deserialize dataclass objects to and from JSON and dictionaries. This library is useful for converting dataclass instances to JSON strings or dictionaries for easy storage or transmission, and vice versa.</p>"},{"location":"reference/libs/python/shared/py-serializer/#features","title":"Features","text":"<ul> <li>Serialize dataclass objects to JSON strings.</li> <li>Serialize dataclass objects to dictionaries.</li> <li>Deserialize dictionaries to dataclass objects.</li> <li>Supports nested dataclass objects.</li> </ul>"},{"location":"reference/libs/python/shared/py-serializer/#installation","title":"Installation","text":"<pre><code>npx nx run &lt;PROJECT&gt;:add --name python-shared-py-serializer --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-serializer/#creating-dataclass-objects","title":"Creating Dataclass Objects","text":"<p>First, define your dataclass objects. For example:</p> <pre><code>from dataclasses import dataclass\n\n@dataclass\nclass Address:\n    street: str\n    city: str\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    address: Address\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#serializing-to-json","title":"Serializing to JSON","text":"<p>To serialize a dataclass object to a JSON string, use the <code>serialize_to_json</code> function:</p> <pre><code>from pyserializer.serializer import serialize_to_json\n\naddress = Address(street=\"123 Main St\", city=\"Anytown\")\nperson = Person(name=\"John Doe\", age=30, address=address)\n\njson_str = serialize_to_json(person)\nprint(json_str)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#serializing-to-dictionary","title":"Serializing to Dictionary","text":"<p>To serialize a dataclass object to a dictionary, use the <code>serialize_to_dict</code> function:</p> <pre><code>from pyserializer.serializer import serialize_to_dict\n\ndict_obj = serialize_to_dict(person)\nprint(dict_obj)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#deserializing-from-dictionary","title":"Deserializing from Dictionary","text":"<p>To deserialize a dictionary to a dataclass object, use the <code>serialize_to_dataclass</code> function:</p> <pre><code>from pyserializer.serializer import serialize_to_dataclass\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"123 Main St\",\n        \"city\": \"Anytown\"\n    }\n}\n\nperson_obj = serialize_to_dataclass(data, Person)\nprint(person_obj)\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#example","title":"Example","text":"<p>Here is a complete example demonstrating how to use the <code>py-serializer</code> library:</p> <pre><code>from dataclasses import dataclass\nfrom dataclass_serializer import serialize_to_json, serialize_to_dict, serialize_to_dataclass\n\n@dataclass\nclass Address:\n    street: str\n    city: str\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n    address: Address\n\ndef main():\n    address = Address(street=\"123 Main St\", city=\"Anytown\")\n    person = Person(name=\"John Doe\", age=30, address=address)\n\n    # Serialize to JSON\n    json_str = serialize_to_json(person)\n    print(\"Serialized to JSON:\", json_str)\n\n    # Serialize to dictionary\n    dict_obj = serialize_to_dict(person)\n    print(\"Serialized to dict:\", dict_obj)\n\n    # Deserialize from dictionary\n    data = {\n        \"name\": \"John Doe\",\n        \"age\": 30,\n        \"address\": {\n            \"street\": \"123 Main St\",\n            \"city\": \"Anytown\"\n        }\n    }\n    person_obj = serialize_to_dataclass(data, Person)\n    print(\"Deserialized to dataclass:\", person_obj)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"reference/libs/python/shared/py-serializer/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-shared-py-serializer\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-shared-py-serializer --with dev\n</code></pre>"},{"location":"reference/libs/python/shared/py-warlock/","title":"py-warlock","text":"<p><code>py-warlock</code> is a Python library that provides functionality to deserialize data from dictionaries into dataclass objects using schemas defined with the Warlock library. This library is useful for converting dictionaries into dataclass instances for easy manipulation and usage within Python applications.</p>"},{"location":"reference/libs/python/shared/py-warlock/#features","title":"Features","text":"<ul> <li>Deserialize dictionaries to dataclass objects.</li> <li>Supports schema definitions using Warlock.</li> <li>Easy integration with existing Python applications.</li> </ul>"},{"location":"reference/libs/python/shared/py-warlock/#installation","title":"Installation","text":"<p>To install the library, run:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-shared-py-warlock --local\n</code></pre>"},{"location":"reference/libs/python/shared/py-warlock/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/py-warlock/#defining-schemas-and-deserializing-data","title":"Defining Schemas and Deserializing Data","text":"<p>First, define your schema using Warlock. For example:</p> <pre><code>import warlock\n\nschema = {\n    \"name\": \"Person\",\n    \"properties\": {\n        \"name\": {\"type\": \"string\"},\n        \"age\": {\"type\": \"integer\"},\n        \"address\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"street\": {\"type\": \"string\"},\n                \"city\": {\"type\": \"string\"}\n            }\n        }\n    }\n}\n\nPerson = warlock.model_factory(schema)\n</code></pre>"},{"location":"reference/libs/python/shared/py-warlock/#deserializing-from-dictionary","title":"Deserializing from Dictionary","text":"<p>To deserialize a dictionary to a dataclass object, use the <code>serialize_to_dataclass</code> function:</p> <pre><code>from pywarlock import serialize_to_dataclass\n\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"123 Main St\",\n        \"city\": \"Anytown\"\n    }\n}\n\nperson_obj = serialize_to_dataclass(schema, data)\nprint(person_obj)\n</code></pre>"},{"location":"reference/libs/python/shared/py-warlock/#example","title":"Example","text":"<p>Here is a complete example demonstrating how to use the <code>py-warlock</code> library:</p> <pre><code>import warlock\nfrom typing import Dict\nfrom pywarlock import serialize_to_dataclass\n\n# Define the schema\nschema = {\n    \"name\": \"Person\",\n    \"properties\": {\n        \"name\": {\"type\": \"string\"},\n        \"age\": {\"type\": \"integer\"},\n        \"address\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"street\": {\"type\": \"string\"},\n                \"city\": {\"type\": \"string\"}\n            }\n        }\n    }\n}\n\n# Create the dataclass model using Warlock\nPerson = warlock.model_factory(schema)\n\n# Sample input data\ndata = {\n    \"name\": \"John Doe\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"123 Main St\",\n        \"city\": \"Anytown\"\n    }\n}\n\n# Deserialize the data into a dataclass object\nperson_obj = serialize_to_dataclass(schema, data)\nprint(\"Deserialized to dataclass:\", person_obj)\n</code></pre>"},{"location":"reference/libs/python/shared/py-warlock/#running-tests","title":"Running Tests","text":"<p>To run the tests, use pytest:</p> <pre><code>npx nx test python-shared-py-warlock\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-shared-py-warlock --with dev\n</code></pre>"},{"location":"reference/libs/python/shared/testlib/fixtures/base-fixture/","title":"base-fixture","text":"<p>A Python library providing base fixtures for testing services. This library is designed to set up and tear down test environments asynchronously, push jobs to queues, and verify job results.</p>"},{"location":"reference/libs/python/shared/testlib/fixtures/base-fixture/#features","title":"Features","text":"<ul> <li>Asynchronous setup and teardown of test environments.</li> <li>Pushing jobs to queues and retrieving results.</li> <li>Integration with unittest for testing.</li> </ul>"},{"location":"reference/libs/python/shared/testlib/fixtures/base-fixture/#installation","title":"Installation","text":"<p>To install the <code>python-shared-testlib-fixtures-base-fixture</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-shared-testlib-fixtures-base-fixture --local\n</code></pre>"},{"location":"reference/libs/python/shared/testlib/fixtures/base-fixture/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/testlib/fixtures/base-fixture/#basetestsfixture","title":"BaseTestsFixture","text":"<p>The <code>BaseTestsFixture</code> class provides base functionality for setting up and tearing down test environments, pushing jobs to queues, and verifying job results.</p>"},{"location":"reference/libs/python/shared/testlib/fixtures/base-fixture/#example","title":"Example","text":"<pre><code>import asyncio\nimport unittest\nfrom service_fixture.fixture import BaseTestsFixture\nfrom pylog.log import setup_logging\n\nlogger = setup_logging(__name__)\n\nclass ExampleTests(BaseTestsFixture):\n\n    async def asyncSetUp(self):\n        return await super().asyncSetUp()\n\n    async def asyncTearDown(self):\n        return await super().asyncTearDown()\n\n    async def test_example(self):\n        valid_input = {\n            \"exampleKey\": \"exampleValue\",\n        }\n        provider = \"exampleProvider\"\n        source = \"exampleSource\"\n        await self.push_job(valid_input, provider, source)\n        logger.info(\"Job pushed to queue\")\n        await self.pop_job(provider, source, 2*60)\n        self.assertFalse(self.queue.empty())\n        while not self.queue.empty():\n            result = await self.queue.get()\n            logger.info(f\"Job result: {result}\")\n            self.assertEqual(result[\"status\"][\"code\"], 200)\n            self.assertIsNotNone(result)\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>"},{"location":"reference/libs/python/shared/testlib/fixtures/service-fixture/","title":"python-shared-testlib-fixtures-service-fixture","text":"<p>A Python library providing service fixtures for testing, specifically designed for services with different application names. This library facilitates setting up and tearing down test environments for services by leveraging the <code>BaseTestsFixture</code> and mapping service names to application names.</p>"},{"location":"reference/libs/python/shared/testlib/fixtures/service-fixture/#features","title":"Features","text":"<ul> <li>Setup and teardown test environments asynchronously.</li> <li>Map service names to application names using an enum.</li> <li>Generate service process arguments dynamically based on service name.</li> </ul>"},{"location":"reference/libs/python/shared/testlib/fixtures/service-fixture/#installation","title":"Installation","text":"<p>To install the <code>python-shared-testlib-fixtures-service-fixture</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-shared-testlib-fixtures-service-fixture --local\n</code></pre>"},{"location":"reference/libs/python/shared/testlib/fixtures/service-fixture/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/testlib/fixtures/service-fixture/#servicetestsfixture","title":"ServiceTestsFixture","text":"<p>The <code>ServiceTestsFixture</code> class provides methods to set up and tear down test environments, and generate service process arguments based on the service name.</p>"},{"location":"reference/libs/python/shared/testlib/fixtures/service-fixture/#example","title":"Example","text":"<pre><code>import asyncio\nimport unittest\nimport pytest\nfrom service_fixture.fixture import ServiceTestsFixture\nfrom pylog.log import setup_logging\n\n\nlogger = setup_logging(__name__)\n\n\nclass DefaultHandlerIntegrationTests(ServiceTestsFixture):\n\n    async def asyncSetUp(self):\n        return await super().asyncSetUp()\n\n    async def asyncTearDown(self):\n        return await super().asyncTearDown()\n\n    @pytest.mark.asyncio\n    async def test_should(self):\n        ...\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>"},{"location":"reference/libs/python/shared/testlib/fixtures/service-fixture/#serviceappnamefixturemapping","title":"ServiceAppNameFixtureMapping","text":"<p>The <code>ServiceAppNameFixtureMapping</code> enum maps service names to application names.</p>"},{"location":"reference/libs/python/shared/testlib/fixtures/service-fixture/#example_1","title":"Example","text":"<pre><code>from service_fixture import ServiceAppNameFixtureMapping\n\nservice_name = \"video-downloader\"\napp_name = ServiceAppNameFixtureMapping.get_app_name(service_name)\nprint(app_name)  # Outputs: \"downloader\"\n</code></pre>"},{"location":"reference/libs/python/shared/testlib/fixtures/service-fixture/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-shared-testlib-fixtures-service-fixture\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-shared-testlib-fixtures-service-fixture --with dev\n</code></pre>"},{"location":"reference/libs/python/shared/testlib/subprocessd/","title":"subprocessd","text":"<p>A Python library for managing asynchronous subprocess execution with logging capabilities.</p>"},{"location":"reference/libs/python/shared/testlib/subprocessd/#features","title":"Features","text":"<ul> <li>Start and stop subprocesses asynchronously.</li> <li>Log subprocess output to a specified directory.</li> </ul>"},{"location":"reference/libs/python/shared/testlib/subprocessd/#installation","title":"Installation","text":"<p>To install the <code>subprocessd</code> library, use the following command:</p> <pre><code>npx nx run &lt;PROJECT&gt;:add --name python-shared-testlib-subprocessd --local\n</code></pre>"},{"location":"reference/libs/python/shared/testlib/subprocessd/#usage","title":"Usage","text":""},{"location":"reference/libs/python/shared/testlib/subprocessd/#subprocessdasync","title":"SubprocessDAsync","text":"<p>The <code>SubprocessDAsync</code> class provides methods to manage asynchronous subprocess execution and logging.</p>"},{"location":"reference/libs/python/shared/testlib/subprocessd/#example","title":"Example","text":"<pre><code>import asyncio\nfrom subprocessd.subprocessd import SubprocessDAsync\n\nasync def main():\n    subprocess_args = [\"ls\", \"-l\"]\n    log_file_path = \"/path/to/logs\"\n\n    subprocess_manager = SubprocessDAsync(subprocess_args, log_file_path)\n\n    # Start the subprocess\n    await subprocess_manager.start()\n\n    # Do other async tasks\n    await asyncio.sleep(10)\n\n    # Stop the subprocess\n    await subprocess_manager.stop()\n\nasyncio.run(main())\n</code></pre>"},{"location":"reference/libs/python/shared/testlib/subprocessd/#running-tests","title":"Running Tests","text":"<p>To run the tests, use <code>pytest</code>:</p> <pre><code>npx nx test python-shared-testlib-subprocessd\n</code></pre> <p>Make sure you have the development dependencies installed:</p> <pre><code>npx nx install python-shared-testlib-subprocessd --with dev\n</code></pre>"},{"location":"reference/services/crawlers/video-downloader/","title":"services-crawlers-video-downloader","text":"<p>Project description here.</p>"},{"location":"reference/services/shared/config-vault/","title":"Config Vault","text":"<p>Config Vault is a Go-based application designed for managing configurations and health checks.</p>"},{"location":"reference/services/shared/config-vault/#features","title":"Features","text":"<ul> <li>Health check endpoint</li> <li>CRUD operations for configurations</li> <li>Dynamic routing for service and provider-based queries</li> </ul>"},{"location":"reference/services/shared/config-vault/#endpoints","title":"Endpoints","text":""},{"location":"reference/services/shared/config-vault/#health-check","title":"Health Check","text":"<ul> <li>GET /healthz</li> <li>Returns the health status of the application.</li> </ul>"},{"location":"reference/services/shared/config-vault/#configuration-management","title":"Configuration Management","text":"<ul> <li>POST /config</li> <li>Creates a new configuration.</li> <li> <p>Body: JSON object with configuration details.</p> </li> <li> <p>PUT /config</p> </li> <li>Updates an existing configuration.</li> <li> <p>Body: JSON object with updated configuration details.</p> </li> <li> <p>GET /config</p> </li> <li> <p>Lists all configurations.</p> </li> <li> <p>GET /config/{id}</p> </li> <li> <p>Retrieves a configuration by its ID.</p> </li> <li> <p>DELETE /config/{id}</p> </li> <li> <p>Deletes a configuration by its ID.</p> </li> <li> <p>GET /config/provider/{provider}/service/{service}</p> </li> <li> <p>Lists configurations by service and provider.</p> </li> <li> <p>GET /config/provider/{provider}/source/{source}</p> </li> <li> <p>Lists configurations by source and provider.</p> </li> <li> <p>GET /config/provider/{provider}/service/{service}/active/{active}</p> </li> <li> <p>Lists configurations by service, provider, and active status.</p> </li> <li> <p>GET /config/provider/{provider}/service/{service}/source/{source}</p> </li> <li> <p>Lists configurations by service, source, and provider.</p> </li> <li> <p>GET /config/provider/{provider}/dependencies/service/{service}/source/{source}</p> </li> <li>Lists configurations by provider and dependencies.</li> </ul>"},{"location":"reference/services/shared/config-vault/#building-and-deploying","title":"Building and Deploying","text":"<p>The application can be built and deployed using the provided Nx targets. The following targets are defined:</p> <ul> <li>serve: Runs the Go application.</li> <li>test: Runs the tests.</li> <li>lint: Lints the code.</li> <li>tidy: Tidies the Go modules.</li> <li>godoc: Generates Go documentation.</li> <li>wire: Runs Google Wire for dependency injection.</li> <li>build: Builds the Go application for a Linux environment.</li> <li>image: Builds the Docker image.</li> </ul> <p>Example command to build the Docker image: <pre><code>npx nx image services-shared-config-vault\n</code></pre></p>"},{"location":"reference/services/shared/config-vault/#docker-compose-configuration","title":"Docker Compose Configuration","text":""},{"location":"reference/services/shared/config-vault/#config-vault_1","title":"Config Vault","text":"<ul> <li>Image: fabiocaffarello/config-vault:latest</li> <li>Environment Variables:</li> <li><code>MONGODB_USER</code>: MongoDB username</li> <li><code>MONGODB_PASSWORD</code>: MongoDB password</li> <li><code>MONGODB_HOST</code>: MongoDB host</li> <li><code>MONGODB_PORT</code>: MongoDB port</li> <li><code>MONGODB_DBNAME</code>: MongoDB database name</li> <li>Ports: 8000:8000</li> <li>Healthcheck: Checks Config Vault health by calling the health endpoint.</li> </ul>"},{"location":"reference/services/shared/config-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/services/shared/config-vault/docs/godoc/#server","title":"server","text":"<pre><code>import \"services/shared/config-vault/cmd/server\"\n</code></pre>"},{"location":"reference/services/shared/config-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>func NewWebServiceConfigHandler(client *mongo.Client, database string) *handlers.WebConfigHandler</li> </ul>"},{"location":"reference/services/shared/config-vault/docs/godoc/#func-newwebserviceconfighandler","title":"func NewWebServiceConfigHandler","text":"<pre><code>func NewWebServiceConfigHandler(client *mongo.Client, database string) *handlers.WebConfigHandler\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/services/shared/events-router/","title":"Events Router","text":"<p>Events Router is a Go-based application designed for managing event routing, processing, and dispatching. It integrates with RabbitMQ and an in-memory document database to manage and process events.</p>"},{"location":"reference/services/shared/events-router/#features","title":"Features","text":"<ul> <li>Event routing and processing</li> <li>Event dispatching using RabbitMQ</li> <li>Health check endpoint</li> </ul>"},{"location":"reference/services/shared/events-router/#usage","title":"Usage","text":""},{"location":"reference/services/shared/events-router/#building-and-deploying","title":"Building and Deploying","text":"<p>The application can be built and deployed using the provided Nx targets. The following targets are defined:</p> <ul> <li>serve: Runs the Go application.</li> <li>test: Runs the tests.</li> <li>lint: Lints the code.</li> <li>tidy: Tidies the Go modules.</li> <li>godoc: Generates Go documentation.</li> <li>build: Builds the Go application for a Linux environment.</li> <li>image: Builds the Docker image.</li> </ul> <p>Example command to build the Docker image: <pre><code>npx nx image services-shared-events-router\n</code></pre></p>"},{"location":"reference/services/shared/events-router/#docker-compose-configuration","title":"Docker Compose Configuration","text":""},{"location":"reference/services/shared/events-router/#events-router_1","title":"Events Router","text":"<ul> <li>Image: fabiocaffarello/events-router:latest</li> <li>Environment Variables:</li> <li><code>DOCDB_DBNAME</code>: Document database name</li> <li><code>CONSUMER_NAME</code>: Name of the consumer</li> <li><code>RABBITMQ_USER</code>: RabbitMQ username</li> <li><code>RABBITMQ_PASSWORD</code>: RabbitMQ password</li> <li><code>RABBITMQ_HOST</code>: RabbitMQ host</li> <li><code>RABBITMQ_PORT</code>: RabbitMQ port</li> <li><code>RABBITMQ_PROTOCOL</code>: RabbitMQ protocol</li> <li><code>RABBITMQ_EXCHANGE_NAME</code>: RabbitMQ exchange name</li> <li><code>RABBITMQ_EXCHANGE_TYPE</code>: RabbitMQ exchange type</li> </ul>"},{"location":"reference/services/shared/events-router/docs/godoc/","title":"Godoc","text":""},{"location":"reference/services/shared/events-router/docs/godoc/#server","title":"server","text":"<pre><code>import \"services/shared/events-router/cmd/server\"\n</code></pre>"},{"location":"reference/services/shared/events-router/docs/godoc/#index","title":"Index","text":"<p>Generated by gomarkdoc</p>"},{"location":"reference/services/shared/input-broker/","title":"Input Broker","text":"<p>Input Broker is a Go-based application designed for handling input data, health checks, and event dispatching. It integrates with MongoDB and RabbitMQ to manage and process input messages.</p>"},{"location":"reference/services/shared/input-broker/#features","title":"Features","text":"<ul> <li>Health check endpoint</li> <li>Input data processing</li> <li>Event dispatching using RabbitMQ</li> </ul>"},{"location":"reference/services/shared/input-broker/#endpoints","title":"Endpoints","text":""},{"location":"reference/services/shared/input-broker/#health-check","title":"Health Check","text":"<ul> <li>GET /healthz</li> <li>Returns the health status of the application.</li> </ul>"},{"location":"reference/services/shared/input-broker/#input-management","title":"Input Management","text":"<ul> <li>POST /input</li> <li>Creates a new input entry.</li> <li>Body: JSON object with input details.</li> </ul>"},{"location":"reference/services/shared/input-broker/#building-and-deploying","title":"Building and Deploying","text":"<p>The application can be built and deployed using the provided Nx targets. The following targets are defined:</p> <ul> <li>serve: Runs the Go application.</li> <li>test: Runs the tests.</li> <li>lint: Lints the code.</li> <li>tidy: Tidies the Go modules.</li> <li>godoc: Generates Go documentation.</li> <li>wire: Runs Google Wire for dependency injection.</li> <li>build: Builds the Go application for a Linux environment.</li> <li>image: Builds the Docker image.</li> </ul> <p>Example command to build the Docker image: <pre><code>npx nx image services-shared-input-broker\n</code></pre></p>"},{"location":"reference/services/shared/input-broker/#docker-compose-configuration","title":"Docker Compose Configuration","text":""},{"location":"reference/services/shared/input-broker/#input-broker_1","title":"Input Broker","text":"<ul> <li>Image: fabiocaffarello/input-broker:latest</li> <li>Environment Variables:</li> <li><code>MONGODB_USER</code>: MongoDB username</li> <li><code>MONGODB_PASSWORD</code>: MongoDB password</li> <li><code>MONGODB_HOST</code>: MongoDB host</li> <li><code>MONGODB_PORT</code>: MongoDB port</li> <li><code>MONGODB_DBNAME</code>: MongoDB database name</li> <li><code>RABBITMQ_USER</code>: RabbitMQ username</li> <li><code>RABBITMQ_PASSWORD</code>: RabbitMQ password</li> <li><code>RABBITMQ_HOST</code>: RabbitMQ host</li> <li><code>RABBITMQ_PORT</code>: RabbitMQ port</li> <li><code>RABBITMQ_PROTOCOL</code>: RabbitMQ protocol</li> <li><code>RABBITMQ_EXCHANGE_NAME</code>: RabbitMQ exchange name</li> <li><code>RABBITMQ_EXCHANGE_TYPE</code>: RabbitMQ exchange type</li> <li>Ports: 8003:8000</li> <li>Healthcheck: Checks Input Broker health by calling the health endpoint.</li> </ul>"},{"location":"reference/services/shared/input-broker/docs/godoc/","title":"Godoc","text":""},{"location":"reference/services/shared/input-broker/docs/godoc/#server","title":"server","text":"<pre><code>import \"services/shared/input-broker/cmd/server\"\n</code></pre>"},{"location":"reference/services/shared/input-broker/docs/godoc/#index","title":"Index","text":"<ul> <li>func NewWebServiceInputHandler(client *mongo.Client, eventDispatcher amqpevents.EventDispatcherInterface, database string) *handlers.WebInputHandler</li> </ul>"},{"location":"reference/services/shared/input-broker/docs/godoc/#func-newwebserviceinputhandler","title":"func NewWebServiceInputHandler","text":"<pre><code>func NewWebServiceInputHandler(client *mongo.Client, eventDispatcher amqpevents.EventDispatcherInterface, database string) *handlers.WebInputHandler\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/services/shared/output-vault/","title":"Output Vault","text":"<p>Output Vault is a Go-based application designed for managing output data, health checks, and configuration management. It integrates with MongoDB to manage and process output entries.</p>"},{"location":"reference/services/shared/output-vault/#features","title":"Features","text":"<ul> <li>Health check endpoint</li> <li>CRUD operations for output data</li> <li>Dynamic routing for service, provider, and source-based queries</li> </ul>"},{"location":"reference/services/shared/output-vault/#endpoints","title":"Endpoints","text":""},{"location":"reference/services/shared/output-vault/#health-check","title":"Health Check","text":"<ul> <li>GET /healthz</li> <li>Returns the health status of the application.</li> </ul>"},{"location":"reference/services/shared/output-vault/#output-management","title":"Output Management","text":"<ul> <li>POST /output</li> <li>Creates a new output entry.</li> <li> <p>Body: JSON object with output details.</p> </li> <li> <p>PUT /output</p> </li> <li>Updates an existing output entry.</li> <li> <p>Body: JSON object with updated output details.</p> </li> <li> <p>GET /output</p> </li> <li> <p>Lists all output entries.</p> </li> <li> <p>GET /output/{id}</p> </li> <li> <p>Retrieves an output entry by its ID.</p> </li> <li> <p>DELETE /output/{id}</p> </li> <li> <p>Deletes an output entry by its ID.</p> </li> <li> <p>GET /output/provider/{provider}/service/{service}</p> </li> <li> <p>Lists outputs by service and provider.</p> </li> <li> <p>GET /output/provider/{provider}/source/{source}</p> </li> <li> <p>Lists outputs by source and provider.</p> </li> <li> <p>GET /output/provider/{provider}/service/{service}/source/{source}</p> </li> <li>Lists outputs by service, source, and provider.</li> </ul>"},{"location":"reference/services/shared/output-vault/#building-and-deploying","title":"Building and Deploying","text":"<p>The application can be built and deployed using the provided Nx targets. The following targets are defined:</p> <ul> <li>serve: Runs the Go application.</li> <li>test: Runs the tests.</li> <li>lint: Lints the code.</li> <li>tidy: Tidies the Go modules.</li> <li>godoc: Generates Go documentation.</li> <li>wire: Runs Google Wire for dependency injection.</li> <li>build: Builds the Go application for a Linux environment.</li> <li>image: Builds the Docker image.</li> </ul> <p>Example command to build the Docker image: <pre><code>npx nx image services-shared-output-vault\n</code></pre></p>"},{"location":"reference/services/shared/output-vault/#docker-compose-configuration","title":"Docker Compose Configuration","text":""},{"location":"reference/services/shared/output-vault/#output-vault_1","title":"Output Vault","text":"<ul> <li>Image: fabiocaffarello/output-vault:latest</li> <li>Environment Variables:</li> <li><code>MONGODB_USER</code>: MongoDB username</li> <li><code>MONGODB_PASSWORD</code>: MongoDB password</li> <li><code>MONGODB_HOST</code>: MongoDB host</li> <li><code>MONGODB_PORT</code>: MongoDB port</li> <li><code>MONGODB_DBNAME</code>: MongoDB database name</li> <li>Ports: 8002:8000</li> <li>Healthcheck: Checks Output Vault health by calling the health endpoint.</li> </ul>"},{"location":"reference/services/shared/output-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/services/shared/output-vault/docs/godoc/#server","title":"server","text":"<pre><code>import \"services/shared/output-vault/cmd/server\"\n</code></pre>"},{"location":"reference/services/shared/output-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>func NewWebServiceOutputHandler(client *mongo.Client, database string) *handlers.WebOutputHandler</li> </ul>"},{"location":"reference/services/shared/output-vault/docs/godoc/#func-newwebserviceoutputhandler","title":"func NewWebServiceOutputHandler","text":"<pre><code>func NewWebServiceOutputHandler(client *mongo.Client, database string) *handlers.WebOutputHandler\n</code></pre> <p>Generated by gomarkdoc</p>"},{"location":"reference/services/shared/schema-vault/","title":"Schema Vault","text":"<p>Schema Vault is a Go-based application designed for managing schema data, health checks, and configuration management. It integrates with MongoDB to manage and process schema entries.</p>"},{"location":"reference/services/shared/schema-vault/#features","title":"Features","text":"<ul> <li>Health check endpoint</li> <li>CRUD operations for schema data</li> <li>Dynamic routing for service, provider, and source-based queries</li> </ul>"},{"location":"reference/services/shared/schema-vault/#endpoints","title":"Endpoints","text":""},{"location":"reference/services/shared/schema-vault/#health-check","title":"Health Check","text":"<ul> <li>GET /healthz</li> <li>Returns the health status of the application.</li> </ul>"},{"location":"reference/services/shared/schema-vault/#schema-management","title":"Schema Management","text":"<ul> <li>POST /schema</li> <li>Creates a new schema entry.</li> <li> <p>Body: JSON object with schema details.</p> </li> <li> <p>PUT /schema</p> </li> <li>Updates an existing schema entry.</li> <li> <p>Body: JSON object with updated schema details.</p> </li> <li> <p>GET /schema</p> </li> <li> <p>Lists all schema entries.</p> </li> <li> <p>GET /schema/{id}</p> </li> <li> <p>Retrieves a schema entry by its ID.</p> </li> <li> <p>DELETE /schema/{id}</p> </li> <li> <p>Deletes a schema entry by its ID.</p> </li> <li> <p>GET /schema/provider/{provider}/service/{service}</p> </li> <li> <p>Lists schemas by service and provider.</p> </li> <li> <p>GET /schema/provider/{provider}/source/{source}</p> </li> <li> <p>Lists schemas by source and provider.</p> </li> <li> <p>GET /schema/provider/{provider}/service/{service}/source/{source}</p> </li> <li>Lists schemas by service, source, and provider.</li> </ul>"},{"location":"reference/services/shared/schema-vault/#building-and-deploying","title":"Building and Deploying","text":"<p>The application can be built and deployed using the provided Nx targets. The following targets are defined:</p> <ul> <li>serve: Runs the Go application.</li> <li>test: Runs the tests.</li> <li>lint: Lints the code.</li> <li>tidy: Tidies the Go modules.</li> <li>godoc: Generates Go documentation.</li> <li>wire: Runs Google Wire for dependency injection.</li> <li>build: Builds the Go application for a Linux environment.</li> <li>image: Builds the Docker image.</li> </ul> <p>Example command to build the Docker image: <pre><code>npx nx image services-shared-schema-vault\n</code></pre></p>"},{"location":"reference/services/shared/schema-vault/#docker-compose-configuration","title":"Docker Compose Configuration","text":""},{"location":"reference/services/shared/schema-vault/#schema-vault_1","title":"Schema Vault","text":"<ul> <li>Image: fabiocaffarello/schema-vault:latest</li> <li>Environment Variables:</li> <li><code>MONGODB_USER</code>: MongoDB username</li> <li><code>MONGODB_PASSWORD</code>: MongoDB password</li> <li><code>MONGODB_HOST</code>: MongoDB host</li> <li><code>MONGODB_PORT</code>: MongoDB port</li> <li><code>MONGODB_DBNAME</code>: MongoDB database name</li> <li>Ports: 8001:8000</li> <li>Healthcheck: Checks Schema Vault health by calling the health endpoint.</li> </ul>"},{"location":"reference/services/shared/schema-vault/docs/godoc/","title":"Godoc","text":""},{"location":"reference/services/shared/schema-vault/docs/godoc/#server","title":"server","text":"<pre><code>import \"services/shared/schema-vault/cmd/server\"\n</code></pre>"},{"location":"reference/services/shared/schema-vault/docs/godoc/#index","title":"Index","text":"<ul> <li>func NewWebServiceSchemaHandler(client *mongo.Client, database string) *handlers.WebSchemaHandler</li> </ul>"},{"location":"reference/services/shared/schema-vault/docs/godoc/#func-newwebserviceschemahandler","title":"func NewWebServiceSchemaHandler","text":"<pre><code>func NewWebServiceSchemaHandler(client *mongo.Client, database string) *handlers.WebSchemaHandler\n</code></pre> <p>Generated by gomarkdoc</p>"}]}